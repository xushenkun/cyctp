/* Generated by Cython 0.25.1 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "include\\ThostFtdcUserApiDataType.h", 
            "include\\ThostFtdcUserApiStruct.h", 
            "include\\TraderCollector.h", 
            "include\\Util.h"
        ], 
        "include_dirs": [
            "include"
        ], 
        "language": "c++", 
        "libraries": [
            "thosttraderapi"
        ], 
        "library_dirs": [
            "cyctp\\lib"
        ]
    }, 
    "module_name": "cyctp.ctp_trader"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_25_1"
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x03030000 || (PY_MAJOR_VERSION == 2 && PY_VERSION_HEX >= 0x02070000)
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_FASTCALL
  #define METH_FASTCALL 0x80
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject **args,
                                              Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && METH_FASTCALL == PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #define CYTHON_INLINE inline
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; };
    template<typename U> bool operator !=(U other) { return *ptr != other; };
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__src__ctp_trader
#define __PYX_HAVE_API__src__ctp_trader
#include "ThostFtdcUserApiDataType.h"
#include "Util.h"
#include "ThostFtdcUserApiStruct.h"
#include "TraderCollector.h"
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "src\\ctp_trader.pyx",
  "stringsource",
  "type.pxd",
};

/*--- Type declarations ---*/
struct __pyx_obj_3src_10ctp_trader_CtpTrader;
struct __pyx_obj___Pyx_EnumMeta;

/* "src/ctp_trader.pyx":41
 *     return ret
 * 
 * cdef class CtpTrader:             # <<<<<<<<<<<<<<
 *     cdef ctp_trader.CTraderCollector *collector
 *     def __cinit__(self, flowPath=".\\flow\\td\\", *args, **kwargs):
 */
struct __pyx_obj_3src_10ctp_trader_CtpTrader {
  PyObject_HEAD
  CTraderCollector *collector;
};


/* "EnumBase":15
 * 
 * @cython.internal
 * cdef class __Pyx_EnumMeta(type):             # <<<<<<<<<<<<<<
 *     def __init__(cls, name, parents, dct):
 *         type.__init__(cls, name, parents, dct)
 */
struct __pyx_obj___Pyx_EnumMeta {
  PyHeapTypeObject __pyx_base;
};


/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* GetModuleGlobalName.proto */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = PyThreadState_GET();
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* KeywordStringCheck.proto */
static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o,n,NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* append.proto */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* StringJoin.proto */
#if PY_MAJOR_VERSION < 3
#define __Pyx_PyString_Join __Pyx_PyBytes_Join
#define __Pyx_PyBaseString_Join(s, v) (PyUnicode_CheckExact(s) ? PyUnicode_Join(s, v) : __Pyx_PyBytes_Join(s, v))
#else
#define __Pyx_PyString_Join PyUnicode_Join
#define __Pyx_PyBaseString_Join PyUnicode_Join
#endif
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION < 3
    #define __Pyx_PyBytes_Join _PyString_Join
    #else
    #define __Pyx_PyBytes_Join _PyBytes_Join
    #endif
#else
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values);
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* GetNameInClass.proto */
static PyObject *__Pyx_GetNameInClass(PyObject *nmspace, PyObject *name);

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunction.proto */
#define __Pyx_CyFunction_USED 1
#include <structmember.h>
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_NewEx(ml, flags, qualname, self, module, globals, code)\
    __Pyx_CyFunction_New(__pyx_CyFunctionType, ml, flags, qualname, self, module, globals, code)
static PyObject *__Pyx_CyFunction_New(PyTypeObject *, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* Globals.proto */
static PyObject* __Pyx_Globals(void);

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__THOST_TE_RESUME_TYPE(enum THOST_TE_RESUME_TYPE value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(enum TD_CALLBACK_TYPE value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* Print.proto */
static int __Pyx_Print(PyObject*, PyObject *, int);
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

/* PrintOne.proto */
static int __Pyx_PrintOne(PyObject* stream, PyObject *o);

/* CIntFromPy.proto */
static CYTHON_INLINE enum THOST_TE_RESUME_TYPE __Pyx_PyInt_As_enum__THOST_TE_RESUME_TYPE(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* PyIdentifierFromString.proto */
#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

/* ModuleImport.proto */
static PyObject *__Pyx_ImportModule(const char *name);

/* TypeImport.proto */
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.string' */

/* Module declarations from 'src.ctp_trader' */
static PyTypeObject *__pyx_ptype_3src_10ctp_trader_CtpTrader = 0;
static PyTypeObject *__pyx_ptype___Pyx_EnumMeta = 0;
static PyObject *__Pyx_OrderedDict = 0;
static PyObject *__Pyx_EnumBase = 0;
static PyObject *__Pyx_globals = 0;
static int __pyx_f_3src_10ctp_trader_td_callback(void *, enum TD_CALLBACK_TYPE, void *, int, int); /*proto*/
static PyObject *__pyx_f_3src_10ctp_trader_as_str(PyObject *); /*proto*/
static char **__pyx_f_3src_10ctp_trader_to_cstring_array(PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "src.ctp_trader"
int __pyx_module_is_main_src__ctp_trader = 0;

/* Implementation of 'src.ctp_trader' */
static PyObject *__pyx_builtin_staticmethod;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_xrange;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_ValueError;
static const char __pyx_k_0[] = "0";
static const char __pyx_k_1[] = "1";
static const char __pyx_k_2[] = "2";
static const char __pyx_k_3[] = "3";
static const char __pyx_k_4[] = "4";
static const char __pyx_k_t[] = "t";
static const char __pyx_k_v[] = "v";
static const char __pyx_k__2[] = "";
static const char __pyx_k_CNY[] = "CNY";
static const char __pyx_k_bid[] = "bid";
static const char __pyx_k_cid[] = "cid";
static const char __pyx_k_cls[] = "cls";
static const char __pyx_k_day[] = "day";
static const char __pyx_k_dct[] = "dct";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_eid[] = "eid";
static const char __pyx_k_end[] = "end";
static const char __pyx_k_fid[] = "fid";
static const char __pyx_k_get[] = "get";
static const char __pyx_k_iid[] = "iid";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_pid[] = "pid";
static const char __pyx_k_pwd[] = "pwd";
static const char __pyx_k_res[] = "res";
static const char __pyx_k_rid[] = "rid";
static const char __pyx_k_s_s[] = "%s.%s";
static const char __pyx_k_sid[] = "sid";
static const char __pyx_k_str[] = "__str__";
static const char __pyx_k_tid[] = "tid";
static const char __pyx_k_0000[] = "0000";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_bbid[] = "bbid";
static const char __pyx_k_cidt[] = "cidt";
static const char __pyx_k_ciid[] = "ciid";
static const char __pyx_k_data[] = "data";
static const char __pyx_k_date[] = "date";
static const char __pyx_k_enum[] = "enum";
static const char __pyx_k_file[] = "file";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_join[] = "join";
static const char __pyx_k_last[] = "last";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_npwd[] = "npwd";
static const char __pyx_k_opwd[] = "opwd";
static const char __pyx_k_park[] = "park";
static const char __pyx_k_repr[] = "__repr__";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_user[] = "user";
static const char __pyx_k_utf8[] = "utf8";
static const char __pyx_k_byref[] = "byref";
static const char __pyx_k_class[] = "__class__";
static const char __pyx_k_login[] = "login";
static const char __pyx_k_price[] = "price";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_route[] = "route";
static const char __pyx_k_s_s_d[] = "<%s.%s: %d>";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_BankID[] = "BankID";
static const char __pyx_k_amount[] = "amount";
static const char __pyx_k_append[] = "append";
static const char __pyx_k_broker[] = "broker";
static const char __pyx_k_ctypes[] = "ctypes";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_logger[] = "logger";
static const char __pyx_k_memset[] = "memset";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_name_2[] = "__name__";
static const char __pyx_k_pclass[] = "pclass";
static const char __pyx_k_sizeof[] = "sizeof";
static const char __pyx_k_to_cid[] = "to_cid";
static const char __pyx_k_values[] = "values";
static const char __pyx_k_volume[] = "volume";
static const char __pyx_k_xrange[] = "xrange";
static const char __pyx_k_FrontID[] = "FrontID";
static const char __pyx_k_GTDDate[] = "GTDDate";
static const char __pyx_k_IntEnum[] = "IntEnum";
static const char __pyx_k_account[] = "account";
static const char __pyx_k_cb_pool[] = "cb_pool";
static const char __pyx_k_context[] = "context";
static const char __pyx_k_csizeof[] = "csizeof";
static const char __pyx_k_flow_td[] = ".\\flow\\td\\";
static const char __pyx_k_from_id[] = "from_id";
static const char __pyx_k_handler[] = "handler";
static const char __pyx_k_logging[] = "logging";
static const char __pyx_k_max_ref[] = "max_ref";
static const char __pyx_k_members[] = "__members__";
static const char __pyx_k_parents[] = "parents";
static const char __pyx_k_pointer[] = "pointer";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_product[] = "product";
static const char __pyx_k_version[] = "version";
static const char __pyx_k_BrokerID[] = "BrokerID";
static const char __pyx_k_EnumBase[] = "EnumBase";
static const char __pyx_k_EnumType[] = "EnumType";
static const char __pyx_k_OrderRef[] = "OrderRef";
static const char __pyx_k_authcode[] = "authcode";
static const char __pyx_k_currency[] = "currency";
static const char __pyx_k_flowPath[] = "flowPath";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_Direction[] = "Direction";
static const char __pyx_k_MinVolume[] = "MinVolume";
static const char __pyx_k_SessionID[] = "SessionID";
static const char __pyx_k_StopPrice[] = "StopPrice";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_addressof[] = "addressof";
static const char __pyx_k_buy_price[] = "buy_price";
static const char __pyx_k_direction[] = "direction";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_getLogger[] = "getLogger";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_order_ref[] = "order_ref";
static const char __pyx_k_processes[] = "processes";
static const char __pyx_k_threading[] = "threading";
static const char __pyx_k_ActionFlag[] = "ActionFlag";
static const char __pyx_k_ExchangeID[] = "ExchangeID";
static const char __pyx_k_InvestorID[] = "InvestorID";
static const char __pyx_k_LimitPrice[] = "LimitPrice";
static const char __pyx_k_OrderSysID[] = "OrderSysID";
static const char __pyx_k_ThreadPool[] = "ThreadPool";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_buy_volume[] = "buy_volume";
static const char __pyx_k_frontPaths[] = "frontPaths";
static const char __pyx_k_hedge_flag[] = "hedge_flag";
static const char __pyx_k_min_volume[] = "min_volume";
static const char __pyx_k_sell_price[] = "sell_price";
static const char __pyx_k_stop_price[] = "stop_price";
static const char __pyx_k_OrderedDict[] = "OrderedDict";
static const char __pyx_k_TD_RSP_AUTH[] = "TD_RSP_AUTH";
static const char __pyx_k_apply_async[] = "apply_async";
static const char __pyx_k_collections[] = "collections";
static const char __pyx_k_get_handler[] = "get_handler";
static const char __pyx_k_hedge_flags[] = "hedge_flags";
static const char __pyx_k_sell_volume[] = "sell_volume";
static const char __pyx_k_BankBranchID[] = "BankBranchID";
static const char __pyx_k_InstrumentID[] = "InstrumentID";
static const char __pyx_k_OrderRequest[] = "OrderRequest";
static const char __pyx_k_Pyx_EnumBase[] = "__Pyx_EnumBase";
static const char __pyx_k_TD_RSP_ERROR[] = "TD_RSP_ERROR";
static const char __pyx_k_TD_RTN_ORDER[] = "TD_RTN_ORDER";
static const char __pyx_k_TD_RTN_QUOTE[] = "TD_RTN_QUOTE";
static const char __pyx_k_TD_RTN_TRADE[] = "TD_RTN_TRADE";
static const char __pyx_k_auto_suspend[] = "auto_suspend";
static const char __pyx_k_offset_flags[] = "offset_flags";
static const char __pyx_k_order_sys_id[] = "order_sys_id";
static const char __pyx_k_publicResume[] = "publicResume";
static const char __pyx_k_staticmethod[] = "staticmethod";
static const char __pyx_k_stringsource[] = "stringsource";
static const char __pyx_k_CombHedgeFlag[] = "CombHedgeFlag";
static const char __pyx_k_IsAutoSuspend[] = "IsAutoSuspend";
static const char __pyx_k_TimeCondition[] = "TimeCondition";
static const char __pyx_k_privateResume[] = "privateResume";
static const char __pyx_k_BrokerBranchID[] = "BrokerBranchID";
static const char __pyx_k_CombOffsetFlag[] = "CombOffsetFlag";
static const char __pyx_k_OrderActionRef[] = "OrderActionRef";
static const char __pyx_k_OrderPriceType[] = "OrderPriceType";
static const char __pyx_k_UserForceClose[] = "UserForceClose";
static const char __pyx_k_async_callback[] = "async_callback";
static const char __pyx_k_current_thread[] = "current_thread";
static const char __pyx_k_logging_config[] = "logging.config";
static const char __pyx_k_src_ctp_trader[] = "src.ctp_trader";
static const char __pyx_k_time_condition[] = "time_condition";
static const char __pyx_k_TD_RTN_BULLETIN[] = "TD_RTN_BULLETIN";
static const char __pyx_k_VolumeCondition[] = "VolumeCondition";
static const char __pyx_k_all_instruments[] = "all_instruments";
static const char __pyx_k_all_trade_codes[] = "all_trade_codes";
static const char __pyx_k_get_trading_day[] = "get_trading_day";
static const char __pyx_k_ForceCloseReason[] = "ForceCloseReason";
static const char __pyx_k_ParkOrderRequest[] = "ParkOrderRequest";
static const char __pyx_k_TD_CALLBACK_TYPE[] = "TD_CALLBACK_TYPE";
static const char __pyx_k_TD_RSP_QRY_ORDER[] = "TD_RSP_QRY_ORDER";
static const char __pyx_k_TD_RSP_QRY_QUOTE[] = "TD_RSP_QRY_QUOTE";
static const char __pyx_k_TD_RSP_QRY_TRADE[] = "TD_RSP_QRY_TRADE";
static const char __pyx_k_THOST_TERT_QUICK[] = "THOST_TERT_QUICK";
static const char __pyx_k_cyctp_ctp_struct[] = "cyctp.ctp_struct";
static const char __pyx_k_user_force_close[] = "user_force_close";
static const char __pyx_k_volume_condition[] = "volume_condition";
static const char __pyx_k_CtpTrader_dealloc[] = "CtpTrader dealloc";
static const char __pyx_k_TD_RSP_PWD_UPDATE[] = "TD_RSP_PWD_UPDATE";
static const char __pyx_k_TD_RSP_QRY_NOTICE[] = "TD_RSP_QRY_NOTICE";
static const char __pyx_k_TD_RSP_USER_LOGIN[] = "TD_RSP_USER_LOGIN";
static const char __pyx_k_TD_RTN_EXEC_ORDER[] = "TD_RTN_EXEC_ORDER";
static const char __pyx_k_THOST_TERT_RESUME[] = "THOST_TERT_RESUME";
static const char __pyx_k_all_bank_accounts[] = "all_bank_accounts";
static const char __pyx_k_inc_max_order_ref[] = "inc_max_order_ref";
static const char __pyx_k_inc_max_other_ref[] = "inc_max_other_ref";
static const char __pyx_k_OrderActionRequest[] = "OrderActionRequest";
static const char __pyx_k_Pyx_EnumBase___new[] = "__Pyx_EnumBase.__new__";
static const char __pyx_k_Pyx_EnumBase___str[] = "__Pyx_EnumBase.__str__";
static const char __pyx_k_TD_FRONT_CONNECTED[] = "TD_FRONT_CONNECTED";
static const char __pyx_k_TD_HEART_BEAT_WARN[] = "TD_HEART_BEAT_WARN";
static const char __pyx_k_TD_RSP_QRY_PRODUCT[] = "TD_RSP_QRY_PRODUCT";
static const char __pyx_k_TD_RSP_REMOVE_PACK[] = "TD_RSP_REMOVE_PACK";
static const char __pyx_k_TD_RSP_USER_LOGOUT[] = "TD_RSP_USER_LOGOUT";
static const char __pyx_k_TD_RTN_COMB_ACTION[] = "TD_RTN_COMB_ACTION";
static const char __pyx_k_THOST_TERT_RESTART[] = "THOST_TERT_RESTART";
static const char __pyx_k_force_close_reason[] = "force_close_reason";
static const char __pyx_k_ContingentCondition[] = "ContingentCondition";
static const char __pyx_k_Pyx_EnumBase___repr[] = "__Pyx_EnumBase.__repr__";
static const char __pyx_k_TD_RSP_ORDER_ACTION[] = "TD_RSP_ORDER_ACTION";
static const char __pyx_k_TD_RSP_ORDER_INSERT[] = "TD_RSP_ORDER_INSERT";
static const char __pyx_k_TD_RSP_QRY_EXCHANGE[] = "TD_RSP_QRY_EXCHANGE";
static const char __pyx_k_TD_RSP_QRY_INVESTOR[] = "TD_RSP_QRY_INVESTOR";
static const char __pyx_k_TD_RSP_QUOTE_ACTION[] = "TD_RSP_QUOTE_ACTION";
static const char __pyx_k_TD_RSP_QUOTE_INSERT[] = "TD_RSP_QUOTE_INSERT";
static const char __pyx_k_VolumeTotalOriginal[] = "VolumeTotalOriginal";
static const char __pyx_k_TD_RSP_QRY_FOR_QUOTE[] = "TD_RSP_QRY_FOR_QUOTE";
static const char __pyx_k_TD_RTN_FOR_QUOTE_RSP[] = "TD_RTN_FOR_QUOTE_RSP";
static const char __pyx_k_THOST_TE_RESUME_TYPE[] = "THOST_TE_RESUME_TYPE";
static const char __pyx_k_Unknown_enum_value_s[] = "Unknown enum value: '%s'";
static const char __pyx_k_contingent_condition[] = "contingent_condition";
static const char __pyx_k_multiprocessing_pool[] = "multiprocessing.pool";
static const char __pyx_k_TD_FRONT_DISCONNECTED[] = "TD_FRONT_DISCONNECTED";
static const char __pyx_k_TD_RSP_QRY_EXEC_ORDER[] = "TD_RSP_QRY_EXEC_ORDER";
static const char __pyx_k_TD_RSP_QRY_INSTRUMENT[] = "TD_RSP_QRY_INSTRUMENT";
static const char __pyx_k_TD_RSP_QRY_PACK_ORDER[] = "TD_RSP_QRY_PACK_ORDER";
static const char __pyx_k_TD_RTN_TRADING_NOTICE[] = "TD_RTN_TRADING_NOTICE";
static const char __pyx_k_ParkOrderActionRequest[] = "ParkOrderActionRequest";
static const char __pyx_k_TD_RSP_QRY_COMB_ACTION[] = "TD_RSP_QRY_COMB_ACTION";
static const char __pyx_k_TD_RSP_QRY_SETTLE_INFO[] = "TD_RSP_QRY_SETTLE_INFO";
static const char __pyx_k_TD_ERR_RTN_ORDER_ACTION[] = "TD_ERR_RTN_ORDER_ACTION";
static const char __pyx_k_TD_ERR_RTN_ORDER_INSERT[] = "TD_ERR_RTN_ORDER_INSERT";
static const char __pyx_k_TD_ERR_RTN_QUOTE_ACTION[] = "TD_ERR_RTN_QUOTE_ACTION";
static const char __pyx_k_TD_ERR_RTN_QUOTE_INSERT[] = "TD_ERR_RTN_QUOTE_INSERT";
static const char __pyx_k_TD_RSP_FOR_QUOTE_INSERT[] = "TD_RSP_FOR_QUOTE_INSERT";
static const char __pyx_k_TD_RSP_QRY_INVESTOR_POS[] = "TD_RSP_QRY_INVESTOR_POS";
static const char __pyx_k_TD_RSP_QRY_TRADING_CODE[] = "TD_RSP_QRY_TRADING_CODE";
static const char __pyx_k_TD_RSP_EXEC_ORDER_ACTION[] = "TD_RSP_EXEC_ORDER_ACTION";
static const char __pyx_k_TD_RSP_EXEC_ORDER_INSERT[] = "TD_RSP_EXEC_ORDER_INSERT";
static const char __pyx_k_TD_RSP_PACK_ORDER_ACTION[] = "TD_RSP_PACK_ORDER_ACTION";
static const char __pyx_k_TD_RSP_PACK_ORDER_INSERT[] = "TD_RSP_PACK_ORDER_INSERT";
static const char __pyx_k_TD_RSP_QRY_CONTRACT_BANK[] = "TD_RSP_QRY_CONTRACT_BANK";
static const char __pyx_k_TD_RSP_QRY_EXCHANGE_RATE[] = "TD_RSP_QRY_EXCHANGE_RATE";
static const char __pyx_k_TD_RSP_QRY_PRODUCT_GROUP[] = "TD_RSP_QRY_PRODUCT_GROUP";
static const char __pyx_k_TD_RSP_QRY_TRANSFER_BANK[] = "TD_RSP_QRY_TRANSFER_BANK";
static const char __pyx_k_TD_RTN_INSTRUMENT_STATUS[] = "TD_RTN_INSTRUMENT_STATUS";
static const char __pyx_k_insert_limit_price_order[] = "insert_limit_price_order";
static const char __pyx_k_TD_RSP_BATCH_ORDER_ACTION[] = "TD_RSP_BATCH_ORDER_ACTION";
static const char __pyx_k_TD_RSP_COMB_ACTION_INSERT[] = "TD_RSP_COMB_ACTION_INSERT";
static const char __pyx_k_TD_RSP_QRY_TRADING_NOTICE[] = "TD_RSP_QRY_TRADING_NOTICE";
static const char __pyx_k_TD_RSP_REMOVE_PACK_ACTION[] = "TD_RSP_REMOVE_PACK_ACTION";
static const char __pyx_k_TD_RSP_TRADING_PWD_UPDATE[] = "TD_RSP_TRADING_PWD_UPDATE";
static const char __pyx_k_Cannot_convert_s_to_string[] = "Cannot convert %s to string";
static const char __pyx_k_TD_RSP_QRY_EWARRANT_OFFSET[] = "TD_RSP_QRY_EWARRANT_OFFSET";
static const char __pyx_k_TD_RSP_QRY_TRADING_ACCOUNT[] = "TD_RSP_QRY_TRADING_ACCOUNT";
static const char __pyx_k_TD_RSP_QRY_TRANSFER_SERIAL[] = "TD_RSP_QRY_TRANSFER_SERIAL";
static const char __pyx_k_TD_RSP_SETTLE_INFO_CONFIRM[] = "TD_RSP_SETTLE_INFO_CONFIRM";
static const char __pyx_k_TD_ERR_RTN_FOR_QUOTE_INSERT[] = "TD_ERR_RTN_FOR_QUOTE_INSERT";
static const char __pyx_k_TD_RSP_QRY_ACCOUNT_REGISTER[] = "TD_RSP_QRY_ACCOUNT_REGISTER";
static const char __pyx_k_TD_RSP_QRY_MAX_ORDER_VOLUME[] = "TD_RSP_QRY_MAX_ORDER_VOLUME";
static const char __pyx_k_TD_RTN_OPEN_ACCOUNT_BY_BANK[] = "TD_RTN_OPEN_ACCOUNT_BY_BANK";
static const char __pyx_k_TD_ERR_RTN_EXEC_ORDER_ACTION[] = "TD_ERR_RTN_EXEC_ORDER_ACTION";
static const char __pyx_k_TD_ERR_RTN_EXEC_ORDER_INSERT[] = "TD_ERR_RTN_EXEC_ORDER_INSERT";
static const char __pyx_k_TD_RSP_QRY_DEPTH_MARKET_DATA[] = "TD_RSP_QRY_DEPTH_MARKET_DATA";
static const char __pyx_k_TD_RSP_QRY_PACK_ORDER_ACTION[] = "TD_RSP_QRY_PACK_ORDER_ACTION";
static const char __pyx_k_TD_RSP_QRY_PRODUCT_EXCH_RATE[] = "TD_RSP_QRY_PRODUCT_EXCH_RATE";
static const char __pyx_k_TD_ERR_RTN_BATCH_ORDER_ACTION[] = "TD_ERR_RTN_BATCH_ORDER_ACTION";
static const char __pyx_k_TD_ERR_RTN_COMB_ACTION_INSERT[] = "TD_ERR_RTN_COMB_ACTION_INSERT";
static const char __pyx_k_TD_RSP_QRY_SEC_AGENT_ACID_MAP[] = "TD_RSP_QRY_SEC_AGENT_ACID_MAP";
static const char __pyx_k_TD_RTN_CANCEL_ACCOUNT_BY_BANK[] = "TD_RTN_CANCEL_ACCOUNT_BY_BANK";
static const char __pyx_k_TD_RTN_CHANGE_ACCOUNT_BY_BANK[] = "TD_RTN_CHANGE_ACCOUNT_BY_BANK";
static const char __pyx_k_TD_RSP_QRY_INVESTOR_POS_DETAIL[] = "TD_RSP_QRY_INVESTOR_POS_DETAIL";
static const char __pyx_k_TD_RSP_QRY_SETTLE_INFO_CONFIRM[] = "TD_RSP_QRY_SETTLE_INFO_CONFIRM";
static const char __pyx_k_TD_RTN_ERROR_CONDITIONAL_ORDER[] = "TD_RTN_ERROR_CONDITIONAL_ORDER";
static const char __pyx_k_TD_RSP_QRY_BROKER_TRADING_ALGOS[] = "TD_RSP_QRY_BROKER_TRADING_ALGOS";
static const char __pyx_k_TD_RSP_QRY_EXCHANGE_MARGIN_RATE[] = "TD_RSP_QRY_EXCHANGE_MARGIN_RATE";
static const char __pyx_k_TD_RSP_QRY_MM_OPTION_INSTR_COMM[] = "TD_RSP_QRY_MM_OPTION_INSTR_COMM_RATE";
static const char __pyx_k_D_startup_cyctp_src_ctp_trader_p[] = "D:\\startup\\cyctp\\src\\ctp_trader.pyx";
static const char __pyx_k_TD_ERR_RTN_BANK_TO_FUTURE_BY_FUT[] = "TD_ERR_RTN_BANK_TO_FUTURE_BY_FUTURE";
static const char __pyx_k_TD_ERR_RTN_FUTURE_TO_BANK_BY_FUT[] = "TD_ERR_RTN_FUTURE_TO_BANK_BY_FUTURE";
static const char __pyx_k_TD_ERR_RTN_QRY_BANK_BALANCE_BY_F[] = "TD_ERR_RTN_QRY_BANK_BALANCE_BY_FUTURE";
static const char __pyx_k_TD_ERR_RTN_REPEAL_BANK_TO_FUTURE[] = "TD_ERR_RTN_REPEAL_BANK_TO_FUTURE_BY_FUTURE_MANUAL";
static const char __pyx_k_TD_ERR_RTN_REPEAL_FUTURE_TO_BANK[] = "TD_ERR_RTN_REPEAL_FUTURE_TO_BANK_BY_FUTURE_MANUAL";
static const char __pyx_k_TD_RSP_FROM_BANK_TO_FUTURE_BY_FU[] = "TD_RSP_FROM_BANK_TO_FUTURE_BY_FUTURE";
static const char __pyx_k_TD_RSP_FROM_FUTURE_TO_BANK_BY_FU[] = "TD_RSP_FROM_FUTURE_TO_BANK_BY_FUTURE";
static const char __pyx_k_TD_RSP_QRY_BANK_ACCOUNT_MONEY_BY[] = "TD_RSP_QRY_BANK_ACCOUNT_MONEY_BY_FUTURE";
static const char __pyx_k_TD_RSP_QRY_BROKER_TRADING_PARAMS[] = "TD_RSP_QRY_BROKER_TRADING_PARAMS";
static const char __pyx_k_TD_RSP_QRY_CFMMC_TRADING_ACCOUNT[] = "TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_KEY";
static const char __pyx_k_TD_RSP_QRY_COMB_INSTRUMENT_GUARD[] = "TD_RSP_QRY_COMB_INSTRUMENT_GUARD";
static const char __pyx_k_TD_RSP_QRY_INSTRUMENT_COMMISSION[] = "TD_RSP_QRY_INSTRUMENT_COMMISSION_RATE";
static const char __pyx_k_TD_RSP_QRY_INSTRUMENT_MARGIN_RAT[] = "TD_RSP_QRY_INSTRUMENT_MARGIN_RATE";
static const char __pyx_k_TD_RSP_QRY_INSTRUMENT_ORDER_COMM[] = "TD_RSP_QRY_INSTRUMENT_ORDER_COMM_RATE";
static const char __pyx_k_TD_RSP_QRY_INVESTOR_POS_COMB_DET[] = "TD_RSP_QRY_INVESTOR_POS_COMB_DETAIL";
static const char __pyx_k_TD_RSP_QRY_INVESTOR_PRODUCT_GROU[] = "TD_RSP_QRY_INVESTOR_PRODUCT_GROUP_MARGIN";
static const char __pyx_k_TD_RSP_QRY_MM_INSTRUMENT_COMMISS[] = "TD_RSP_QRY_MM_INSTRUMENT_COMMISSION_RATE";
static const char __pyx_k_TD_RSP_QRY_OPTION_INSTR_COMM_RAT[] = "TD_RSP_QRY_OPTION_INSTR_COMM_RATE";
static const char __pyx_k_TD_RSP_QRY_OPTION_INSTR_TRADE_CO[] = "TD_RSP_QRY_OPTION_INSTR_TRADE_COST";
static const char __pyx_k_TD_RTN_CFMMC_TRADING_ACCOUNT_TOK[] = "TD_RTN_CFMMC_TRADING_ACCOUNT_TOKEN";
static const char __pyx_k_TD_RTN_FROM_BANK_TO_FUTURE_BY_BA[] = "TD_RTN_FROM_BANK_TO_FUTURE_BY_BANK";
static const char __pyx_k_TD_RTN_FROM_BANK_TO_FUTURE_BY_FU[] = "TD_RTN_FROM_BANK_TO_FUTURE_BY_FUTURE";
static const char __pyx_k_TD_RTN_FROM_FUTURE_TO_BANK_BY_BA[] = "TD_RTN_FROM_FUTURE_TO_BANK_BY_BANK";
static const char __pyx_k_TD_RTN_FROM_FUTURE_TO_BANK_BY_FU[] = "TD_RTN_FROM_FUTURE_TO_BANK_BY_FUTURE";
static const char __pyx_k_TD_RTN_QUERY_BANK_BALANCE_BY_FUT[] = "TD_RTN_QUERY_BANK_BALANCE_BY_FUTURE";
static const char __pyx_k_TD_RTN_REPEAL_FROM_BANK_TO_FUTUR[] = "TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_BANK";
static const char __pyx_k_TD_RTN_REPEAL_FROM_FUTURE_TO_BAN[] = "TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_BANK";
static const char __pyx_k_TD_RSP_QRY_EXCHANGE_MARGIN_RATE_2[] = "TD_RSP_QRY_EXCHANGE_MARGIN_RATE_ADJUST";
static const char __pyx_k_TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_2[] = "TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_TOKEN";
static const char __pyx_k_TD_RTN_REPEAL_FROM_BANK_TO_FUTUR_2[] = "TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE_MANUAL";
static const char __pyx_k_TD_RTN_REPEAL_FROM_BANK_TO_FUTUR_3[] = "TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE";
static const char __pyx_k_TD_RTN_REPEAL_FROM_FUTURE_TO_BAN_2[] = "TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE_MANUAL";
static const char __pyx_k_TD_RTN_REPEAL_FROM_FUTURE_TO_BAN_3[] = "TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE";
static PyObject *__pyx_kp_s_0;
static PyObject *__pyx_kp_s_0000;
static PyObject *__pyx_kp_s_1;
static PyObject *__pyx_kp_s_2;
static PyObject *__pyx_kp_s_3;
static PyObject *__pyx_kp_s_4;
static PyObject *__pyx_n_s_ActionFlag;
static PyObject *__pyx_n_s_BankBranchID;
static PyObject *__pyx_n_s_BankID;
static PyObject *__pyx_n_s_BrokerBranchID;
static PyObject *__pyx_n_s_BrokerID;
static PyObject *__pyx_n_s_CNY;
static PyObject *__pyx_kp_s_Cannot_convert_s_to_string;
static PyObject *__pyx_n_s_CombHedgeFlag;
static PyObject *__pyx_n_s_CombOffsetFlag;
static PyObject *__pyx_n_s_ContingentCondition;
static PyObject *__pyx_kp_s_CtpTrader_dealloc;
static PyObject *__pyx_kp_s_D_startup_cyctp_src_ctp_trader_p;
static PyObject *__pyx_n_s_Direction;
static PyObject *__pyx_n_s_EnumBase;
static PyObject *__pyx_n_s_EnumType;
static PyObject *__pyx_n_s_ExchangeID;
static PyObject *__pyx_n_s_ForceCloseReason;
static PyObject *__pyx_n_s_FrontID;
static PyObject *__pyx_n_s_GTDDate;
static PyObject *__pyx_n_s_InstrumentID;
static PyObject *__pyx_n_s_IntEnum;
static PyObject *__pyx_n_s_InvestorID;
static PyObject *__pyx_n_s_IsAutoSuspend;
static PyObject *__pyx_n_s_LimitPrice;
static PyObject *__pyx_n_s_MinVolume;
static PyObject *__pyx_n_s_OrderActionRef;
static PyObject *__pyx_n_s_OrderActionRequest;
static PyObject *__pyx_n_s_OrderPriceType;
static PyObject *__pyx_n_s_OrderRef;
static PyObject *__pyx_n_s_OrderRequest;
static PyObject *__pyx_n_s_OrderSysID;
static PyObject *__pyx_n_s_OrderedDict;
static PyObject *__pyx_n_s_ParkOrderActionRequest;
static PyObject *__pyx_n_s_ParkOrderRequest;
static PyObject *__pyx_n_s_Pyx_EnumBase;
static PyObject *__pyx_n_s_Pyx_EnumBase___new;
static PyObject *__pyx_n_s_Pyx_EnumBase___repr;
static PyObject *__pyx_n_s_Pyx_EnumBase___str;
static PyObject *__pyx_n_s_SessionID;
static PyObject *__pyx_n_s_StopPrice;
static PyObject *__pyx_n_s_TD_CALLBACK_TYPE;
static PyObject *__pyx_n_s_TD_ERR_RTN_BANK_TO_FUTURE_BY_FUT;
static PyObject *__pyx_n_s_TD_ERR_RTN_BATCH_ORDER_ACTION;
static PyObject *__pyx_n_s_TD_ERR_RTN_COMB_ACTION_INSERT;
static PyObject *__pyx_n_s_TD_ERR_RTN_EXEC_ORDER_ACTION;
static PyObject *__pyx_n_s_TD_ERR_RTN_EXEC_ORDER_INSERT;
static PyObject *__pyx_n_s_TD_ERR_RTN_FOR_QUOTE_INSERT;
static PyObject *__pyx_n_s_TD_ERR_RTN_FUTURE_TO_BANK_BY_FUT;
static PyObject *__pyx_n_s_TD_ERR_RTN_ORDER_ACTION;
static PyObject *__pyx_n_s_TD_ERR_RTN_ORDER_INSERT;
static PyObject *__pyx_n_s_TD_ERR_RTN_QRY_BANK_BALANCE_BY_F;
static PyObject *__pyx_n_s_TD_ERR_RTN_QUOTE_ACTION;
static PyObject *__pyx_n_s_TD_ERR_RTN_QUOTE_INSERT;
static PyObject *__pyx_n_s_TD_ERR_RTN_REPEAL_BANK_TO_FUTURE;
static PyObject *__pyx_n_s_TD_ERR_RTN_REPEAL_FUTURE_TO_BANK;
static PyObject *__pyx_n_s_TD_FRONT_CONNECTED;
static PyObject *__pyx_n_s_TD_FRONT_DISCONNECTED;
static PyObject *__pyx_n_s_TD_HEART_BEAT_WARN;
static PyObject *__pyx_n_s_TD_RSP_AUTH;
static PyObject *__pyx_n_s_TD_RSP_BATCH_ORDER_ACTION;
static PyObject *__pyx_n_s_TD_RSP_COMB_ACTION_INSERT;
static PyObject *__pyx_n_s_TD_RSP_ERROR;
static PyObject *__pyx_n_s_TD_RSP_EXEC_ORDER_ACTION;
static PyObject *__pyx_n_s_TD_RSP_EXEC_ORDER_INSERT;
static PyObject *__pyx_n_s_TD_RSP_FOR_QUOTE_INSERT;
static PyObject *__pyx_n_s_TD_RSP_FROM_BANK_TO_FUTURE_BY_FU;
static PyObject *__pyx_n_s_TD_RSP_FROM_FUTURE_TO_BANK_BY_FU;
static PyObject *__pyx_n_s_TD_RSP_ORDER_ACTION;
static PyObject *__pyx_n_s_TD_RSP_ORDER_INSERT;
static PyObject *__pyx_n_s_TD_RSP_PACK_ORDER_ACTION;
static PyObject *__pyx_n_s_TD_RSP_PACK_ORDER_INSERT;
static PyObject *__pyx_n_s_TD_RSP_PWD_UPDATE;
static PyObject *__pyx_n_s_TD_RSP_QRY_ACCOUNT_REGISTER;
static PyObject *__pyx_n_s_TD_RSP_QRY_BANK_ACCOUNT_MONEY_BY;
static PyObject *__pyx_n_s_TD_RSP_QRY_BROKER_TRADING_ALGOS;
static PyObject *__pyx_n_s_TD_RSP_QRY_BROKER_TRADING_PARAMS;
static PyObject *__pyx_n_s_TD_RSP_QRY_CFMMC_TRADING_ACCOUNT;
static PyObject *__pyx_n_s_TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_2;
static PyObject *__pyx_n_s_TD_RSP_QRY_COMB_ACTION;
static PyObject *__pyx_n_s_TD_RSP_QRY_COMB_INSTRUMENT_GUARD;
static PyObject *__pyx_n_s_TD_RSP_QRY_CONTRACT_BANK;
static PyObject *__pyx_n_s_TD_RSP_QRY_DEPTH_MARKET_DATA;
static PyObject *__pyx_n_s_TD_RSP_QRY_EWARRANT_OFFSET;
static PyObject *__pyx_n_s_TD_RSP_QRY_EXCHANGE;
static PyObject *__pyx_n_s_TD_RSP_QRY_EXCHANGE_MARGIN_RATE;
static PyObject *__pyx_n_s_TD_RSP_QRY_EXCHANGE_MARGIN_RATE_2;
static PyObject *__pyx_n_s_TD_RSP_QRY_EXCHANGE_RATE;
static PyObject *__pyx_n_s_TD_RSP_QRY_EXEC_ORDER;
static PyObject *__pyx_n_s_TD_RSP_QRY_FOR_QUOTE;
static PyObject *__pyx_n_s_TD_RSP_QRY_INSTRUMENT;
static PyObject *__pyx_n_s_TD_RSP_QRY_INSTRUMENT_COMMISSION;
static PyObject *__pyx_n_s_TD_RSP_QRY_INSTRUMENT_MARGIN_RAT;
static PyObject *__pyx_n_s_TD_RSP_QRY_INSTRUMENT_ORDER_COMM;
static PyObject *__pyx_n_s_TD_RSP_QRY_INVESTOR;
static PyObject *__pyx_n_s_TD_RSP_QRY_INVESTOR_POS;
static PyObject *__pyx_n_s_TD_RSP_QRY_INVESTOR_POS_COMB_DET;
static PyObject *__pyx_n_s_TD_RSP_QRY_INVESTOR_POS_DETAIL;
static PyObject *__pyx_n_s_TD_RSP_QRY_INVESTOR_PRODUCT_GROU;
static PyObject *__pyx_n_s_TD_RSP_QRY_MAX_ORDER_VOLUME;
static PyObject *__pyx_n_s_TD_RSP_QRY_MM_INSTRUMENT_COMMISS;
static PyObject *__pyx_n_s_TD_RSP_QRY_MM_OPTION_INSTR_COMM;
static PyObject *__pyx_n_s_TD_RSP_QRY_NOTICE;
static PyObject *__pyx_n_s_TD_RSP_QRY_OPTION_INSTR_COMM_RAT;
static PyObject *__pyx_n_s_TD_RSP_QRY_OPTION_INSTR_TRADE_CO;
static PyObject *__pyx_n_s_TD_RSP_QRY_ORDER;
static PyObject *__pyx_n_s_TD_RSP_QRY_PACK_ORDER;
static PyObject *__pyx_n_s_TD_RSP_QRY_PACK_ORDER_ACTION;
static PyObject *__pyx_n_s_TD_RSP_QRY_PRODUCT;
static PyObject *__pyx_n_s_TD_RSP_QRY_PRODUCT_EXCH_RATE;
static PyObject *__pyx_n_s_TD_RSP_QRY_PRODUCT_GROUP;
static PyObject *__pyx_n_s_TD_RSP_QRY_QUOTE;
static PyObject *__pyx_n_s_TD_RSP_QRY_SEC_AGENT_ACID_MAP;
static PyObject *__pyx_n_s_TD_RSP_QRY_SETTLE_INFO;
static PyObject *__pyx_n_s_TD_RSP_QRY_SETTLE_INFO_CONFIRM;
static PyObject *__pyx_n_s_TD_RSP_QRY_TRADE;
static PyObject *__pyx_n_s_TD_RSP_QRY_TRADING_ACCOUNT;
static PyObject *__pyx_n_s_TD_RSP_QRY_TRADING_CODE;
static PyObject *__pyx_n_s_TD_RSP_QRY_TRADING_NOTICE;
static PyObject *__pyx_n_s_TD_RSP_QRY_TRANSFER_BANK;
static PyObject *__pyx_n_s_TD_RSP_QRY_TRANSFER_SERIAL;
static PyObject *__pyx_n_s_TD_RSP_QUOTE_ACTION;
static PyObject *__pyx_n_s_TD_RSP_QUOTE_INSERT;
static PyObject *__pyx_n_s_TD_RSP_REMOVE_PACK;
static PyObject *__pyx_n_s_TD_RSP_REMOVE_PACK_ACTION;
static PyObject *__pyx_n_s_TD_RSP_SETTLE_INFO_CONFIRM;
static PyObject *__pyx_n_s_TD_RSP_TRADING_PWD_UPDATE;
static PyObject *__pyx_n_s_TD_RSP_USER_LOGIN;
static PyObject *__pyx_n_s_TD_RSP_USER_LOGOUT;
static PyObject *__pyx_n_s_TD_RTN_BULLETIN;
static PyObject *__pyx_n_s_TD_RTN_CANCEL_ACCOUNT_BY_BANK;
static PyObject *__pyx_n_s_TD_RTN_CFMMC_TRADING_ACCOUNT_TOK;
static PyObject *__pyx_n_s_TD_RTN_CHANGE_ACCOUNT_BY_BANK;
static PyObject *__pyx_n_s_TD_RTN_COMB_ACTION;
static PyObject *__pyx_n_s_TD_RTN_ERROR_CONDITIONAL_ORDER;
static PyObject *__pyx_n_s_TD_RTN_EXEC_ORDER;
static PyObject *__pyx_n_s_TD_RTN_FOR_QUOTE_RSP;
static PyObject *__pyx_n_s_TD_RTN_FROM_BANK_TO_FUTURE_BY_BA;
static PyObject *__pyx_n_s_TD_RTN_FROM_BANK_TO_FUTURE_BY_FU;
static PyObject *__pyx_n_s_TD_RTN_FROM_FUTURE_TO_BANK_BY_BA;
static PyObject *__pyx_n_s_TD_RTN_FROM_FUTURE_TO_BANK_BY_FU;
static PyObject *__pyx_n_s_TD_RTN_INSTRUMENT_STATUS;
static PyObject *__pyx_n_s_TD_RTN_OPEN_ACCOUNT_BY_BANK;
static PyObject *__pyx_n_s_TD_RTN_ORDER;
static PyObject *__pyx_n_s_TD_RTN_QUERY_BANK_BALANCE_BY_FUT;
static PyObject *__pyx_n_s_TD_RTN_QUOTE;
static PyObject *__pyx_n_s_TD_RTN_REPEAL_FROM_BANK_TO_FUTUR;
static PyObject *__pyx_n_s_TD_RTN_REPEAL_FROM_BANK_TO_FUTUR_2;
static PyObject *__pyx_n_s_TD_RTN_REPEAL_FROM_BANK_TO_FUTUR_3;
static PyObject *__pyx_n_s_TD_RTN_REPEAL_FROM_FUTURE_TO_BAN;
static PyObject *__pyx_n_s_TD_RTN_REPEAL_FROM_FUTURE_TO_BAN_2;
static PyObject *__pyx_n_s_TD_RTN_REPEAL_FROM_FUTURE_TO_BAN_3;
static PyObject *__pyx_n_s_TD_RTN_TRADE;
static PyObject *__pyx_n_s_TD_RTN_TRADING_NOTICE;
static PyObject *__pyx_n_s_THOST_TERT_QUICK;
static PyObject *__pyx_n_s_THOST_TERT_RESTART;
static PyObject *__pyx_n_s_THOST_TERT_RESUME;
static PyObject *__pyx_n_s_THOST_TE_RESUME_TYPE;
static PyObject *__pyx_n_s_ThreadPool;
static PyObject *__pyx_n_s_TimeCondition;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_s_Unknown_enum_value_s;
static PyObject *__pyx_n_s_UserForceClose;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_VolumeCondition;
static PyObject *__pyx_n_s_VolumeTotalOriginal;
static PyObject *__pyx_kp_s__2;
static PyObject *__pyx_n_s_account;
static PyObject *__pyx_n_s_addressof;
static PyObject *__pyx_n_s_all_bank_accounts;
static PyObject *__pyx_n_s_all_instruments;
static PyObject *__pyx_n_s_all_trade_codes;
static PyObject *__pyx_n_s_amount;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_apply_async;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_async_callback;
static PyObject *__pyx_n_s_authcode;
static PyObject *__pyx_n_s_auto_suspend;
static PyObject *__pyx_n_s_bbid;
static PyObject *__pyx_n_s_bid;
static PyObject *__pyx_n_s_broker;
static PyObject *__pyx_n_s_buy_price;
static PyObject *__pyx_n_s_buy_volume;
static PyObject *__pyx_n_s_byref;
static PyObject *__pyx_n_s_cb_pool;
static PyObject *__pyx_n_s_cid;
static PyObject *__pyx_n_s_cidt;
static PyObject *__pyx_n_s_ciid;
static PyObject *__pyx_n_s_class;
static PyObject *__pyx_n_s_cls;
static PyObject *__pyx_n_s_collections;
static PyObject *__pyx_n_s_context;
static PyObject *__pyx_n_s_contingent_condition;
static PyObject *__pyx_n_s_csizeof;
static PyObject *__pyx_n_s_ctypes;
static PyObject *__pyx_n_s_currency;
static PyObject *__pyx_n_s_current_thread;
static PyObject *__pyx_n_s_cyctp_ctp_struct;
static PyObject *__pyx_n_s_data;
static PyObject *__pyx_n_s_date;
static PyObject *__pyx_n_s_day;
static PyObject *__pyx_n_s_dct;
static PyObject *__pyx_n_s_direction;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_eid;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_enum;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_fid;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_n_s_flowPath;
static PyObject *__pyx_kp_s_flow_td;
static PyObject *__pyx_n_s_force_close_reason;
static PyObject *__pyx_n_s_from_id;
static PyObject *__pyx_n_s_frontPaths;
static PyObject *__pyx_n_s_get;
static PyObject *__pyx_n_s_getLogger;
static PyObject *__pyx_n_s_get_handler;
static PyObject *__pyx_n_s_get_trading_day;
static PyObject *__pyx_n_s_handler;
static PyObject *__pyx_n_s_hedge_flag;
static PyObject *__pyx_n_s_hedge_flags;
static PyObject *__pyx_n_s_iid;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_inc_max_order_ref;
static PyObject *__pyx_n_s_inc_max_other_ref;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_s_insert_limit_price_order;
static PyObject *__pyx_n_s_join;
static PyObject *__pyx_n_s_last;
static PyObject *__pyx_n_s_logger;
static PyObject *__pyx_n_s_logging;
static PyObject *__pyx_n_s_logging_config;
static PyObject *__pyx_n_s_login;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_max_ref;
static PyObject *__pyx_n_s_members;
static PyObject *__pyx_n_s_memset;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_min_volume;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_multiprocessing_pool;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_n_s_new;
static PyObject *__pyx_n_s_npwd;
static PyObject *__pyx_n_s_offset_flags;
static PyObject *__pyx_n_s_opwd;
static PyObject *__pyx_n_s_order_ref;
static PyObject *__pyx_n_s_order_sys_id;
static PyObject *__pyx_n_s_parents;
static PyObject *__pyx_n_s_park;
static PyObject *__pyx_n_s_pclass;
static PyObject *__pyx_n_s_pid;
static PyObject *__pyx_n_s_pointer;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_price;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_privateResume;
static PyObject *__pyx_n_s_processes;
static PyObject *__pyx_n_s_product;
static PyObject *__pyx_n_s_publicResume;
static PyObject *__pyx_n_s_pwd;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_repr;
static PyObject *__pyx_n_s_res;
static PyObject *__pyx_n_s_rid;
static PyObject *__pyx_n_s_route;
static PyObject *__pyx_kp_s_s_s;
static PyObject *__pyx_kp_s_s_s_d;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_n_s_sell_price;
static PyObject *__pyx_n_s_sell_volume;
static PyObject *__pyx_n_s_sid;
static PyObject *__pyx_n_s_sizeof;
static PyObject *__pyx_n_s_src_ctp_trader;
static PyObject *__pyx_n_s_staticmethod;
static PyObject *__pyx_n_s_stop_price;
static PyObject *__pyx_n_s_str;
static PyObject *__pyx_kp_s_stringsource;
static PyObject *__pyx_n_s_t;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_threading;
static PyObject *__pyx_n_s_tid;
static PyObject *__pyx_n_s_time_condition;
static PyObject *__pyx_n_s_to_cid;
static PyObject *__pyx_n_s_user;
static PyObject *__pyx_n_s_user_force_close;
static PyObject *__pyx_n_s_utf8;
static PyObject *__pyx_n_s_v;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_n_s_values;
static PyObject *__pyx_n_s_version;
static PyObject *__pyx_n_s_volume;
static PyObject *__pyx_n_s_volume_condition;
static PyObject *__pyx_n_s_xrange;
static PyObject *__pyx_pf_3src_10ctp_trader_async_callback(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_context, PyObject *__pyx_v_t, PyObject *__pyx_v_data, PyObject *__pyx_v_rid, PyObject *__pyx_v_last); /* proto */
static int __pyx_pf_3src_10ctp_trader_9CtpTrader___cinit__(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_flowPath, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs); /* proto */
static void __pyx_pf_3src_10ctp_trader_9CtpTrader_2__dealloc__(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_4version(); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_6connect(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_frontPaths, PyObject *__pyx_v_privateResume, PyObject *__pyx_v_publicResume); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_8auth(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_10login(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_bbid); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_12logout(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_14get_trading_day(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_16change_user_pwd(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_opwd, PyObject *__pyx_v_npwd); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_18change_trading_pwd(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_account, PyObject *__pyx_v_opwd, PyObject *__pyx_v_npwd, PyObject *__pyx_v_currency); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_20query_settle_confirm(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_22query_settle(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_day); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_24confirm_settle(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_26query_notice(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_28query_trading_notice(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_30query_investor(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_32query_exchange(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_eid); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_34query_product(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_pid, PyObject *__pyx_v_pclass); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_36query_instrument(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_iid, PyObject *__pyx_v_eid, PyObject *__pyx_v_pid); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_38query_instruments(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_40add_instrument(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_instrument); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_42get_instruments(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_44query_position(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_iid); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_46query_position_detail(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_iid); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_48query_position_comb_detail(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_ciid); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_50query_park_order(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_iid, PyObject *__pyx_v_eid); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_52query_park_order_action(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_iid, PyObject *__pyx_v_eid); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_54query_order(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_56query_order_max_volume(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_iid); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_58query_trade(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_iid, PyObject *__pyx_v_eid, PyObject *__pyx_v_tid); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_60query_account_register(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_bid); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_62add_bank_account(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_account); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_64get_bank_accounts(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_66query_transfer_bank(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_bid, PyObject *__pyx_v_bbid); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_68query_contract_bank(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_bid, PyObject *__pyx_v_bbid); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_70query_trade_account(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_72query_trade_code(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_eid, PyObject *__pyx_v_cid, PyObject *__pyx_v_cidt); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_74add_trade_code(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_tradecode); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_76get_trade_codes(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_78deposit_money(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_bid, PyObject *__pyx_v_amount, PyObject *__pyx_v_bbid, PyObject *__pyx_v_day); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_80withdraw_money(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_bid, PyObject *__pyx_v_amount, PyObject *__pyx_v_bbid, PyObject *__pyx_v_day); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_82query_transfer(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_bid); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_84query_bank_money(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_bid, PyObject *__pyx_v_bbid, PyObject *__pyx_v_day); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_86query_market_data(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_iid); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_88ask_quote(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_iid, PyObject *__pyx_v_max_ref); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_90query_ask_quote(CYTHON_UNUSED struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_92answer_quote(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_iid, PyObject *__pyx_v_buy_price, PyObject *__pyx_v_sell_price, PyObject *__pyx_v_buy_volume, PyObject *__pyx_v_sell_volume); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_94cancel_answer_quote(CYTHON_UNUSED struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_iid); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_96insert_limit_price_order(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_iid, PyObject *__pyx_v_direction, PyObject *__pyx_v_volume, PyObject *__pyx_v_price, PyObject *__pyx_v_offset_flags, PyObject *__pyx_v_hedge_flags, PyObject *__pyx_v_min_volume, PyObject *__pyx_v_volume_condition, PyObject *__pyx_v_time_condition, PyObject *__pyx_v_force_close_reason, PyObject *__pyx_v_auto_suspend, PyObject *__pyx_v_user_force_close, PyObject *__pyx_v_max_ref, PyObject *__pyx_v_park); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_98insert_market_price_order(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_iid, PyObject *__pyx_v_direction, PyObject *__pyx_v_volume, PyObject *__pyx_v_offset_flags, PyObject *__pyx_v_hedge_flags, PyObject *__pyx_v_min_volume, PyObject *__pyx_v_volume_condition, PyObject *__pyx_v_time_condition, PyObject *__pyx_v_force_close_reason, PyObject *__pyx_v_auto_suspend, PyObject *__pyx_v_user_force_close, PyObject *__pyx_v_max_ref, PyObject *__pyx_v_park); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_100insert_condition_order(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_iid, PyObject *__pyx_v_direction, PyObject *__pyx_v_volume, PyObject *__pyx_v_stop_price, PyObject *__pyx_v_contingent_condition, PyObject *__pyx_v_time_condition, PyObject *__pyx_v_offset_flags, PyObject *__pyx_v_hedge_flags, PyObject *__pyx_v_date, PyObject *__pyx_v_price, PyObject *__pyx_v_min_volume, PyObject *__pyx_v_volume_condition, PyObject *__pyx_v_force_close_reason, PyObject *__pyx_v_auto_suspend, PyObject *__pyx_v_user_force_close, PyObject *__pyx_v_max_ref, PyObject *__pyx_v_park); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_102insert_fok_order(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_iid, PyObject *__pyx_v_direction, PyObject *__pyx_v_volume, PyObject *__pyx_v_price, PyObject *__pyx_v_offset_flags, PyObject *__pyx_v_hedge_flags, PyObject *__pyx_v_force_close_reason, PyObject *__pyx_v_auto_suspend, PyObject *__pyx_v_user_force_close, PyObject *__pyx_v_max_ref, PyObject *__pyx_v_park); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_104insert_fak_order(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_iid, PyObject *__pyx_v_direction, PyObject *__pyx_v_volume, PyObject *__pyx_v_price, PyObject *__pyx_v_offset_flags, PyObject *__pyx_v_hedge_flags, PyObject *__pyx_v_min_volume, PyObject *__pyx_v_force_close_reason, PyObject *__pyx_v_auto_suspend, PyObject *__pyx_v_user_force_close, PyObject *__pyx_v_max_ref, PyObject *__pyx_v_park); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_106delete_order_by_ref(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_fid, PyObject *__pyx_v_sid, PyObject *__pyx_v_order_ref, PyObject *__pyx_v_max_ref, PyObject *__pyx_v_park); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_108delete_order_by_sysid(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_eid, PyObject *__pyx_v_order_sys_id, PyObject *__pyx_v_max_ref, PyObject *__pyx_v_park); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_110delete_park(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_pid); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_112delete_park_action(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_rpid); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_114query_instrument_margin_rate(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_iid, PyObject *__pyx_v_hedge_flag); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_116query_instrument_commission_rate(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_iid); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_118query_exchange_margin_rate(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_iid, PyObject *__pyx_v_hedge_flag); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_120query_exchange_margin_rate_adjust(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_iid, PyObject *__pyx_v_hedge_flag); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_122query_currency_rate(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_from_id, PyObject *__pyx_v_to_cid); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_124query_product_rate(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_pid); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_126query_product_group(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_pid, PyObject *__pyx_v_eid); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_128get_handler(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_130close(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self); /* proto */
static int __pyx_pf_8EnumBase_14__Pyx_EnumMeta___init__(struct __pyx_obj___Pyx_EnumMeta *__pyx_v_cls, PyObject *__pyx_v_name, PyObject *__pyx_v_parents, PyObject *__pyx_v_dct); /* proto */
static PyObject *__pyx_pf_8EnumBase_14__Pyx_EnumMeta_2__iter__(struct __pyx_obj___Pyx_EnumMeta *__pyx_v_cls); /* proto */
static PyObject *__pyx_pf_8EnumBase_14__Pyx_EnumMeta_4__getitem__(struct __pyx_obj___Pyx_EnumMeta *__pyx_v_cls, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_8EnumBase_14__Pyx_EnumBase___new__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cls, PyObject *__pyx_v_value, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_8EnumBase_14__Pyx_EnumBase_2__repr__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8EnumBase_14__Pyx_EnumBase_4__str__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_tp_new_3src_10ctp_trader_CtpTrader(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new___Pyx_EnumMeta(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_k__3;
static PyObject *__pyx_k__4;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_codeobj__6;
static PyObject *__pyx_codeobj__7;
static PyObject *__pyx_codeobj__9;
static PyObject *__pyx_codeobj__12;
static PyObject *__pyx_codeobj__14;

/* "src/ctp_trader.pyx":18
 * cb_pool = ThreadPool(processes=2)
 * 
 * cdef int td_callback(void *context, ctp_trader.TD_CALLBACK_TYPE t, void* data, int rid, int last) with gil:             # <<<<<<<<<<<<<<
 *     async_result = cb_pool.apply_async(async_callback, args=(<object>context, t, <object>data, rid, last))
 *     async_result.get()
 */

static int __pyx_f_3src_10ctp_trader_td_callback(void *__pyx_v_context, enum TD_CALLBACK_TYPE __pyx_v_t, void *__pyx_v_data, int __pyx_v_rid, int __pyx_v_last) {
  PyObject *__pyx_v_async_result = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("td_callback", 0);

  /* "src/ctp_trader.pyx":19
 * 
 * cdef int td_callback(void *context, ctp_trader.TD_CALLBACK_TYPE t, void* data, int rid, int last) with gil:
 *     async_result = cb_pool.apply_async(async_callback, args=(<object>context, t, <object>data, rid, last))             # <<<<<<<<<<<<<<
 *     async_result.get()
 *     return 0
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_cb_pool); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_apply_async); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_async_callback); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(__pyx_v_t); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_rid); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_last); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyTuple_New(5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(((PyObject *)__pyx_v_context));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_context));
  PyTuple_SET_ITEM(__pyx_t_7, 0, ((PyObject *)__pyx_v_context));
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_4);
  __Pyx_INCREF(((PyObject *)__pyx_v_data));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_data));
  PyTuple_SET_ITEM(__pyx_t_7, 2, ((PyObject *)__pyx_v_data));
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_7, 3, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_7, 4, __pyx_t_6);
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_args, __pyx_t_7) < 0) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_async_result = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "src/ctp_trader.pyx":20
 * cdef int td_callback(void *context, ctp_trader.TD_CALLBACK_TYPE t, void* data, int rid, int last) with gil:
 *     async_result = cb_pool.apply_async(async_callback, args=(<object>context, t, <object>data, rid, last))
 *     async_result.get()             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_async_result, __pyx_n_s_get); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 20, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_7 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 20, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "src/ctp_trader.pyx":21
 *     async_result = cb_pool.apply_async(async_callback, args=(<object>context, t, <object>data, rid, last))
 *     async_result.get()
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * def async_callback(context, t, data, rid, last):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":18
 * cb_pool = ThreadPool(processes=2)
 * 
 * cdef int td_callback(void *context, ctp_trader.TD_CALLBACK_TYPE t, void* data, int rid, int last) with gil:             # <<<<<<<<<<<<<<
 *     async_result = cb_pool.apply_async(async_callback, args=(<object>context, t, <object>data, rid, last))
 *     async_result.get()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_WriteUnraisable("src.ctp_trader.td_callback", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_async_result);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "src/ctp_trader.pyx":23
 *     return 0
 * 
 * def async_callback(context, t, data, rid, last):             # <<<<<<<<<<<<<<
 *     #print '', current_thread().ident, t, 'pycallback'
 *     context.get_handler().route(t, data, rid, last)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_1async_callback(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_3src_10ctp_trader_1async_callback = {"async_callback", (PyCFunction)__pyx_pw_3src_10ctp_trader_1async_callback, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_3src_10ctp_trader_1async_callback(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_context = 0;
  PyObject *__pyx_v_t = 0;
  PyObject *__pyx_v_data = 0;
  PyObject *__pyx_v_rid = 0;
  PyObject *__pyx_v_last = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("async_callback (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_context,&__pyx_n_s_t,&__pyx_n_s_data,&__pyx_n_s_rid,&__pyx_n_s_last,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_context)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("async_callback", 1, 5, 5, 1); __PYX_ERR(0, 23, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_data)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("async_callback", 1, 5, 5, 2); __PYX_ERR(0, 23, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("async_callback", 1, 5, 5, 3); __PYX_ERR(0, 23, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_last)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("async_callback", 1, 5, 5, 4); __PYX_ERR(0, 23, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "async_callback") < 0)) __PYX_ERR(0, 23, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_context = values[0];
    __pyx_v_t = values[1];
    __pyx_v_data = values[2];
    __pyx_v_rid = values[3];
    __pyx_v_last = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("async_callback", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 23, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("src.ctp_trader.async_callback", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3src_10ctp_trader_async_callback(__pyx_self, __pyx_v_context, __pyx_v_t, __pyx_v_data, __pyx_v_rid, __pyx_v_last);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_async_callback(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_context, PyObject *__pyx_v_t, PyObject *__pyx_v_data, PyObject *__pyx_v_rid, PyObject *__pyx_v_last) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("async_callback", 0);

  /* "src/ctp_trader.pyx":25
 * def async_callback(context, t, data, rid, last):
 *     #print '', current_thread().ident, t, 'pycallback'
 *     context.get_handler().route(t, data, rid, last)             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_context, __pyx_n_s_get_handler); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 25, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 25, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_route); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[5] = {__pyx_t_2, __pyx_v_t, __pyx_v_data, __pyx_v_rid, __pyx_v_last};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 4+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 25, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[5] = {__pyx_t_2, __pyx_v_t, __pyx_v_data, __pyx_v_rid, __pyx_v_last};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 4+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 25, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_4 = PyTuple_New(4+__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 25, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_t);
    __Pyx_GIVEREF(__pyx_v_t);
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_5, __pyx_v_t);
    __Pyx_INCREF(__pyx_v_data);
    __Pyx_GIVEREF(__pyx_v_data);
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_5, __pyx_v_data);
    __Pyx_INCREF(__pyx_v_rid);
    __Pyx_GIVEREF(__pyx_v_rid);
    PyTuple_SET_ITEM(__pyx_t_4, 2+__pyx_t_5, __pyx_v_rid);
    __Pyx_INCREF(__pyx_v_last);
    __Pyx_GIVEREF(__pyx_v_last);
    PyTuple_SET_ITEM(__pyx_t_4, 3+__pyx_t_5, __pyx_v_last);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 25, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/ctp_trader.pyx":26
 *     #print '', current_thread().ident, t, 'pycallback'
 *     context.get_handler().route(t, data, rid, last)
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * cdef bytes as_str(data):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_int_0);
  __pyx_r = __pyx_int_0;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":23
 *     return 0
 * 
 * def async_callback(context, t, data, rid, last):             # <<<<<<<<<<<<<<
 *     #print '', current_thread().ident, t, 'pycallback'
 *     context.get_handler().route(t, data, rid, last)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("src.ctp_trader.async_callback", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":28
 *     return 0
 * 
 * cdef bytes as_str(data):             # <<<<<<<<<<<<<<
 *     if isinstance(data, bytes):
 *         return data
 */

static PyObject *__pyx_f_3src_10ctp_trader_as_str(PyObject *__pyx_v_data) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("as_str", 0);

  /* "src/ctp_trader.pyx":29
 * 
 * cdef bytes as_str(data):
 *     if isinstance(data, bytes):             # <<<<<<<<<<<<<<
 *         return data
 *     elif isinstance(data, unicode):
 */
  __pyx_t_1 = PyBytes_Check(__pyx_v_data); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "src/ctp_trader.pyx":30
 * cdef bytes as_str(data):
 *     if isinstance(data, bytes):
 *         return data             # <<<<<<<<<<<<<<
 *     elif isinstance(data, unicode):
 *         return data.encode('utf8')
 */
    __Pyx_XDECREF(__pyx_r);
    if (!(likely(PyBytes_CheckExact(__pyx_v_data))||((__pyx_v_data) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_v_data)->tp_name), 0))) __PYX_ERR(0, 30, __pyx_L1_error)
    __Pyx_INCREF(__pyx_v_data);
    __pyx_r = ((PyObject*)__pyx_v_data);
    goto __pyx_L0;

    /* "src/ctp_trader.pyx":29
 * 
 * cdef bytes as_str(data):
 *     if isinstance(data, bytes):             # <<<<<<<<<<<<<<
 *         return data
 *     elif isinstance(data, unicode):
 */
  }

  /* "src/ctp_trader.pyx":31
 *     if isinstance(data, bytes):
 *         return data
 *     elif isinstance(data, unicode):             # <<<<<<<<<<<<<<
 *         return data.encode('utf8')
 *     raise TypeError('Cannot convert %s to string' % type(data))
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_data); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "src/ctp_trader.pyx":32
 *         return data
 *     elif isinstance(data, unicode):
 *         return data.encode('utf8')             # <<<<<<<<<<<<<<
 *     raise TypeError('Cannot convert %s to string' % type(data))
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_data, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 32, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 32, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(0, 32, __pyx_L1_error)
    __pyx_r = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "src/ctp_trader.pyx":31
 *     if isinstance(data, bytes):
 *         return data
 *     elif isinstance(data, unicode):             # <<<<<<<<<<<<<<
 *         return data.encode('utf8')
 *     raise TypeError('Cannot convert %s to string' % type(data))
 */
  }

  /* "src/ctp_trader.pyx":33
 *     elif isinstance(data, unicode):
 *         return data.encode('utf8')
 *     raise TypeError('Cannot convert %s to string' % type(data))             # <<<<<<<<<<<<<<
 * 
 * cdef char ** to_cstring_array(datas):
 */
  __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Cannot_convert_s_to_string, ((PyObject *)Py_TYPE(__pyx_v_data))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_4, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __PYX_ERR(0, 33, __pyx_L1_error)

  /* "src/ctp_trader.pyx":28
 *     return 0
 * 
 * cdef bytes as_str(data):             # <<<<<<<<<<<<<<
 *     if isinstance(data, bytes):
 *         return data
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("src.ctp_trader.as_str", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":35
 *     raise TypeError('Cannot convert %s to string' % type(data))
 * 
 * cdef char ** to_cstring_array(datas):             # <<<<<<<<<<<<<<
 *     cdef char **ret = <char **>malloc(len(datas)*sizeof(char *))
 *     for i in xrange(len(datas)):
 */

static char **__pyx_f_3src_10ctp_trader_to_cstring_array(PyObject *__pyx_v_datas) {
  char **__pyx_v_ret;
  Py_ssize_t __pyx_v_i;
  char **__pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  __Pyx_RefNannySetupContext("to_cstring_array", 0);

  /* "src/ctp_trader.pyx":36
 * 
 * cdef char ** to_cstring_array(datas):
 *     cdef char **ret = <char **>malloc(len(datas)*sizeof(char *))             # <<<<<<<<<<<<<<
 *     for i in xrange(len(datas)):
 *         ret[i] = strdup(datas[i])#PyString_AsString(datas[i])
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_datas); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 36, __pyx_L1_error)
  __pyx_v_ret = ((char **)malloc((__pyx_t_1 * (sizeof(char *)))));

  /* "src/ctp_trader.pyx":37
 * cdef char ** to_cstring_array(datas):
 *     cdef char **ret = <char **>malloc(len(datas)*sizeof(char *))
 *     for i in xrange(len(datas)):             # <<<<<<<<<<<<<<
 *         ret[i] = strdup(datas[i])#PyString_AsString(datas[i])
 *     return ret
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_datas); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 37, __pyx_L1_error)
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "src/ctp_trader.pyx":38
 *     cdef char **ret = <char **>malloc(len(datas)*sizeof(char *))
 *     for i in xrange(len(datas)):
 *         ret[i] = strdup(datas[i])#PyString_AsString(datas[i])             # <<<<<<<<<<<<<<
 *     return ret
 * 
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_datas, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 38, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 38, __pyx_L1_error)
    (__pyx_v_ret[__pyx_v_i]) = strdup(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }

  /* "src/ctp_trader.pyx":39
 *     for i in xrange(len(datas)):
 *         ret[i] = strdup(datas[i])#PyString_AsString(datas[i])
 *     return ret             # <<<<<<<<<<<<<<
 * 
 * cdef class CtpTrader:
 */
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":35
 *     raise TypeError('Cannot convert %s to string' % type(data))
 * 
 * cdef char ** to_cstring_array(datas):             # <<<<<<<<<<<<<<
 *     cdef char **ret = <char **>malloc(len(datas)*sizeof(char *))
 *     for i in xrange(len(datas)):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("src.ctp_trader.to_cstring_array", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":43
 * cdef class CtpTrader:
 *     cdef ctp_trader.CTraderCollector *collector
 *     def __cinit__(self, flowPath=".\\flow\\td\\", *args, **kwargs):             # <<<<<<<<<<<<<<
 *         self.collector = new ctp_trader.CTraderCollector(as_str(flowPath if flowPath else ""))
 *     def __dealloc__(self):
 */

/* Python wrapper */
static int __pyx_pw_3src_10ctp_trader_9CtpTrader_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_3src_10ctp_trader_9CtpTrader_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_flowPath = 0;
  CYTHON_UNUSED PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_flowPath,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_kp_s_flow_td);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flowPath);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 43, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
      }
    }
    __pyx_v_flowPath = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader___cinit__(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self), __pyx_v_flowPath, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3src_10ctp_trader_9CtpTrader___cinit__(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_flowPath, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "src/ctp_trader.pyx":44
 *     cdef ctp_trader.CTraderCollector *collector
 *     def __cinit__(self, flowPath=".\\flow\\td\\", *args, **kwargs):
 *         self.collector = new ctp_trader.CTraderCollector(as_str(flowPath if flowPath else ""))             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         print 'CtpTrader dealloc'
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_flowPath); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 44, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_flowPath);
    __pyx_t_1 = __pyx_v_flowPath;
  } else {
    __Pyx_INCREF(__pyx_kp_s__2);
    __pyx_t_1 = __pyx_kp_s__2;
  }
  __pyx_t_3 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 44, __pyx_L1_error)
  __pyx_v_self->collector = new CTraderCollector(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/ctp_trader.pyx":43
 * cdef class CtpTrader:
 *     cdef ctp_trader.CTraderCollector *collector
 *     def __cinit__(self, flowPath=".\\flow\\td\\", *args, **kwargs):             # <<<<<<<<<<<<<<
 *         self.collector = new ctp_trader.CTraderCollector(as_str(flowPath if flowPath else ""))
 *     def __dealloc__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":45
 *     def __cinit__(self, flowPath=".\\flow\\td\\", *args, **kwargs):
 *         self.collector = new ctp_trader.CTraderCollector(as_str(flowPath if flowPath else ""))
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         print 'CtpTrader dealloc'
 *         if self.collector is not NULL: del self.collector
 */

/* Python wrapper */
static void __pyx_pw_3src_10ctp_trader_9CtpTrader_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_3src_10ctp_trader_9CtpTrader_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_3src_10ctp_trader_9CtpTrader_2__dealloc__(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_3src_10ctp_trader_9CtpTrader_2__dealloc__(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "src/ctp_trader.pyx":46
 *         self.collector = new ctp_trader.CTraderCollector(as_str(flowPath if flowPath else ""))
 *     def __dealloc__(self):
 *         print 'CtpTrader dealloc'             # <<<<<<<<<<<<<<
 *         if self.collector is not NULL: del self.collector
 *     @staticmethod
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_CtpTrader_dealloc) < 0) __PYX_ERR(0, 46, __pyx_L1_error)

  /* "src/ctp_trader.pyx":47
 *     def __dealloc__(self):
 *         print 'CtpTrader dealloc'
 *         if self.collector is not NULL: del self.collector             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     def version():
 */
  __pyx_t_1 = ((__pyx_v_self->collector != NULL) != 0);
  if (__pyx_t_1) {
    delete __pyx_v_self->collector;
  }

  /* "src/ctp_trader.pyx":45
 *     def __cinit__(self, flowPath=".\\flow\\td\\", *args, **kwargs):
 *         self.collector = new ctp_trader.CTraderCollector(as_str(flowPath if flowPath else ""))
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         print 'CtpTrader dealloc'
 *         if self.collector is not NULL: del self.collector
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("src.ctp_trader.CtpTrader.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "src/ctp_trader.pyx":49
 *         if self.collector is not NULL: del self.collector
 *     @staticmethod
 *     def version():             # <<<<<<<<<<<<<<
 *         return ctp_trader.CTraderCollector.Version()
 *     def connect(self, frontPaths, privateResume=ctp_trader.THOST_TERT_QUICK, publicResume=ctp_trader.THOST_TERT_RESTART):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_5version(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_3src_10ctp_trader_9CtpTrader_5version = {"version", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_5version, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_5version(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("version (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("version", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "version", 0))) return NULL;
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_4version();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_4version() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("version", 0);

  /* "src/ctp_trader.pyx":50
 *     @staticmethod
 *     def version():
 *         return ctp_trader.CTraderCollector.Version()             # <<<<<<<<<<<<<<
 *     def connect(self, frontPaths, privateResume=ctp_trader.THOST_TERT_QUICK, publicResume=ctp_trader.THOST_TERT_RESTART):
 *         self.collector.RegisterCb(<void*>self, td_callback)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromString(CTraderCollector::Version()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":49
 *         if self.collector is not NULL: del self.collector
 *     @staticmethod
 *     def version():             # <<<<<<<<<<<<<<
 *         return ctp_trader.CTraderCollector.Version()
 *     def connect(self, frontPaths, privateResume=ctp_trader.THOST_TERT_QUICK, publicResume=ctp_trader.THOST_TERT_RESTART):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.version", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":51
 *     def version():
 *         return ctp_trader.CTraderCollector.Version()
 *     def connect(self, frontPaths, privateResume=ctp_trader.THOST_TERT_QUICK, publicResume=ctp_trader.THOST_TERT_RESTART):             # <<<<<<<<<<<<<<
 *         self.collector.RegisterCb(<void*>self, td_callback)
 *         ids = to_cstring_array(frontPaths)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_7connect(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_7connect(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_frontPaths = 0;
  PyObject *__pyx_v_privateResume = 0;
  PyObject *__pyx_v_publicResume = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("connect (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_frontPaths,&__pyx_n_s_privateResume,&__pyx_n_s_publicResume,0};
    PyObject* values[3] = {0,0,0};
    values[1] = __pyx_k__3;
    values[2] = __pyx_k__4;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_frontPaths)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_privateResume);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_publicResume);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "connect") < 0)) __PYX_ERR(0, 51, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_frontPaths = values[0];
    __pyx_v_privateResume = values[1];
    __pyx_v_publicResume = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("connect", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 51, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.connect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_6connect(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self), __pyx_v_frontPaths, __pyx_v_privateResume, __pyx_v_publicResume);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_6connect(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_frontPaths, PyObject *__pyx_v_privateResume, PyObject *__pyx_v_publicResume) {
  char **__pyx_v_ids;
  int __pyx_v_ret;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  enum THOST_TE_RESUME_TYPE __pyx_t_2;
  enum THOST_TE_RESUME_TYPE __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("connect", 0);

  /* "src/ctp_trader.pyx":52
 *         return ctp_trader.CTraderCollector.Version()
 *     def connect(self, frontPaths, privateResume=ctp_trader.THOST_TERT_QUICK, publicResume=ctp_trader.THOST_TERT_RESTART):
 *         self.collector.RegisterCb(<void*>self, td_callback)             # <<<<<<<<<<<<<<
 *         ids = to_cstring_array(frontPaths)
 *         ret = self.collector.Connect(ids, len(frontPaths), privateResume, publicResume)
 */
  __pyx_v_self->collector->RegisterCb(((void *)__pyx_v_self), __pyx_f_3src_10ctp_trader_td_callback);

  /* "src/ctp_trader.pyx":53
 *     def connect(self, frontPaths, privateResume=ctp_trader.THOST_TERT_QUICK, publicResume=ctp_trader.THOST_TERT_RESTART):
 *         self.collector.RegisterCb(<void*>self, td_callback)
 *         ids = to_cstring_array(frontPaths)             # <<<<<<<<<<<<<<
 *         ret = self.collector.Connect(ids, len(frontPaths), privateResume, publicResume)
 *         free(ids)
 */
  __pyx_v_ids = __pyx_f_3src_10ctp_trader_to_cstring_array(__pyx_v_frontPaths);

  /* "src/ctp_trader.pyx":54
 *         self.collector.RegisterCb(<void*>self, td_callback)
 *         ids = to_cstring_array(frontPaths)
 *         ret = self.collector.Connect(ids, len(frontPaths), privateResume, publicResume)             # <<<<<<<<<<<<<<
 *         free(ids)
 *         return ret
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_frontPaths); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 54, __pyx_L1_error)
  __pyx_t_2 = ((enum THOST_TE_RESUME_TYPE)__Pyx_PyInt_As_enum__THOST_TE_RESUME_TYPE(__pyx_v_privateResume)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 54, __pyx_L1_error)
  __pyx_t_3 = ((enum THOST_TE_RESUME_TYPE)__Pyx_PyInt_As_enum__THOST_TE_RESUME_TYPE(__pyx_v_publicResume)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 54, __pyx_L1_error)
  __pyx_v_ret = __pyx_v_self->collector->Connect(__pyx_v_ids, __pyx_t_1, __pyx_t_2, __pyx_t_3);

  /* "src/ctp_trader.pyx":55
 *         ids = to_cstring_array(frontPaths)
 *         ret = self.collector.Connect(ids, len(frontPaths), privateResume, publicResume)
 *         free(ids)             # <<<<<<<<<<<<<<
 *         return ret
 *     def auth(self):
 */
  free(__pyx_v_ids);

  /* "src/ctp_trader.pyx":56
 *         ret = self.collector.Connect(ids, len(frontPaths), privateResume, publicResume)
 *         free(ids)
 *         return ret             # <<<<<<<<<<<<<<
 *     def auth(self):
 *         if self.product and self.authcode:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_ret); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":51
 *     def version():
 *         return ctp_trader.CTraderCollector.Version()
 *     def connect(self, frontPaths, privateResume=ctp_trader.THOST_TERT_QUICK, publicResume=ctp_trader.THOST_TERT_RESTART):             # <<<<<<<<<<<<<<
 *         self.collector.RegisterCb(<void*>self, td_callback)
 *         ids = to_cstring_array(frontPaths)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.connect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":57
 *         free(ids)
 *         return ret
 *     def auth(self):             # <<<<<<<<<<<<<<
 *         if self.product and self.authcode:
 *             return self.collector.Auth(as_str(self.broker), as_str(self.user), as_str(self.product), as_str(self.authcode))
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_9auth(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_9auth(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("auth (wrapper)", 0);
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_8auth(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_8auth(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  char const *__pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  char const *__pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  char const *__pyx_t_11;
  __Pyx_RefNannySetupContext("auth", 0);

  /* "src/ctp_trader.pyx":58
 *         return ret
 *     def auth(self):
 *         if self.product and self.authcode:             # <<<<<<<<<<<<<<
 *             return self.collector.Auth(as_str(self.broker), as_str(self.user), as_str(self.product), as_str(self.authcode))
 *         else:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_product); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_authcode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "src/ctp_trader.pyx":59
 *     def auth(self):
 *         if self.product and self.authcode:
 *             return self.collector.Auth(as_str(self.broker), as_str(self.user), as_str(self.product), as_str(self.authcode))             # <<<<<<<<<<<<<<
 *         else:
 *             return self.login()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_broker); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 59, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 59, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_5 = __Pyx_PyObject_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 59, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_user); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 59, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 59, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_7 = __Pyx_PyObject_AsString(__pyx_t_6); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(0, 59, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_product); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 59, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 59, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_9 = __Pyx_PyObject_AsString(__pyx_t_8); if (unlikely((!__pyx_t_9) && PyErr_Occurred())) __PYX_ERR(0, 59, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_authcode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 59, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_10 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 59, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_11 = __Pyx_PyObject_AsString(__pyx_t_10); if (unlikely((!__pyx_t_11) && PyErr_Occurred())) __PYX_ERR(0, 59, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->collector->Auth(__pyx_t_5, __pyx_t_7, __pyx_t_9, __pyx_t_11)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 59, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "src/ctp_trader.pyx":58
 *         return ret
 *     def auth(self):
 *         if self.product and self.authcode:             # <<<<<<<<<<<<<<
 *             return self.collector.Auth(as_str(self.broker), as_str(self.user), as_str(self.product), as_str(self.authcode))
 *         else:
 */
  }

  /* "src/ctp_trader.pyx":61
 *             return self.collector.Auth(as_str(self.broker), as_str(self.user), as_str(self.product), as_str(self.authcode))
 *         else:
 *             return self.login()             # <<<<<<<<<<<<<<
 *     def login(self, bbid='0000'):
 *         return self.collector.Login(as_str(self.broker), as_str(bbid if bbid else '0000'), as_str(self.user), as_str(self.pwd))
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_login); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_10);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_10, function);
      }
    }
    if (__pyx_t_8) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 61, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else {
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 61, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "src/ctp_trader.pyx":57
 *         free(ids)
 *         return ret
 *     def auth(self):             # <<<<<<<<<<<<<<
 *         if self.product and self.authcode:
 *             return self.collector.Auth(as_str(self.broker), as_str(self.user), as_str(self.product), as_str(self.authcode))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.auth", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":62
 *         else:
 *             return self.login()
 *     def login(self, bbid='0000'):             # <<<<<<<<<<<<<<
 *         return self.collector.Login(as_str(self.broker), as_str(bbid if bbid else '0000'), as_str(self.user), as_str(self.pwd))
 *     def logout(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_11login(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_11login(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_bbid = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("login (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_bbid,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_kp_s_0000);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bbid);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "login") < 0)) __PYX_ERR(0, 62, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_bbid = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("login", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 62, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.login", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_10login(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self), __pyx_v_bbid);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_10login(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_bbid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  char const *__pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  char const *__pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  char const *__pyx_t_10;
  __Pyx_RefNannySetupContext("login", 0);

  /* "src/ctp_trader.pyx":63
 *             return self.login()
 *     def login(self, bbid='0000'):
 *         return self.collector.Login(as_str(self.broker), as_str(bbid if bbid else '0000'), as_str(self.user), as_str(self.pwd))             # <<<<<<<<<<<<<<
 *     def logout(self):
 *         return self.collector.Logout()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_broker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 63, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_bbid); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 63, __pyx_L1_error)
  if (__pyx_t_4) {
    __Pyx_INCREF(__pyx_v_bbid);
    __pyx_t_1 = __pyx_v_bbid;
  } else {
    __Pyx_INCREF(__pyx_kp_s_0000);
    __pyx_t_1 = __pyx_kp_s_0000;
  }
  __pyx_t_5 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_AsString(__pyx_t_5); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 63, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_user); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_8 = __Pyx_PyObject_AsString(__pyx_t_7); if (unlikely((!__pyx_t_8) && PyErr_Occurred())) __PYX_ERR(0, 63, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_pwd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_10 = __Pyx_PyObject_AsString(__pyx_t_9); if (unlikely((!__pyx_t_10) && PyErr_Occurred())) __PYX_ERR(0, 63, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->collector->Login(__pyx_t_3, __pyx_t_6, __pyx_t_8, __pyx_t_10)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":62
 *         else:
 *             return self.login()
 *     def login(self, bbid='0000'):             # <<<<<<<<<<<<<<
 *         return self.collector.Login(as_str(self.broker), as_str(bbid if bbid else '0000'), as_str(self.user), as_str(self.pwd))
 *     def logout(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.login", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":64
 *     def login(self, bbid='0000'):
 *         return self.collector.Login(as_str(self.broker), as_str(bbid if bbid else '0000'), as_str(self.user), as_str(self.pwd))
 *     def logout(self):             # <<<<<<<<<<<<<<
 *         return self.collector.Logout()
 *     def get_trading_day(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_13logout(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_13logout(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("logout (wrapper)", 0);
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_12logout(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_12logout(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("logout", 0);

  /* "src/ctp_trader.pyx":65
 *         return self.collector.Login(as_str(self.broker), as_str(bbid if bbid else '0000'), as_str(self.user), as_str(self.pwd))
 *     def logout(self):
 *         return self.collector.Logout()             # <<<<<<<<<<<<<<
 *     def get_trading_day(self):
 *         return self.collector.GetTradingDay()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->collector->Logout()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":64
 *     def login(self, bbid='0000'):
 *         return self.collector.Login(as_str(self.broker), as_str(bbid if bbid else '0000'), as_str(self.user), as_str(self.pwd))
 *     def logout(self):             # <<<<<<<<<<<<<<
 *         return self.collector.Logout()
 *     def get_trading_day(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.logout", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":66
 *     def logout(self):
 *         return self.collector.Logout()
 *     def get_trading_day(self):             # <<<<<<<<<<<<<<
 *         return self.collector.GetTradingDay()
 *     def change_user_pwd(self, opwd, npwd):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_15get_trading_day(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_15get_trading_day(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_trading_day (wrapper)", 0);
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_14get_trading_day(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_14get_trading_day(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_trading_day", 0);

  /* "src/ctp_trader.pyx":67
 *         return self.collector.Logout()
 *     def get_trading_day(self):
 *         return self.collector.GetTradingDay()             # <<<<<<<<<<<<<<
 *     def change_user_pwd(self, opwd, npwd):
 *         return self.collector.ChangeUserPwd(as_str(opwd if opwd else ""), as_str(npwd if npwd else ""))
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->collector->GetTradingDay()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":66
 *     def logout(self):
 *         return self.collector.Logout()
 *     def get_trading_day(self):             # <<<<<<<<<<<<<<
 *         return self.collector.GetTradingDay()
 *     def change_user_pwd(self, opwd, npwd):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.get_trading_day", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":68
 *     def get_trading_day(self):
 *         return self.collector.GetTradingDay()
 *     def change_user_pwd(self, opwd, npwd):             # <<<<<<<<<<<<<<
 *         return self.collector.ChangeUserPwd(as_str(opwd if opwd else ""), as_str(npwd if npwd else ""))
 *     def change_trading_pwd(self, account, opwd, npwd, currency="CNY"):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_17change_user_pwd(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_17change_user_pwd(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_opwd = 0;
  PyObject *__pyx_v_npwd = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("change_user_pwd (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_opwd,&__pyx_n_s_npwd,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_opwd)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_npwd)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("change_user_pwd", 1, 2, 2, 1); __PYX_ERR(0, 68, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "change_user_pwd") < 0)) __PYX_ERR(0, 68, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_opwd = values[0];
    __pyx_v_npwd = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("change_user_pwd", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 68, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.change_user_pwd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_16change_user_pwd(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self), __pyx_v_opwd, __pyx_v_npwd);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_16change_user_pwd(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_opwd, PyObject *__pyx_v_npwd) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  char const *__pyx_t_6;
  __Pyx_RefNannySetupContext("change_user_pwd", 0);

  /* "src/ctp_trader.pyx":69
 *         return self.collector.GetTradingDay()
 *     def change_user_pwd(self, opwd, npwd):
 *         return self.collector.ChangeUserPwd(as_str(opwd if opwd else ""), as_str(npwd if npwd else ""))             # <<<<<<<<<<<<<<
 *     def change_trading_pwd(self, account, opwd, npwd, currency="CNY"):
 *         return self.collector.ChangeTradingPwd(as_str(opwd if opwd else ""), as_str(npwd if npwd else ""), as_str(currency if currency else ""))
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_opwd); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 69, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_opwd);
    __pyx_t_1 = __pyx_v_opwd;
  } else {
    __Pyx_INCREF(__pyx_kp_s__2);
    __pyx_t_1 = __pyx_kp_s__2;
  }
  __pyx_t_3 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 69, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_npwd); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 69, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_npwd);
    __pyx_t_1 = __pyx_v_npwd;
  } else {
    __Pyx_INCREF(__pyx_kp_s__2);
    __pyx_t_1 = __pyx_kp_s__2;
  }
  __pyx_t_5 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_AsString(__pyx_t_5); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 69, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->collector->ChangeUserPwd(__pyx_t_4, __pyx_t_6)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":68
 *     def get_trading_day(self):
 *         return self.collector.GetTradingDay()
 *     def change_user_pwd(self, opwd, npwd):             # <<<<<<<<<<<<<<
 *         return self.collector.ChangeUserPwd(as_str(opwd if opwd else ""), as_str(npwd if npwd else ""))
 *     def change_trading_pwd(self, account, opwd, npwd, currency="CNY"):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.change_user_pwd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":70
 *     def change_user_pwd(self, opwd, npwd):
 *         return self.collector.ChangeUserPwd(as_str(opwd if opwd else ""), as_str(npwd if npwd else ""))
 *     def change_trading_pwd(self, account, opwd, npwd, currency="CNY"):             # <<<<<<<<<<<<<<
 *         return self.collector.ChangeTradingPwd(as_str(opwd if opwd else ""), as_str(npwd if npwd else ""), as_str(currency if currency else ""))
 *     def query_settle_confirm(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_19change_trading_pwd(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_19change_trading_pwd(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_account = 0;
  PyObject *__pyx_v_opwd = 0;
  PyObject *__pyx_v_npwd = 0;
  PyObject *__pyx_v_currency = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("change_trading_pwd (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_account,&__pyx_n_s_opwd,&__pyx_n_s_npwd,&__pyx_n_s_currency,0};
    PyObject* values[4] = {0,0,0,0};
    values[3] = ((PyObject *)__pyx_n_s_CNY);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_account)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_opwd)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("change_trading_pwd", 0, 3, 4, 1); __PYX_ERR(0, 70, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_npwd)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("change_trading_pwd", 0, 3, 4, 2); __PYX_ERR(0, 70, __pyx_L3_error)
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_currency);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "change_trading_pwd") < 0)) __PYX_ERR(0, 70, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_account = values[0];
    __pyx_v_opwd = values[1];
    __pyx_v_npwd = values[2];
    __pyx_v_currency = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("change_trading_pwd", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 70, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.change_trading_pwd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_18change_trading_pwd(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self), __pyx_v_account, __pyx_v_opwd, __pyx_v_npwd, __pyx_v_currency);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_18change_trading_pwd(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_account, PyObject *__pyx_v_opwd, PyObject *__pyx_v_npwd, PyObject *__pyx_v_currency) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  char const *__pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  char const *__pyx_t_8;
  __Pyx_RefNannySetupContext("change_trading_pwd", 0);

  /* "src/ctp_trader.pyx":71
 *         return self.collector.ChangeUserPwd(as_str(opwd if opwd else ""), as_str(npwd if npwd else ""))
 *     def change_trading_pwd(self, account, opwd, npwd, currency="CNY"):
 *         return self.collector.ChangeTradingPwd(as_str(opwd if opwd else ""), as_str(npwd if npwd else ""), as_str(currency if currency else ""))             # <<<<<<<<<<<<<<
 *     def query_settle_confirm(self):
 *         return self.collector.QrySettleInfoConfirm()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_opwd); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 71, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_opwd);
    __pyx_t_1 = __pyx_v_opwd;
  } else {
    __Pyx_INCREF(__pyx_kp_s__2);
    __pyx_t_1 = __pyx_kp_s__2;
  }
  __pyx_t_3 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 71, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_npwd); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 71, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_npwd);
    __pyx_t_1 = __pyx_v_npwd;
  } else {
    __Pyx_INCREF(__pyx_kp_s__2);
    __pyx_t_1 = __pyx_kp_s__2;
  }
  __pyx_t_5 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_AsString(__pyx_t_5); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 71, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_currency); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 71, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_currency);
    __pyx_t_1 = __pyx_v_currency;
  } else {
    __Pyx_INCREF(__pyx_kp_s__2);
    __pyx_t_1 = __pyx_kp_s__2;
  }
  __pyx_t_7 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_8 = __Pyx_PyObject_AsString(__pyx_t_7); if (unlikely((!__pyx_t_8) && PyErr_Occurred())) __PYX_ERR(0, 71, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->collector->ChangeTradingPwd(__pyx_t_4, __pyx_t_6, __pyx_t_8)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":70
 *     def change_user_pwd(self, opwd, npwd):
 *         return self.collector.ChangeUserPwd(as_str(opwd if opwd else ""), as_str(npwd if npwd else ""))
 *     def change_trading_pwd(self, account, opwd, npwd, currency="CNY"):             # <<<<<<<<<<<<<<
 *         return self.collector.ChangeTradingPwd(as_str(opwd if opwd else ""), as_str(npwd if npwd else ""), as_str(currency if currency else ""))
 *     def query_settle_confirm(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.change_trading_pwd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":72
 *     def change_trading_pwd(self, account, opwd, npwd, currency="CNY"):
 *         return self.collector.ChangeTradingPwd(as_str(opwd if opwd else ""), as_str(npwd if npwd else ""), as_str(currency if currency else ""))
 *     def query_settle_confirm(self):             # <<<<<<<<<<<<<<
 *         return self.collector.QrySettleInfoConfirm()
 *     def query_settle(self, day=None):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_21query_settle_confirm(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_21query_settle_confirm(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("query_settle_confirm (wrapper)", 0);
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_20query_settle_confirm(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_20query_settle_confirm(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("query_settle_confirm", 0);

  /* "src/ctp_trader.pyx":73
 *         return self.collector.ChangeTradingPwd(as_str(opwd if opwd else ""), as_str(npwd if npwd else ""), as_str(currency if currency else ""))
 *     def query_settle_confirm(self):
 *         return self.collector.QrySettleInfoConfirm()             # <<<<<<<<<<<<<<
 *     def query_settle(self, day=None):
 *         return self.collector.QrySettleInfo(as_str(day if day else self.get_trading_day()))
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->collector->QrySettleInfoConfirm()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":72
 *     def change_trading_pwd(self, account, opwd, npwd, currency="CNY"):
 *         return self.collector.ChangeTradingPwd(as_str(opwd if opwd else ""), as_str(npwd if npwd else ""), as_str(currency if currency else ""))
 *     def query_settle_confirm(self):             # <<<<<<<<<<<<<<
 *         return self.collector.QrySettleInfoConfirm()
 *     def query_settle(self, day=None):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.query_settle_confirm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":74
 *     def query_settle_confirm(self):
 *         return self.collector.QrySettleInfoConfirm()
 *     def query_settle(self, day=None):             # <<<<<<<<<<<<<<
 *         return self.collector.QrySettleInfo(as_str(day if day else self.get_trading_day()))
 *     def confirm_settle(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_23query_settle(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_23query_settle(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_day = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("query_settle (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_day,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_day);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "query_settle") < 0)) __PYX_ERR(0, 74, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_day = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("query_settle", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 74, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.query_settle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_22query_settle(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self), __pyx_v_day);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_22query_settle(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_day) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char const *__pyx_t_6;
  __Pyx_RefNannySetupContext("query_settle", 0);

  /* "src/ctp_trader.pyx":75
 *         return self.collector.QrySettleInfoConfirm()
 *     def query_settle(self, day=None):
 *         return self.collector.QrySettleInfo(as_str(day if day else self.get_trading_day()))             # <<<<<<<<<<<<<<
 *     def confirm_settle(self):
 *         return self.collector.ConfirmSettleInfo()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_day); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 75, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_day);
    __pyx_t_1 = __pyx_v_day;
  } else {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_trading_day); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 75, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 75, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __pyx_t_3 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_AsString(__pyx_t_3); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 75, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->collector->QrySettleInfo(__pyx_t_6)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":74
 *     def query_settle_confirm(self):
 *         return self.collector.QrySettleInfoConfirm()
 *     def query_settle(self, day=None):             # <<<<<<<<<<<<<<
 *         return self.collector.QrySettleInfo(as_str(day if day else self.get_trading_day()))
 *     def confirm_settle(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.query_settle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":76
 *     def query_settle(self, day=None):
 *         return self.collector.QrySettleInfo(as_str(day if day else self.get_trading_day()))
 *     def confirm_settle(self):             # <<<<<<<<<<<<<<
 *         return self.collector.ConfirmSettleInfo()
 *     def query_notice(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_25confirm_settle(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_25confirm_settle(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("confirm_settle (wrapper)", 0);
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_24confirm_settle(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_24confirm_settle(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("confirm_settle", 0);

  /* "src/ctp_trader.pyx":77
 *         return self.collector.QrySettleInfo(as_str(day if day else self.get_trading_day()))
 *     def confirm_settle(self):
 *         return self.collector.ConfirmSettleInfo()             # <<<<<<<<<<<<<<
 *     def query_notice(self):
 *         return self.collector.QryNotice()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->collector->ConfirmSettleInfo()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":76
 *     def query_settle(self, day=None):
 *         return self.collector.QrySettleInfo(as_str(day if day else self.get_trading_day()))
 *     def confirm_settle(self):             # <<<<<<<<<<<<<<
 *         return self.collector.ConfirmSettleInfo()
 *     def query_notice(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.confirm_settle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":78
 *     def confirm_settle(self):
 *         return self.collector.ConfirmSettleInfo()
 *     def query_notice(self):             # <<<<<<<<<<<<<<
 *         return self.collector.QryNotice()
 *     def query_trading_notice(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_27query_notice(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_27query_notice(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("query_notice (wrapper)", 0);
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_26query_notice(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_26query_notice(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("query_notice", 0);

  /* "src/ctp_trader.pyx":79
 *         return self.collector.ConfirmSettleInfo()
 *     def query_notice(self):
 *         return self.collector.QryNotice()             # <<<<<<<<<<<<<<
 *     def query_trading_notice(self):
 *         return self.collector.QryTradingNotice()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->collector->QryNotice()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":78
 *     def confirm_settle(self):
 *         return self.collector.ConfirmSettleInfo()
 *     def query_notice(self):             # <<<<<<<<<<<<<<
 *         return self.collector.QryNotice()
 *     def query_trading_notice(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.query_notice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":80
 *     def query_notice(self):
 *         return self.collector.QryNotice()
 *     def query_trading_notice(self):             # <<<<<<<<<<<<<<
 *         return self.collector.QryTradingNotice()
 *     def query_investor(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_29query_trading_notice(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_29query_trading_notice(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("query_trading_notice (wrapper)", 0);
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_28query_trading_notice(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_28query_trading_notice(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("query_trading_notice", 0);

  /* "src/ctp_trader.pyx":81
 *         return self.collector.QryNotice()
 *     def query_trading_notice(self):
 *         return self.collector.QryTradingNotice()             # <<<<<<<<<<<<<<
 *     def query_investor(self):
 *         return self.collector.QryInvestor()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->collector->QryTradingNotice()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":80
 *     def query_notice(self):
 *         return self.collector.QryNotice()
 *     def query_trading_notice(self):             # <<<<<<<<<<<<<<
 *         return self.collector.QryTradingNotice()
 *     def query_investor(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.query_trading_notice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":82
 *     def query_trading_notice(self):
 *         return self.collector.QryTradingNotice()
 *     def query_investor(self):             # <<<<<<<<<<<<<<
 *         return self.collector.QryInvestor()
 *     def query_exchange(self, eid=None): #CZCE/CFFEX/SHFE/DCE
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_31query_investor(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_31query_investor(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("query_investor (wrapper)", 0);
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_30query_investor(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_30query_investor(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("query_investor", 0);

  /* "src/ctp_trader.pyx":83
 *         return self.collector.QryTradingNotice()
 *     def query_investor(self):
 *         return self.collector.QryInvestor()             # <<<<<<<<<<<<<<
 *     def query_exchange(self, eid=None): #CZCE/CFFEX/SHFE/DCE
 *         return self.collector.QryExchange(as_str(eid if eid else ""))
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->collector->QryInvestor()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":82
 *     def query_trading_notice(self):
 *         return self.collector.QryTradingNotice()
 *     def query_investor(self):             # <<<<<<<<<<<<<<
 *         return self.collector.QryInvestor()
 *     def query_exchange(self, eid=None): #CZCE/CFFEX/SHFE/DCE
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.query_investor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":84
 *     def query_investor(self):
 *         return self.collector.QryInvestor()
 *     def query_exchange(self, eid=None): #CZCE/CFFEX/SHFE/DCE             # <<<<<<<<<<<<<<
 *         return self.collector.QryExchange(as_str(eid if eid else ""))
 *     def query_product(self, pid=None, pclass=None):  #p/SM/v/JR/WT/PM/cs/y/c/SF/CF/bb/T/RO/ZC/MA
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_33query_exchange(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_33query_exchange(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_eid = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("query_exchange (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_eid,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_eid);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "query_exchange") < 0)) __PYX_ERR(0, 84, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_eid = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("query_exchange", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 84, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.query_exchange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_32query_exchange(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self), __pyx_v_eid);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_32query_exchange(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_eid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  __Pyx_RefNannySetupContext("query_exchange", 0);

  /* "src/ctp_trader.pyx":85
 *         return self.collector.QryInvestor()
 *     def query_exchange(self, eid=None): #CZCE/CFFEX/SHFE/DCE
 *         return self.collector.QryExchange(as_str(eid if eid else ""))             # <<<<<<<<<<<<<<
 *     def query_product(self, pid=None, pclass=None):  #p/SM/v/JR/WT/PM/cs/y/c/SF/CF/bb/T/RO/ZC/MA
 *         return self.collector.QryProduct(as_str(pid if pid else ""), as_str(pclass if pclass else ""))
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_eid); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 85, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_eid);
    __pyx_t_1 = __pyx_v_eid;
  } else {
    __Pyx_INCREF(__pyx_kp_s__2);
    __pyx_t_1 = __pyx_kp_s__2;
  }
  __pyx_t_3 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 85, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 85, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->collector->QryExchange(__pyx_t_4)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 85, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":84
 *     def query_investor(self):
 *         return self.collector.QryInvestor()
 *     def query_exchange(self, eid=None): #CZCE/CFFEX/SHFE/DCE             # <<<<<<<<<<<<<<
 *         return self.collector.QryExchange(as_str(eid if eid else ""))
 *     def query_product(self, pid=None, pclass=None):  #p/SM/v/JR/WT/PM/cs/y/c/SF/CF/bb/T/RO/ZC/MA
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.query_exchange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":86
 *     def query_exchange(self, eid=None): #CZCE/CFFEX/SHFE/DCE
 *         return self.collector.QryExchange(as_str(eid if eid else ""))
 *     def query_product(self, pid=None, pclass=None):  #p/SM/v/JR/WT/PM/cs/y/c/SF/CF/bb/T/RO/ZC/MA             # <<<<<<<<<<<<<<
 *         return self.collector.QryProduct(as_str(pid if pid else ""), as_str(pclass if pclass else ""))
 *     def query_instrument(self, iid=None, eid=None, pid=None):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_35query_product(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_35query_product(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pid = 0;
  PyObject *__pyx_v_pclass = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("query_product (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pid,&__pyx_n_s_pclass,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pid);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pclass);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "query_product") < 0)) __PYX_ERR(0, 86, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_pid = values[0];
    __pyx_v_pclass = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("query_product", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 86, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.query_product", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_34query_product(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self), __pyx_v_pid, __pyx_v_pclass);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_34query_product(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_pid, PyObject *__pyx_v_pclass) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  char const *__pyx_t_6;
  __Pyx_RefNannySetupContext("query_product", 0);

  /* "src/ctp_trader.pyx":87
 *         return self.collector.QryExchange(as_str(eid if eid else ""))
 *     def query_product(self, pid=None, pclass=None):  #p/SM/v/JR/WT/PM/cs/y/c/SF/CF/bb/T/RO/ZC/MA
 *         return self.collector.QryProduct(as_str(pid if pid else ""), as_str(pclass if pclass else ""))             # <<<<<<<<<<<<<<
 *     def query_instrument(self, iid=None, eid=None, pid=None):
 *         return self.collector.QryInstrument(as_str(iid if iid else ""), as_str(eid if eid else ""), as_str(pid if pid else ""))
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_pid); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 87, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_pid);
    __pyx_t_1 = __pyx_v_pid;
  } else {
    __Pyx_INCREF(__pyx_kp_s__2);
    __pyx_t_1 = __pyx_kp_s__2;
  }
  __pyx_t_3 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 87, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_pclass); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 87, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_pclass);
    __pyx_t_1 = __pyx_v_pclass;
  } else {
    __Pyx_INCREF(__pyx_kp_s__2);
    __pyx_t_1 = __pyx_kp_s__2;
  }
  __pyx_t_5 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_AsString(__pyx_t_5); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 87, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->collector->QryProduct(__pyx_t_4, __pyx_t_6)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":86
 *     def query_exchange(self, eid=None): #CZCE/CFFEX/SHFE/DCE
 *         return self.collector.QryExchange(as_str(eid if eid else ""))
 *     def query_product(self, pid=None, pclass=None):  #p/SM/v/JR/WT/PM/cs/y/c/SF/CF/bb/T/RO/ZC/MA             # <<<<<<<<<<<<<<
 *         return self.collector.QryProduct(as_str(pid if pid else ""), as_str(pclass if pclass else ""))
 *     def query_instrument(self, iid=None, eid=None, pid=None):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.query_product", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":88
 *     def query_product(self, pid=None, pclass=None):  #p/SM/v/JR/WT/PM/cs/y/c/SF/CF/bb/T/RO/ZC/MA
 *         return self.collector.QryProduct(as_str(pid if pid else ""), as_str(pclass if pclass else ""))
 *     def query_instrument(self, iid=None, eid=None, pid=None):             # <<<<<<<<<<<<<<
 *         return self.collector.QryInstrument(as_str(iid if iid else ""), as_str(eid if eid else ""), as_str(pid if pid else ""))
 *     def query_instruments(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_37query_instrument(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_37query_instrument(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_iid = 0;
  PyObject *__pyx_v_eid = 0;
  PyObject *__pyx_v_pid = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("query_instrument (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_iid,&__pyx_n_s_eid,&__pyx_n_s_pid,0};
    PyObject* values[3] = {0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_iid);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_eid);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pid);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "query_instrument") < 0)) __PYX_ERR(0, 88, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_iid = values[0];
    __pyx_v_eid = values[1];
    __pyx_v_pid = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("query_instrument", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 88, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.query_instrument", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_36query_instrument(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self), __pyx_v_iid, __pyx_v_eid, __pyx_v_pid);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_36query_instrument(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_iid, PyObject *__pyx_v_eid, PyObject *__pyx_v_pid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  char const *__pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  char const *__pyx_t_8;
  __Pyx_RefNannySetupContext("query_instrument", 0);

  /* "src/ctp_trader.pyx":89
 *         return self.collector.QryProduct(as_str(pid if pid else ""), as_str(pclass if pclass else ""))
 *     def query_instrument(self, iid=None, eid=None, pid=None):
 *         return self.collector.QryInstrument(as_str(iid if iid else ""), as_str(eid if eid else ""), as_str(pid if pid else ""))             # <<<<<<<<<<<<<<
 *     def query_instruments(self):
 *         self.all_instruments = []
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_iid); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 89, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_iid);
    __pyx_t_1 = __pyx_v_iid;
  } else {
    __Pyx_INCREF(__pyx_kp_s__2);
    __pyx_t_1 = __pyx_kp_s__2;
  }
  __pyx_t_3 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 89, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_eid); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 89, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_eid);
    __pyx_t_1 = __pyx_v_eid;
  } else {
    __Pyx_INCREF(__pyx_kp_s__2);
    __pyx_t_1 = __pyx_kp_s__2;
  }
  __pyx_t_5 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_AsString(__pyx_t_5); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 89, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_pid); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 89, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_pid);
    __pyx_t_1 = __pyx_v_pid;
  } else {
    __Pyx_INCREF(__pyx_kp_s__2);
    __pyx_t_1 = __pyx_kp_s__2;
  }
  __pyx_t_7 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_8 = __Pyx_PyObject_AsString(__pyx_t_7); if (unlikely((!__pyx_t_8) && PyErr_Occurred())) __PYX_ERR(0, 89, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->collector->QryInstrument(__pyx_t_4, __pyx_t_6, __pyx_t_8)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":88
 *     def query_product(self, pid=None, pclass=None):  #p/SM/v/JR/WT/PM/cs/y/c/SF/CF/bb/T/RO/ZC/MA
 *         return self.collector.QryProduct(as_str(pid if pid else ""), as_str(pclass if pclass else ""))
 *     def query_instrument(self, iid=None, eid=None, pid=None):             # <<<<<<<<<<<<<<
 *         return self.collector.QryInstrument(as_str(iid if iid else ""), as_str(eid if eid else ""), as_str(pid if pid else ""))
 *     def query_instruments(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.query_instrument", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":90
 *     def query_instrument(self, iid=None, eid=None, pid=None):
 *         return self.collector.QryInstrument(as_str(iid if iid else ""), as_str(eid if eid else ""), as_str(pid if pid else ""))
 *     def query_instruments(self):             # <<<<<<<<<<<<<<
 *         self.all_instruments = []
 *         return self.collector.ReqAllInstrument()
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_39query_instruments(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_39query_instruments(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("query_instruments (wrapper)", 0);
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_38query_instruments(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_38query_instruments(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("query_instruments", 0);

  /* "src/ctp_trader.pyx":91
 *         return self.collector.QryInstrument(as_str(iid if iid else ""), as_str(eid if eid else ""), as_str(pid if pid else ""))
 *     def query_instruments(self):
 *         self.all_instruments = []             # <<<<<<<<<<<<<<
 *         return self.collector.ReqAllInstrument()
 *     def add_instrument(self, instrument):
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_all_instruments, __pyx_t_1) < 0) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/ctp_trader.pyx":92
 *     def query_instruments(self):
 *         self.all_instruments = []
 *         return self.collector.ReqAllInstrument()             # <<<<<<<<<<<<<<
 *     def add_instrument(self, instrument):
 *         if instrument:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->collector->ReqAllInstrument()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":90
 *     def query_instrument(self, iid=None, eid=None, pid=None):
 *         return self.collector.QryInstrument(as_str(iid if iid else ""), as_str(eid if eid else ""), as_str(pid if pid else ""))
 *     def query_instruments(self):             # <<<<<<<<<<<<<<
 *         self.all_instruments = []
 *         return self.collector.ReqAllInstrument()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.query_instruments", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":93
 *         self.all_instruments = []
 *         return self.collector.ReqAllInstrument()
 *     def add_instrument(self, instrument):             # <<<<<<<<<<<<<<
 *         if instrument:
 *             find = False
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_41add_instrument(PyObject *__pyx_v_self, PyObject *__pyx_v_instrument); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_41add_instrument(PyObject *__pyx_v_self, PyObject *__pyx_v_instrument) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_instrument (wrapper)", 0);
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_40add_instrument(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self), ((PyObject *)__pyx_v_instrument));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_40add_instrument(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_instrument) {
  int __pyx_v_find;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_inst = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  __Pyx_RefNannySetupContext("add_instrument", 0);

  /* "src/ctp_trader.pyx":94
 *         return self.collector.ReqAllInstrument()
 *     def add_instrument(self, instrument):
 *         if instrument:             # <<<<<<<<<<<<<<
 *             find = False
 *             for i, inst in enumerate(self.all_instruments):
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_instrument); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 94, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "src/ctp_trader.pyx":95
 *     def add_instrument(self, instrument):
 *         if instrument:
 *             find = False             # <<<<<<<<<<<<<<
 *             for i, inst in enumerate(self.all_instruments):
 *                 if inst.InstrumentID == instrument.InstrumentID and inst.ExchangeID == instrument.ExchangeID:
 */
    __pyx_v_find = 0;

    /* "src/ctp_trader.pyx":96
 *         if instrument:
 *             find = False
 *             for i, inst in enumerate(self.all_instruments):             # <<<<<<<<<<<<<<
 *                 if inst.InstrumentID == instrument.InstrumentID and inst.ExchangeID == instrument.ExchangeID:
 *                     self.all_instruments[i] = instrument; find = True; break
 */
    __Pyx_INCREF(__pyx_int_0);
    __pyx_t_2 = __pyx_int_0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_all_instruments); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 96, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 96, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 96, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 96, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 96, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 96, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 96, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_6(__pyx_t_4);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 96, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_inst, __pyx_t_3);
      __pyx_t_3 = 0;
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
      __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 96, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2);
      __pyx_t_2 = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "src/ctp_trader.pyx":97
 *             find = False
 *             for i, inst in enumerate(self.all_instruments):
 *                 if inst.InstrumentID == instrument.InstrumentID and inst.ExchangeID == instrument.ExchangeID:             # <<<<<<<<<<<<<<
 *                     self.all_instruments[i] = instrument; find = True; break
 *             if not find: self.all_instruments.append(instrument)
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_inst, __pyx_n_s_InstrumentID); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 97, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_instrument, __pyx_n_s_InstrumentID); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 97, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyObject_RichCompare(__pyx_t_3, __pyx_t_7, Py_EQ); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 97, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 97, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (__pyx_t_9) {
      } else {
        __pyx_t_1 = __pyx_t_9;
        goto __pyx_L7_bool_binop_done;
      }
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_inst, __pyx_n_s_ExchangeID); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 97, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_instrument, __pyx_n_s_ExchangeID); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 97, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_3 = PyObject_RichCompare(__pyx_t_8, __pyx_t_7, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 97, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 97, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_1 = __pyx_t_9;
      __pyx_L7_bool_binop_done:;
      if (__pyx_t_1) {

        /* "src/ctp_trader.pyx":98
 *             for i, inst in enumerate(self.all_instruments):
 *                 if inst.InstrumentID == instrument.InstrumentID and inst.ExchangeID == instrument.ExchangeID:
 *                     self.all_instruments[i] = instrument; find = True; break             # <<<<<<<<<<<<<<
 *             if not find: self.all_instruments.append(instrument)
 *     def get_instruments(self):
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_all_instruments); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 98, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        if (unlikely(PyObject_SetItem(__pyx_t_3, __pyx_v_i, __pyx_v_instrument) < 0)) __PYX_ERR(0, 98, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_v_find = 1;
        goto __pyx_L5_break;

        /* "src/ctp_trader.pyx":97
 *             find = False
 *             for i, inst in enumerate(self.all_instruments):
 *                 if inst.InstrumentID == instrument.InstrumentID and inst.ExchangeID == instrument.ExchangeID:             # <<<<<<<<<<<<<<
 *                     self.all_instruments[i] = instrument; find = True; break
 *             if not find: self.all_instruments.append(instrument)
 */
      }

      /* "src/ctp_trader.pyx":96
 *         if instrument:
 *             find = False
 *             for i, inst in enumerate(self.all_instruments):             # <<<<<<<<<<<<<<
 *                 if inst.InstrumentID == instrument.InstrumentID and inst.ExchangeID == instrument.ExchangeID:
 *                     self.all_instruments[i] = instrument; find = True; break
 */
    }
    __pyx_L5_break:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "src/ctp_trader.pyx":99
 *                 if inst.InstrumentID == instrument.InstrumentID and inst.ExchangeID == instrument.ExchangeID:
 *                     self.all_instruments[i] = instrument; find = True; break
 *             if not find: self.all_instruments.append(instrument)             # <<<<<<<<<<<<<<
 *     def get_instruments(self):
 *         return self.all_instruments
 */
    __pyx_t_1 = ((!(__pyx_v_find != 0)) != 0);
    if (__pyx_t_1) {
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_all_instruments); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 99, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_10 = __Pyx_PyObject_Append(__pyx_t_2, __pyx_v_instrument); if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(0, 99, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }

    /* "src/ctp_trader.pyx":94
 *         return self.collector.ReqAllInstrument()
 *     def add_instrument(self, instrument):
 *         if instrument:             # <<<<<<<<<<<<<<
 *             find = False
 *             for i, inst in enumerate(self.all_instruments):
 */
  }

  /* "src/ctp_trader.pyx":93
 *         self.all_instruments = []
 *         return self.collector.ReqAllInstrument()
 *     def add_instrument(self, instrument):             # <<<<<<<<<<<<<<
 *         if instrument:
 *             find = False
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.add_instrument", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_inst);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":100
 *                     self.all_instruments[i] = instrument; find = True; break
 *             if not find: self.all_instruments.append(instrument)
 *     def get_instruments(self):             # <<<<<<<<<<<<<<
 *         return self.all_instruments
 *     def query_position(self, iid=None):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_43get_instruments(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_43get_instruments(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_instruments (wrapper)", 0);
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_42get_instruments(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_42get_instruments(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_instruments", 0);

  /* "src/ctp_trader.pyx":101
 *             if not find: self.all_instruments.append(instrument)
 *     def get_instruments(self):
 *         return self.all_instruments             # <<<<<<<<<<<<<<
 *     def query_position(self, iid=None):
 *         return self.collector.QryInvestorPos(as_str(iid if iid else ""))
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_all_instruments); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":100
 *                     self.all_instruments[i] = instrument; find = True; break
 *             if not find: self.all_instruments.append(instrument)
 *     def get_instruments(self):             # <<<<<<<<<<<<<<
 *         return self.all_instruments
 *     def query_position(self, iid=None):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.get_instruments", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":102
 *     def get_instruments(self):
 *         return self.all_instruments
 *     def query_position(self, iid=None):             # <<<<<<<<<<<<<<
 *         return self.collector.QryInvestorPos(as_str(iid if iid else ""))
 *     def query_position_detail(self, iid=None):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_45query_position(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_45query_position(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_iid = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("query_position (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_iid,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_iid);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "query_position") < 0)) __PYX_ERR(0, 102, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_iid = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("query_position", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 102, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.query_position", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_44query_position(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self), __pyx_v_iid);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_44query_position(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_iid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  __Pyx_RefNannySetupContext("query_position", 0);

  /* "src/ctp_trader.pyx":103
 *         return self.all_instruments
 *     def query_position(self, iid=None):
 *         return self.collector.QryInvestorPos(as_str(iid if iid else ""))             # <<<<<<<<<<<<<<
 *     def query_position_detail(self, iid=None):
 *         return self.collector.QryInvestorPosDetail(as_str(iid if iid else ""))
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_iid); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 103, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_iid);
    __pyx_t_1 = __pyx_v_iid;
  } else {
    __Pyx_INCREF(__pyx_kp_s__2);
    __pyx_t_1 = __pyx_kp_s__2;
  }
  __pyx_t_3 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 103, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->collector->QryInvestorPos(__pyx_t_4)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":102
 *     def get_instruments(self):
 *         return self.all_instruments
 *     def query_position(self, iid=None):             # <<<<<<<<<<<<<<
 *         return self.collector.QryInvestorPos(as_str(iid if iid else ""))
 *     def query_position_detail(self, iid=None):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.query_position", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":104
 *     def query_position(self, iid=None):
 *         return self.collector.QryInvestorPos(as_str(iid if iid else ""))
 *     def query_position_detail(self, iid=None):             # <<<<<<<<<<<<<<
 *         return self.collector.QryInvestorPosDetail(as_str(iid if iid else ""))
 *     def query_position_comb_detail(self, ciid=None):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_47query_position_detail(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_47query_position_detail(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_iid = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("query_position_detail (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_iid,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_iid);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "query_position_detail") < 0)) __PYX_ERR(0, 104, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_iid = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("query_position_detail", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 104, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.query_position_detail", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_46query_position_detail(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self), __pyx_v_iid);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_46query_position_detail(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_iid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  __Pyx_RefNannySetupContext("query_position_detail", 0);

  /* "src/ctp_trader.pyx":105
 *         return self.collector.QryInvestorPos(as_str(iid if iid else ""))
 *     def query_position_detail(self, iid=None):
 *         return self.collector.QryInvestorPosDetail(as_str(iid if iid else ""))             # <<<<<<<<<<<<<<
 *     def query_position_comb_detail(self, ciid=None):
 *         return self.collector.QryInvestorPosCombDetail(as_str(ciid if ciid else ""))
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_iid); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 105, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_iid);
    __pyx_t_1 = __pyx_v_iid;
  } else {
    __Pyx_INCREF(__pyx_kp_s__2);
    __pyx_t_1 = __pyx_kp_s__2;
  }
  __pyx_t_3 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 105, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->collector->QryInvestorPosDetail(__pyx_t_4)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":104
 *     def query_position(self, iid=None):
 *         return self.collector.QryInvestorPos(as_str(iid if iid else ""))
 *     def query_position_detail(self, iid=None):             # <<<<<<<<<<<<<<
 *         return self.collector.QryInvestorPosDetail(as_str(iid if iid else ""))
 *     def query_position_comb_detail(self, ciid=None):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.query_position_detail", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":106
 *     def query_position_detail(self, iid=None):
 *         return self.collector.QryInvestorPosDetail(as_str(iid if iid else ""))
 *     def query_position_comb_detail(self, ciid=None):             # <<<<<<<<<<<<<<
 *         return self.collector.QryInvestorPosCombDetail(as_str(ciid if ciid else ""))
 *     def query_park_order(self, iid=None, eid=None):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_49query_position_comb_detail(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_49query_position_comb_detail(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ciid = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("query_position_comb_detail (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ciid,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ciid);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "query_position_comb_detail") < 0)) __PYX_ERR(0, 106, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_ciid = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("query_position_comb_detail", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 106, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.query_position_comb_detail", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_48query_position_comb_detail(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self), __pyx_v_ciid);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_48query_position_comb_detail(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_ciid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  __Pyx_RefNannySetupContext("query_position_comb_detail", 0);

  /* "src/ctp_trader.pyx":107
 *         return self.collector.QryInvestorPosDetail(as_str(iid if iid else ""))
 *     def query_position_comb_detail(self, ciid=None):
 *         return self.collector.QryInvestorPosCombDetail(as_str(ciid if ciid else ""))             # <<<<<<<<<<<<<<
 *     def query_park_order(self, iid=None, eid=None):
 *         return self.collector.QryParkOrder(as_str(iid if iid else ""), as_str(eid if eid else ""))
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_ciid); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 107, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_ciid);
    __pyx_t_1 = __pyx_v_ciid;
  } else {
    __Pyx_INCREF(__pyx_kp_s__2);
    __pyx_t_1 = __pyx_kp_s__2;
  }
  __pyx_t_3 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 107, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->collector->QryInvestorPosCombDetail(__pyx_t_4)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":106
 *     def query_position_detail(self, iid=None):
 *         return self.collector.QryInvestorPosDetail(as_str(iid if iid else ""))
 *     def query_position_comb_detail(self, ciid=None):             # <<<<<<<<<<<<<<
 *         return self.collector.QryInvestorPosCombDetail(as_str(ciid if ciid else ""))
 *     def query_park_order(self, iid=None, eid=None):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.query_position_comb_detail", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":108
 *     def query_position_comb_detail(self, ciid=None):
 *         return self.collector.QryInvestorPosCombDetail(as_str(ciid if ciid else ""))
 *     def query_park_order(self, iid=None, eid=None):             # <<<<<<<<<<<<<<
 *         return self.collector.QryParkOrder(as_str(iid if iid else ""), as_str(eid if eid else ""))
 *     def query_park_order_action(self, iid=None, eid=None):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_51query_park_order(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_51query_park_order(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_iid = 0;
  PyObject *__pyx_v_eid = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("query_park_order (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_iid,&__pyx_n_s_eid,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_iid);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_eid);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "query_park_order") < 0)) __PYX_ERR(0, 108, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_iid = values[0];
    __pyx_v_eid = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("query_park_order", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 108, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.query_park_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_50query_park_order(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self), __pyx_v_iid, __pyx_v_eid);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_50query_park_order(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_iid, PyObject *__pyx_v_eid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  char const *__pyx_t_6;
  __Pyx_RefNannySetupContext("query_park_order", 0);

  /* "src/ctp_trader.pyx":109
 *         return self.collector.QryInvestorPosCombDetail(as_str(ciid if ciid else ""))
 *     def query_park_order(self, iid=None, eid=None):
 *         return self.collector.QryParkOrder(as_str(iid if iid else ""), as_str(eid if eid else ""))             # <<<<<<<<<<<<<<
 *     def query_park_order_action(self, iid=None, eid=None):
 *         return self.collector.QryParkOrderAction(as_str(iid if iid else ""), as_str(eid if eid else ""))
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_iid); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 109, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_iid);
    __pyx_t_1 = __pyx_v_iid;
  } else {
    __Pyx_INCREF(__pyx_kp_s__2);
    __pyx_t_1 = __pyx_kp_s__2;
  }
  __pyx_t_3 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 109, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_eid); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 109, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_eid);
    __pyx_t_1 = __pyx_v_eid;
  } else {
    __Pyx_INCREF(__pyx_kp_s__2);
    __pyx_t_1 = __pyx_kp_s__2;
  }
  __pyx_t_5 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_AsString(__pyx_t_5); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 109, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->collector->QryParkOrder(__pyx_t_4, __pyx_t_6)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":108
 *     def query_position_comb_detail(self, ciid=None):
 *         return self.collector.QryInvestorPosCombDetail(as_str(ciid if ciid else ""))
 *     def query_park_order(self, iid=None, eid=None):             # <<<<<<<<<<<<<<
 *         return self.collector.QryParkOrder(as_str(iid if iid else ""), as_str(eid if eid else ""))
 *     def query_park_order_action(self, iid=None, eid=None):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.query_park_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":110
 *     def query_park_order(self, iid=None, eid=None):
 *         return self.collector.QryParkOrder(as_str(iid if iid else ""), as_str(eid if eid else ""))
 *     def query_park_order_action(self, iid=None, eid=None):             # <<<<<<<<<<<<<<
 *         return self.collector.QryParkOrderAction(as_str(iid if iid else ""), as_str(eid if eid else ""))
 *     def query_order(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_53query_park_order_action(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_53query_park_order_action(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_iid = 0;
  PyObject *__pyx_v_eid = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("query_park_order_action (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_iid,&__pyx_n_s_eid,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_iid);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_eid);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "query_park_order_action") < 0)) __PYX_ERR(0, 110, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_iid = values[0];
    __pyx_v_eid = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("query_park_order_action", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 110, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.query_park_order_action", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_52query_park_order_action(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self), __pyx_v_iid, __pyx_v_eid);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_52query_park_order_action(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_iid, PyObject *__pyx_v_eid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  char const *__pyx_t_6;
  __Pyx_RefNannySetupContext("query_park_order_action", 0);

  /* "src/ctp_trader.pyx":111
 *         return self.collector.QryParkOrder(as_str(iid if iid else ""), as_str(eid if eid else ""))
 *     def query_park_order_action(self, iid=None, eid=None):
 *         return self.collector.QryParkOrderAction(as_str(iid if iid else ""), as_str(eid if eid else ""))             # <<<<<<<<<<<<<<
 *     def query_order(self):
 *         return self.collector.QryOrder()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_iid); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 111, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_iid);
    __pyx_t_1 = __pyx_v_iid;
  } else {
    __Pyx_INCREF(__pyx_kp_s__2);
    __pyx_t_1 = __pyx_kp_s__2;
  }
  __pyx_t_3 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 111, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_eid); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 111, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_eid);
    __pyx_t_1 = __pyx_v_eid;
  } else {
    __Pyx_INCREF(__pyx_kp_s__2);
    __pyx_t_1 = __pyx_kp_s__2;
  }
  __pyx_t_5 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_AsString(__pyx_t_5); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 111, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->collector->QryParkOrderAction(__pyx_t_4, __pyx_t_6)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":110
 *     def query_park_order(self, iid=None, eid=None):
 *         return self.collector.QryParkOrder(as_str(iid if iid else ""), as_str(eid if eid else ""))
 *     def query_park_order_action(self, iid=None, eid=None):             # <<<<<<<<<<<<<<
 *         return self.collector.QryParkOrderAction(as_str(iid if iid else ""), as_str(eid if eid else ""))
 *     def query_order(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.query_park_order_action", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":112
 *     def query_park_order_action(self, iid=None, eid=None):
 *         return self.collector.QryParkOrderAction(as_str(iid if iid else ""), as_str(eid if eid else ""))
 *     def query_order(self):             # <<<<<<<<<<<<<<
 *         return self.collector.QryOrder()
 *     def query_order_max_volume(self, iid=None):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_55query_order(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_55query_order(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("query_order (wrapper)", 0);
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_54query_order(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_54query_order(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("query_order", 0);

  /* "src/ctp_trader.pyx":113
 *         return self.collector.QryParkOrderAction(as_str(iid if iid else ""), as_str(eid if eid else ""))
 *     def query_order(self):
 *         return self.collector.QryOrder()             # <<<<<<<<<<<<<<
 *     def query_order_max_volume(self, iid=None):
 *         return self.collector.QryMaxOrderVolume(as_str(iid if iid else ""))
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->collector->QryOrder()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":112
 *     def query_park_order_action(self, iid=None, eid=None):
 *         return self.collector.QryParkOrderAction(as_str(iid if iid else ""), as_str(eid if eid else ""))
 *     def query_order(self):             # <<<<<<<<<<<<<<
 *         return self.collector.QryOrder()
 *     def query_order_max_volume(self, iid=None):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.query_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":114
 *     def query_order(self):
 *         return self.collector.QryOrder()
 *     def query_order_max_volume(self, iid=None):             # <<<<<<<<<<<<<<
 *         return self.collector.QryMaxOrderVolume(as_str(iid if iid else ""))
 *     def query_trade(self, iid=None, eid=None, tid=None):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_57query_order_max_volume(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_57query_order_max_volume(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_iid = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("query_order_max_volume (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_iid,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_iid);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "query_order_max_volume") < 0)) __PYX_ERR(0, 114, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_iid = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("query_order_max_volume", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 114, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.query_order_max_volume", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_56query_order_max_volume(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self), __pyx_v_iid);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_56query_order_max_volume(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_iid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  __Pyx_RefNannySetupContext("query_order_max_volume", 0);

  /* "src/ctp_trader.pyx":115
 *         return self.collector.QryOrder()
 *     def query_order_max_volume(self, iid=None):
 *         return self.collector.QryMaxOrderVolume(as_str(iid if iid else ""))             # <<<<<<<<<<<<<<
 *     def query_trade(self, iid=None, eid=None, tid=None):
 *         return self.collector.QryTrade(as_str(iid if iid else ""), as_str(eid if eid else ""), as_str(tid if tid else ""))
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_iid); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 115, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_iid);
    __pyx_t_1 = __pyx_v_iid;
  } else {
    __Pyx_INCREF(__pyx_kp_s__2);
    __pyx_t_1 = __pyx_kp_s__2;
  }
  __pyx_t_3 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 115, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->collector->QryMaxOrderVolume(__pyx_t_4)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":114
 *     def query_order(self):
 *         return self.collector.QryOrder()
 *     def query_order_max_volume(self, iid=None):             # <<<<<<<<<<<<<<
 *         return self.collector.QryMaxOrderVolume(as_str(iid if iid else ""))
 *     def query_trade(self, iid=None, eid=None, tid=None):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.query_order_max_volume", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":116
 *     def query_order_max_volume(self, iid=None):
 *         return self.collector.QryMaxOrderVolume(as_str(iid if iid else ""))
 *     def query_trade(self, iid=None, eid=None, tid=None):             # <<<<<<<<<<<<<<
 *         return self.collector.QryTrade(as_str(iid if iid else ""), as_str(eid if eid else ""), as_str(tid if tid else ""))
 *     def query_account_register(self, bid=None):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_59query_trade(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_59query_trade(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_iid = 0;
  PyObject *__pyx_v_eid = 0;
  PyObject *__pyx_v_tid = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("query_trade (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_iid,&__pyx_n_s_eid,&__pyx_n_s_tid,0};
    PyObject* values[3] = {0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_iid);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_eid);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_tid);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "query_trade") < 0)) __PYX_ERR(0, 116, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_iid = values[0];
    __pyx_v_eid = values[1];
    __pyx_v_tid = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("query_trade", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 116, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.query_trade", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_58query_trade(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self), __pyx_v_iid, __pyx_v_eid, __pyx_v_tid);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_58query_trade(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_iid, PyObject *__pyx_v_eid, PyObject *__pyx_v_tid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  char const *__pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  char const *__pyx_t_8;
  __Pyx_RefNannySetupContext("query_trade", 0);

  /* "src/ctp_trader.pyx":117
 *         return self.collector.QryMaxOrderVolume(as_str(iid if iid else ""))
 *     def query_trade(self, iid=None, eid=None, tid=None):
 *         return self.collector.QryTrade(as_str(iid if iid else ""), as_str(eid if eid else ""), as_str(tid if tid else ""))             # <<<<<<<<<<<<<<
 *     def query_account_register(self, bid=None):
 *         return self.collector.QryAccountRegister(as_str(bid if bid else ""))
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_iid); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 117, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_iid);
    __pyx_t_1 = __pyx_v_iid;
  } else {
    __Pyx_INCREF(__pyx_kp_s__2);
    __pyx_t_1 = __pyx_kp_s__2;
  }
  __pyx_t_3 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 117, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_eid); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 117, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_eid);
    __pyx_t_1 = __pyx_v_eid;
  } else {
    __Pyx_INCREF(__pyx_kp_s__2);
    __pyx_t_1 = __pyx_kp_s__2;
  }
  __pyx_t_5 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_AsString(__pyx_t_5); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 117, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_tid); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 117, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_tid);
    __pyx_t_1 = __pyx_v_tid;
  } else {
    __Pyx_INCREF(__pyx_kp_s__2);
    __pyx_t_1 = __pyx_kp_s__2;
  }
  __pyx_t_7 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_8 = __Pyx_PyObject_AsString(__pyx_t_7); if (unlikely((!__pyx_t_8) && PyErr_Occurred())) __PYX_ERR(0, 117, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->collector->QryTrade(__pyx_t_4, __pyx_t_6, __pyx_t_8)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":116
 *     def query_order_max_volume(self, iid=None):
 *         return self.collector.QryMaxOrderVolume(as_str(iid if iid else ""))
 *     def query_trade(self, iid=None, eid=None, tid=None):             # <<<<<<<<<<<<<<
 *         return self.collector.QryTrade(as_str(iid if iid else ""), as_str(eid if eid else ""), as_str(tid if tid else ""))
 *     def query_account_register(self, bid=None):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.query_trade", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":118
 *     def query_trade(self, iid=None, eid=None, tid=None):
 *         return self.collector.QryTrade(as_str(iid if iid else ""), as_str(eid if eid else ""), as_str(tid if tid else ""))
 *     def query_account_register(self, bid=None):             # <<<<<<<<<<<<<<
 *         return self.collector.QryAccountRegister(as_str(bid if bid else ""))
 *     def add_bank_account(self, account):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_61query_account_register(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_61query_account_register(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_bid = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("query_account_register (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_bid,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bid);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "query_account_register") < 0)) __PYX_ERR(0, 118, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_bid = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("query_account_register", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 118, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.query_account_register", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_60query_account_register(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self), __pyx_v_bid);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_60query_account_register(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_bid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  __Pyx_RefNannySetupContext("query_account_register", 0);

  /* "src/ctp_trader.pyx":119
 *         return self.collector.QryTrade(as_str(iid if iid else ""), as_str(eid if eid else ""), as_str(tid if tid else ""))
 *     def query_account_register(self, bid=None):
 *         return self.collector.QryAccountRegister(as_str(bid if bid else ""))             # <<<<<<<<<<<<<<
 *     def add_bank_account(self, account):
 *         if account:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_bid); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 119, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_bid);
    __pyx_t_1 = __pyx_v_bid;
  } else {
    __Pyx_INCREF(__pyx_kp_s__2);
    __pyx_t_1 = __pyx_kp_s__2;
  }
  __pyx_t_3 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 119, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->collector->QryAccountRegister(__pyx_t_4)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":118
 *     def query_trade(self, iid=None, eid=None, tid=None):
 *         return self.collector.QryTrade(as_str(iid if iid else ""), as_str(eid if eid else ""), as_str(tid if tid else ""))
 *     def query_account_register(self, bid=None):             # <<<<<<<<<<<<<<
 *         return self.collector.QryAccountRegister(as_str(bid if bid else ""))
 *     def add_bank_account(self, account):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.query_account_register", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":120
 *     def query_account_register(self, bid=None):
 *         return self.collector.QryAccountRegister(as_str(bid if bid else ""))
 *     def add_bank_account(self, account):             # <<<<<<<<<<<<<<
 *         if account:
 *             find = False
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_63add_bank_account(PyObject *__pyx_v_self, PyObject *__pyx_v_account); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_63add_bank_account(PyObject *__pyx_v_self, PyObject *__pyx_v_account) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_bank_account (wrapper)", 0);
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_62add_bank_account(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self), ((PyObject *)__pyx_v_account));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_62add_bank_account(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_account) {
  int __pyx_v_find;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_inst = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  __Pyx_RefNannySetupContext("add_bank_account", 0);

  /* "src/ctp_trader.pyx":121
 *         return self.collector.QryAccountRegister(as_str(bid if bid else ""))
 *     def add_bank_account(self, account):
 *         if account:             # <<<<<<<<<<<<<<
 *             find = False
 *             for i, inst in enumerate(self.all_bank_accounts):
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_account); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 121, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "src/ctp_trader.pyx":122
 *     def add_bank_account(self, account):
 *         if account:
 *             find = False             # <<<<<<<<<<<<<<
 *             for i, inst in enumerate(self.all_bank_accounts):
 *                 if inst.BankID == account.BankID and inst.BankBranchID == account.BankBranchID and inst.BrokerID == account.BrokerID and inst.BrokerBranchID == account.BrokerBranchID:
 */
    __pyx_v_find = 0;

    /* "src/ctp_trader.pyx":123
 *         if account:
 *             find = False
 *             for i, inst in enumerate(self.all_bank_accounts):             # <<<<<<<<<<<<<<
 *                 if inst.BankID == account.BankID and inst.BankBranchID == account.BankBranchID and inst.BrokerID == account.BrokerID and inst.BrokerBranchID == account.BrokerBranchID:
 *                     self.all_bank_accounts[i] = account; find = True; break
 */
    __Pyx_INCREF(__pyx_int_0);
    __pyx_t_2 = __pyx_int_0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_all_bank_accounts); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 123, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 123, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 123, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 123, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 123, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 123, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 123, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_6(__pyx_t_4);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 123, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_inst, __pyx_t_3);
      __pyx_t_3 = 0;
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
      __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 123, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2);
      __pyx_t_2 = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "src/ctp_trader.pyx":124
 *             find = False
 *             for i, inst in enumerate(self.all_bank_accounts):
 *                 if inst.BankID == account.BankID and inst.BankBranchID == account.BankBranchID and inst.BrokerID == account.BrokerID and inst.BrokerBranchID == account.BrokerBranchID:             # <<<<<<<<<<<<<<
 *                     self.all_bank_accounts[i] = account; find = True; break
 *             if not find: self.all_bank_accounts.append(account)
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_inst, __pyx_n_s_BankID); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 124, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_account, __pyx_n_s_BankID); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 124, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyObject_RichCompare(__pyx_t_3, __pyx_t_7, Py_EQ); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 124, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 124, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (__pyx_t_9) {
      } else {
        __pyx_t_1 = __pyx_t_9;
        goto __pyx_L7_bool_binop_done;
      }
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_inst, __pyx_n_s_BankBranchID); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 124, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_account, __pyx_n_s_BankBranchID); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 124, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_3 = PyObject_RichCompare(__pyx_t_8, __pyx_t_7, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 124, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 124, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_9) {
      } else {
        __pyx_t_1 = __pyx_t_9;
        goto __pyx_L7_bool_binop_done;
      }
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_inst, __pyx_n_s_BrokerID); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 124, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_account, __pyx_n_s_BrokerID); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 124, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyObject_RichCompare(__pyx_t_3, __pyx_t_7, Py_EQ); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 124, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 124, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (__pyx_t_9) {
      } else {
        __pyx_t_1 = __pyx_t_9;
        goto __pyx_L7_bool_binop_done;
      }
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_inst, __pyx_n_s_BrokerBranchID); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 124, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_account, __pyx_n_s_BrokerBranchID); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 124, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_3 = PyObject_RichCompare(__pyx_t_8, __pyx_t_7, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 124, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 124, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_1 = __pyx_t_9;
      __pyx_L7_bool_binop_done:;
      if (__pyx_t_1) {

        /* "src/ctp_trader.pyx":125
 *             for i, inst in enumerate(self.all_bank_accounts):
 *                 if inst.BankID == account.BankID and inst.BankBranchID == account.BankBranchID and inst.BrokerID == account.BrokerID and inst.BrokerBranchID == account.BrokerBranchID:
 *                     self.all_bank_accounts[i] = account; find = True; break             # <<<<<<<<<<<<<<
 *             if not find: self.all_bank_accounts.append(account)
 *     def get_bank_accounts(self):
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_all_bank_accounts); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 125, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        if (unlikely(PyObject_SetItem(__pyx_t_3, __pyx_v_i, __pyx_v_account) < 0)) __PYX_ERR(0, 125, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_v_find = 1;
        goto __pyx_L5_break;

        /* "src/ctp_trader.pyx":124
 *             find = False
 *             for i, inst in enumerate(self.all_bank_accounts):
 *                 if inst.BankID == account.BankID and inst.BankBranchID == account.BankBranchID and inst.BrokerID == account.BrokerID and inst.BrokerBranchID == account.BrokerBranchID:             # <<<<<<<<<<<<<<
 *                     self.all_bank_accounts[i] = account; find = True; break
 *             if not find: self.all_bank_accounts.append(account)
 */
      }

      /* "src/ctp_trader.pyx":123
 *         if account:
 *             find = False
 *             for i, inst in enumerate(self.all_bank_accounts):             # <<<<<<<<<<<<<<
 *                 if inst.BankID == account.BankID and inst.BankBranchID == account.BankBranchID and inst.BrokerID == account.BrokerID and inst.BrokerBranchID == account.BrokerBranchID:
 *                     self.all_bank_accounts[i] = account; find = True; break
 */
    }
    __pyx_L5_break:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "src/ctp_trader.pyx":126
 *                 if inst.BankID == account.BankID and inst.BankBranchID == account.BankBranchID and inst.BrokerID == account.BrokerID and inst.BrokerBranchID == account.BrokerBranchID:
 *                     self.all_bank_accounts[i] = account; find = True; break
 *             if not find: self.all_bank_accounts.append(account)             # <<<<<<<<<<<<<<
 *     def get_bank_accounts(self):
 *         return self.all_bank_accounts
 */
    __pyx_t_1 = ((!(__pyx_v_find != 0)) != 0);
    if (__pyx_t_1) {
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_all_bank_accounts); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 126, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_10 = __Pyx_PyObject_Append(__pyx_t_2, __pyx_v_account); if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(0, 126, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }

    /* "src/ctp_trader.pyx":121
 *         return self.collector.QryAccountRegister(as_str(bid if bid else ""))
 *     def add_bank_account(self, account):
 *         if account:             # <<<<<<<<<<<<<<
 *             find = False
 *             for i, inst in enumerate(self.all_bank_accounts):
 */
  }

  /* "src/ctp_trader.pyx":120
 *     def query_account_register(self, bid=None):
 *         return self.collector.QryAccountRegister(as_str(bid if bid else ""))
 *     def add_bank_account(self, account):             # <<<<<<<<<<<<<<
 *         if account:
 *             find = False
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.add_bank_account", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_inst);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":127
 *                     self.all_bank_accounts[i] = account; find = True; break
 *             if not find: self.all_bank_accounts.append(account)
 *     def get_bank_accounts(self):             # <<<<<<<<<<<<<<
 *         return self.all_bank_accounts
 *     def query_transfer_bank(self, bid=None, bbid=None):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_65get_bank_accounts(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_65get_bank_accounts(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_bank_accounts (wrapper)", 0);
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_64get_bank_accounts(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_64get_bank_accounts(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_bank_accounts", 0);

  /* "src/ctp_trader.pyx":128
 *             if not find: self.all_bank_accounts.append(account)
 *     def get_bank_accounts(self):
 *         return self.all_bank_accounts             # <<<<<<<<<<<<<<
 *     def query_transfer_bank(self, bid=None, bbid=None):
 *         return self.collector.QryTransferBank(as_str(bid if bid else ""), as_str(bbid if bbid else ""))
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_all_bank_accounts); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":127
 *                     self.all_bank_accounts[i] = account; find = True; break
 *             if not find: self.all_bank_accounts.append(account)
 *     def get_bank_accounts(self):             # <<<<<<<<<<<<<<
 *         return self.all_bank_accounts
 *     def query_transfer_bank(self, bid=None, bbid=None):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.get_bank_accounts", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":129
 *     def get_bank_accounts(self):
 *         return self.all_bank_accounts
 *     def query_transfer_bank(self, bid=None, bbid=None):             # <<<<<<<<<<<<<<
 *         return self.collector.QryTransferBank(as_str(bid if bid else ""), as_str(bbid if bbid else ""))
 *     def query_contract_bank(self, bid=None, bbid=None):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_67query_transfer_bank(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_67query_transfer_bank(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_bid = 0;
  PyObject *__pyx_v_bbid = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("query_transfer_bank (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_bid,&__pyx_n_s_bbid,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bid);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bbid);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "query_transfer_bank") < 0)) __PYX_ERR(0, 129, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_bid = values[0];
    __pyx_v_bbid = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("query_transfer_bank", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 129, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.query_transfer_bank", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_66query_transfer_bank(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self), __pyx_v_bid, __pyx_v_bbid);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_66query_transfer_bank(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_bid, PyObject *__pyx_v_bbid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  char const *__pyx_t_6;
  __Pyx_RefNannySetupContext("query_transfer_bank", 0);

  /* "src/ctp_trader.pyx":130
 *         return self.all_bank_accounts
 *     def query_transfer_bank(self, bid=None, bbid=None):
 *         return self.collector.QryTransferBank(as_str(bid if bid else ""), as_str(bbid if bbid else ""))             # <<<<<<<<<<<<<<
 *     def query_contract_bank(self, bid=None, bbid=None):
 *         return self.collector.QryContractBank(as_str(bid if bid else ""), as_str(bbid if bbid else ""))
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_bid); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 130, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_bid);
    __pyx_t_1 = __pyx_v_bid;
  } else {
    __Pyx_INCREF(__pyx_kp_s__2);
    __pyx_t_1 = __pyx_kp_s__2;
  }
  __pyx_t_3 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 130, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_bbid); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 130, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_bbid);
    __pyx_t_1 = __pyx_v_bbid;
  } else {
    __Pyx_INCREF(__pyx_kp_s__2);
    __pyx_t_1 = __pyx_kp_s__2;
  }
  __pyx_t_5 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_AsString(__pyx_t_5); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 130, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->collector->QryTransferBank(__pyx_t_4, __pyx_t_6)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":129
 *     def get_bank_accounts(self):
 *         return self.all_bank_accounts
 *     def query_transfer_bank(self, bid=None, bbid=None):             # <<<<<<<<<<<<<<
 *         return self.collector.QryTransferBank(as_str(bid if bid else ""), as_str(bbid if bbid else ""))
 *     def query_contract_bank(self, bid=None, bbid=None):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.query_transfer_bank", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":131
 *     def query_transfer_bank(self, bid=None, bbid=None):
 *         return self.collector.QryTransferBank(as_str(bid if bid else ""), as_str(bbid if bbid else ""))
 *     def query_contract_bank(self, bid=None, bbid=None):             # <<<<<<<<<<<<<<
 *         return self.collector.QryContractBank(as_str(bid if bid else ""), as_str(bbid if bbid else ""))
 *     def query_trade_account(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_69query_contract_bank(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_69query_contract_bank(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_bid = 0;
  PyObject *__pyx_v_bbid = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("query_contract_bank (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_bid,&__pyx_n_s_bbid,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bid);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bbid);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "query_contract_bank") < 0)) __PYX_ERR(0, 131, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_bid = values[0];
    __pyx_v_bbid = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("query_contract_bank", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 131, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.query_contract_bank", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_68query_contract_bank(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self), __pyx_v_bid, __pyx_v_bbid);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_68query_contract_bank(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_bid, PyObject *__pyx_v_bbid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  char const *__pyx_t_6;
  __Pyx_RefNannySetupContext("query_contract_bank", 0);

  /* "src/ctp_trader.pyx":132
 *         return self.collector.QryTransferBank(as_str(bid if bid else ""), as_str(bbid if bbid else ""))
 *     def query_contract_bank(self, bid=None, bbid=None):
 *         return self.collector.QryContractBank(as_str(bid if bid else ""), as_str(bbid if bbid else ""))             # <<<<<<<<<<<<<<
 *     def query_trade_account(self):
 *         return self.collector.QryTradingAccount()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_bid); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 132, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_bid);
    __pyx_t_1 = __pyx_v_bid;
  } else {
    __Pyx_INCREF(__pyx_kp_s__2);
    __pyx_t_1 = __pyx_kp_s__2;
  }
  __pyx_t_3 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 132, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_bbid); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 132, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_bbid);
    __pyx_t_1 = __pyx_v_bbid;
  } else {
    __Pyx_INCREF(__pyx_kp_s__2);
    __pyx_t_1 = __pyx_kp_s__2;
  }
  __pyx_t_5 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_AsString(__pyx_t_5); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 132, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->collector->QryContractBank(__pyx_t_4, __pyx_t_6)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":131
 *     def query_transfer_bank(self, bid=None, bbid=None):
 *         return self.collector.QryTransferBank(as_str(bid if bid else ""), as_str(bbid if bbid else ""))
 *     def query_contract_bank(self, bid=None, bbid=None):             # <<<<<<<<<<<<<<
 *         return self.collector.QryContractBank(as_str(bid if bid else ""), as_str(bbid if bbid else ""))
 *     def query_trade_account(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.query_contract_bank", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":133
 *     def query_contract_bank(self, bid=None, bbid=None):
 *         return self.collector.QryContractBank(as_str(bid if bid else ""), as_str(bbid if bbid else ""))
 *     def query_trade_account(self):             # <<<<<<<<<<<<<<
 *         return self.collector.QryTradingAccount()
 *     def query_trade_code(self, eid=None, cid=None, cidt=None):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_71query_trade_account(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_71query_trade_account(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("query_trade_account (wrapper)", 0);
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_70query_trade_account(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_70query_trade_account(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("query_trade_account", 0);

  /* "src/ctp_trader.pyx":134
 *         return self.collector.QryContractBank(as_str(bid if bid else ""), as_str(bbid if bbid else ""))
 *     def query_trade_account(self):
 *         return self.collector.QryTradingAccount()             # <<<<<<<<<<<<<<
 *     def query_trade_code(self, eid=None, cid=None, cidt=None):
 *         return self.collector.QryTradingCode(as_str(eid if eid else ""), as_str(cid if cid else ""), as_str(cidt if cidt else ""))
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->collector->QryTradingAccount()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":133
 *     def query_contract_bank(self, bid=None, bbid=None):
 *         return self.collector.QryContractBank(as_str(bid if bid else ""), as_str(bbid if bbid else ""))
 *     def query_trade_account(self):             # <<<<<<<<<<<<<<
 *         return self.collector.QryTradingAccount()
 *     def query_trade_code(self, eid=None, cid=None, cidt=None):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.query_trade_account", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":135
 *     def query_trade_account(self):
 *         return self.collector.QryTradingAccount()
 *     def query_trade_code(self, eid=None, cid=None, cidt=None):             # <<<<<<<<<<<<<<
 *         return self.collector.QryTradingCode(as_str(eid if eid else ""), as_str(cid if cid else ""), as_str(cidt if cidt else ""))
 *     def add_trade_code(self, tradecode):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_73query_trade_code(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_73query_trade_code(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_eid = 0;
  PyObject *__pyx_v_cid = 0;
  PyObject *__pyx_v_cidt = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("query_trade_code (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_eid,&__pyx_n_s_cid,&__pyx_n_s_cidt,0};
    PyObject* values[3] = {0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_eid);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cid);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cidt);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "query_trade_code") < 0)) __PYX_ERR(0, 135, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_eid = values[0];
    __pyx_v_cid = values[1];
    __pyx_v_cidt = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("query_trade_code", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 135, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.query_trade_code", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_72query_trade_code(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self), __pyx_v_eid, __pyx_v_cid, __pyx_v_cidt);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_72query_trade_code(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_eid, PyObject *__pyx_v_cid, PyObject *__pyx_v_cidt) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  char const *__pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  char const *__pyx_t_8;
  __Pyx_RefNannySetupContext("query_trade_code", 0);

  /* "src/ctp_trader.pyx":136
 *         return self.collector.QryTradingAccount()
 *     def query_trade_code(self, eid=None, cid=None, cidt=None):
 *         return self.collector.QryTradingCode(as_str(eid if eid else ""), as_str(cid if cid else ""), as_str(cidt if cidt else ""))             # <<<<<<<<<<<<<<
 *     def add_trade_code(self, tradecode):
 *         if tradecode:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_eid); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 136, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_eid);
    __pyx_t_1 = __pyx_v_eid;
  } else {
    __Pyx_INCREF(__pyx_kp_s__2);
    __pyx_t_1 = __pyx_kp_s__2;
  }
  __pyx_t_3 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 136, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_cid); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 136, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_cid);
    __pyx_t_1 = __pyx_v_cid;
  } else {
    __Pyx_INCREF(__pyx_kp_s__2);
    __pyx_t_1 = __pyx_kp_s__2;
  }
  __pyx_t_5 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_AsString(__pyx_t_5); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 136, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_cidt); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 136, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_cidt);
    __pyx_t_1 = __pyx_v_cidt;
  } else {
    __Pyx_INCREF(__pyx_kp_s__2);
    __pyx_t_1 = __pyx_kp_s__2;
  }
  __pyx_t_7 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_8 = __Pyx_PyObject_AsString(__pyx_t_7); if (unlikely((!__pyx_t_8) && PyErr_Occurred())) __PYX_ERR(0, 136, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->collector->QryTradingCode(__pyx_t_4, __pyx_t_6, __pyx_t_8)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":135
 *     def query_trade_account(self):
 *         return self.collector.QryTradingAccount()
 *     def query_trade_code(self, eid=None, cid=None, cidt=None):             # <<<<<<<<<<<<<<
 *         return self.collector.QryTradingCode(as_str(eid if eid else ""), as_str(cid if cid else ""), as_str(cidt if cidt else ""))
 *     def add_trade_code(self, tradecode):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.query_trade_code", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":137
 *     def query_trade_code(self, eid=None, cid=None, cidt=None):
 *         return self.collector.QryTradingCode(as_str(eid if eid else ""), as_str(cid if cid else ""), as_str(cidt if cidt else ""))
 *     def add_trade_code(self, tradecode):             # <<<<<<<<<<<<<<
 *         if tradecode:
 *             find = False
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_75add_trade_code(PyObject *__pyx_v_self, PyObject *__pyx_v_tradecode); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_75add_trade_code(PyObject *__pyx_v_self, PyObject *__pyx_v_tradecode) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_trade_code (wrapper)", 0);
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_74add_trade_code(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self), ((PyObject *)__pyx_v_tradecode));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_74add_trade_code(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_tradecode) {
  int __pyx_v_find;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_inst = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  __Pyx_RefNannySetupContext("add_trade_code", 0);

  /* "src/ctp_trader.pyx":138
 *         return self.collector.QryTradingCode(as_str(eid if eid else ""), as_str(cid if cid else ""), as_str(cidt if cidt else ""))
 *     def add_trade_code(self, tradecode):
 *         if tradecode:             # <<<<<<<<<<<<<<
 *             find = False
 *             for i, inst in enumerate(self.all_trade_codes):
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_tradecode); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 138, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "src/ctp_trader.pyx":139
 *     def add_trade_code(self, tradecode):
 *         if tradecode:
 *             find = False             # <<<<<<<<<<<<<<
 *             for i, inst in enumerate(self.all_trade_codes):
 *                 if inst.InvestorID == tradecode.InvestorID and inst.BrokerID == tradecode.BrokerID and inst.ExchangeID == tradecode.ExchangeID:
 */
    __pyx_v_find = 0;

    /* "src/ctp_trader.pyx":140
 *         if tradecode:
 *             find = False
 *             for i, inst in enumerate(self.all_trade_codes):             # <<<<<<<<<<<<<<
 *                 if inst.InvestorID == tradecode.InvestorID and inst.BrokerID == tradecode.BrokerID and inst.ExchangeID == tradecode.ExchangeID:
 *                     self.all_trade_codes[i] = tradecode; find = True; break
 */
    __Pyx_INCREF(__pyx_int_0);
    __pyx_t_2 = __pyx_int_0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_all_trade_codes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 140, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 140, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 140, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 140, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 140, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 140, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_6(__pyx_t_4);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 140, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_inst, __pyx_t_3);
      __pyx_t_3 = 0;
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
      __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 140, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2);
      __pyx_t_2 = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "src/ctp_trader.pyx":141
 *             find = False
 *             for i, inst in enumerate(self.all_trade_codes):
 *                 if inst.InvestorID == tradecode.InvestorID and inst.BrokerID == tradecode.BrokerID and inst.ExchangeID == tradecode.ExchangeID:             # <<<<<<<<<<<<<<
 *                     self.all_trade_codes[i] = tradecode; find = True; break
 *             if not find: self.all_trade_codes.append(tradecode)
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_inst, __pyx_n_s_InvestorID); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 141, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_tradecode, __pyx_n_s_InvestorID); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 141, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyObject_RichCompare(__pyx_t_3, __pyx_t_7, Py_EQ); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 141, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 141, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (__pyx_t_9) {
      } else {
        __pyx_t_1 = __pyx_t_9;
        goto __pyx_L7_bool_binop_done;
      }
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_inst, __pyx_n_s_BrokerID); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 141, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_tradecode, __pyx_n_s_BrokerID); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 141, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_3 = PyObject_RichCompare(__pyx_t_8, __pyx_t_7, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 141, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 141, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_9) {
      } else {
        __pyx_t_1 = __pyx_t_9;
        goto __pyx_L7_bool_binop_done;
      }
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_inst, __pyx_n_s_ExchangeID); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 141, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_tradecode, __pyx_n_s_ExchangeID); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 141, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyObject_RichCompare(__pyx_t_3, __pyx_t_7, Py_EQ); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 141, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 141, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_1 = __pyx_t_9;
      __pyx_L7_bool_binop_done:;
      if (__pyx_t_1) {

        /* "src/ctp_trader.pyx":142
 *             for i, inst in enumerate(self.all_trade_codes):
 *                 if inst.InvestorID == tradecode.InvestorID and inst.BrokerID == tradecode.BrokerID and inst.ExchangeID == tradecode.ExchangeID:
 *                     self.all_trade_codes[i] = tradecode; find = True; break             # <<<<<<<<<<<<<<
 *             if not find: self.all_trade_codes.append(tradecode)
 *     def get_trade_codes(self):
 */
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_all_trade_codes); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 142, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (unlikely(PyObject_SetItem(__pyx_t_8, __pyx_v_i, __pyx_v_tradecode) < 0)) __PYX_ERR(0, 142, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_v_find = 1;
        goto __pyx_L5_break;

        /* "src/ctp_trader.pyx":141
 *             find = False
 *             for i, inst in enumerate(self.all_trade_codes):
 *                 if inst.InvestorID == tradecode.InvestorID and inst.BrokerID == tradecode.BrokerID and inst.ExchangeID == tradecode.ExchangeID:             # <<<<<<<<<<<<<<
 *                     self.all_trade_codes[i] = tradecode; find = True; break
 *             if not find: self.all_trade_codes.append(tradecode)
 */
      }

      /* "src/ctp_trader.pyx":140
 *         if tradecode:
 *             find = False
 *             for i, inst in enumerate(self.all_trade_codes):             # <<<<<<<<<<<<<<
 *                 if inst.InvestorID == tradecode.InvestorID and inst.BrokerID == tradecode.BrokerID and inst.ExchangeID == tradecode.ExchangeID:
 *                     self.all_trade_codes[i] = tradecode; find = True; break
 */
    }
    __pyx_L5_break:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "src/ctp_trader.pyx":143
 *                 if inst.InvestorID == tradecode.InvestorID and inst.BrokerID == tradecode.BrokerID and inst.ExchangeID == tradecode.ExchangeID:
 *                     self.all_trade_codes[i] = tradecode; find = True; break
 *             if not find: self.all_trade_codes.append(tradecode)             # <<<<<<<<<<<<<<
 *     def get_trade_codes(self):
 *         return self.all_trade_codes
 */
    __pyx_t_1 = ((!(__pyx_v_find != 0)) != 0);
    if (__pyx_t_1) {
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_all_trade_codes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 143, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_10 = __Pyx_PyObject_Append(__pyx_t_2, __pyx_v_tradecode); if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(0, 143, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }

    /* "src/ctp_trader.pyx":138
 *         return self.collector.QryTradingCode(as_str(eid if eid else ""), as_str(cid if cid else ""), as_str(cidt if cidt else ""))
 *     def add_trade_code(self, tradecode):
 *         if tradecode:             # <<<<<<<<<<<<<<
 *             find = False
 *             for i, inst in enumerate(self.all_trade_codes):
 */
  }

  /* "src/ctp_trader.pyx":137
 *     def query_trade_code(self, eid=None, cid=None, cidt=None):
 *         return self.collector.QryTradingCode(as_str(eid if eid else ""), as_str(cid if cid else ""), as_str(cidt if cidt else ""))
 *     def add_trade_code(self, tradecode):             # <<<<<<<<<<<<<<
 *         if tradecode:
 *             find = False
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.add_trade_code", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_inst);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":144
 *                     self.all_trade_codes[i] = tradecode; find = True; break
 *             if not find: self.all_trade_codes.append(tradecode)
 *     def get_trade_codes(self):             # <<<<<<<<<<<<<<
 *         return self.all_trade_codes
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_77get_trade_codes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_77get_trade_codes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_trade_codes (wrapper)", 0);
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_76get_trade_codes(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_76get_trade_codes(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_trade_codes", 0);

  /* "src/ctp_trader.pyx":145
 *             if not find: self.all_trade_codes.append(tradecode)
 *     def get_trade_codes(self):
 *         return self.all_trade_codes             # <<<<<<<<<<<<<<
 * 
 *     def deposit_money(self, bid, amount, bbid="0000", day=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_all_trade_codes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":144
 *                     self.all_trade_codes[i] = tradecode; find = True; break
 *             if not find: self.all_trade_codes.append(tradecode)
 *     def get_trade_codes(self):             # <<<<<<<<<<<<<<
 *         return self.all_trade_codes
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.get_trade_codes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":147
 *         return self.all_trade_codes
 * 
 *     def deposit_money(self, bid, amount, bbid="0000", day=None):             # <<<<<<<<<<<<<<
 *         return self.collector.DepositMoney(as_str(bid if bid else ""), as_str(bbid if bbid else "0000"), as_str(day if day else self.get_trading_day()), amount)
 *     def withdraw_money(self, bid, amount, bbid="0000", day=None):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_79deposit_money(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_79deposit_money(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_bid = 0;
  PyObject *__pyx_v_amount = 0;
  PyObject *__pyx_v_bbid = 0;
  PyObject *__pyx_v_day = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("deposit_money (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_bid,&__pyx_n_s_amount,&__pyx_n_s_bbid,&__pyx_n_s_day,0};
    PyObject* values[4] = {0,0,0,0};
    values[2] = ((PyObject *)__pyx_kp_s_0000);
    values[3] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_amount)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("deposit_money", 0, 2, 4, 1); __PYX_ERR(0, 147, __pyx_L3_error)
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bbid);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_day);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "deposit_money") < 0)) __PYX_ERR(0, 147, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_bid = values[0];
    __pyx_v_amount = values[1];
    __pyx_v_bbid = values[2];
    __pyx_v_day = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("deposit_money", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 147, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.deposit_money", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_78deposit_money(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self), __pyx_v_bid, __pyx_v_amount, __pyx_v_bbid, __pyx_v_day);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_78deposit_money(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_bid, PyObject *__pyx_v_amount, PyObject *__pyx_v_bbid, PyObject *__pyx_v_day) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  char const *__pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  char const *__pyx_t_10;
  double __pyx_t_11;
  __Pyx_RefNannySetupContext("deposit_money", 0);

  /* "src/ctp_trader.pyx":148
 * 
 *     def deposit_money(self, bid, amount, bbid="0000", day=None):
 *         return self.collector.DepositMoney(as_str(bid if bid else ""), as_str(bbid if bbid else "0000"), as_str(day if day else self.get_trading_day()), amount)             # <<<<<<<<<<<<<<
 *     def withdraw_money(self, bid, amount, bbid="0000", day=None):
 *         return self.collector.WithdrawMoney(as_str(bid if bid else ""), as_str(bbid if bbid else "0000"), as_str(day if day else self.get_trading_day()), amount)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_bid); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 148, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_bid);
    __pyx_t_1 = __pyx_v_bid;
  } else {
    __Pyx_INCREF(__pyx_kp_s__2);
    __pyx_t_1 = __pyx_kp_s__2;
  }
  __pyx_t_3 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 148, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_bbid); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 148, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_bbid);
    __pyx_t_1 = __pyx_v_bbid;
  } else {
    __Pyx_INCREF(__pyx_kp_s_0000);
    __pyx_t_1 = __pyx_kp_s_0000;
  }
  __pyx_t_5 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_AsString(__pyx_t_5); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 148, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_day); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 148, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_day);
    __pyx_t_1 = __pyx_v_day;
  } else {
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_trading_day); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    if (__pyx_t_9) {
      __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 148, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    } else {
      __pyx_t_7 = __Pyx_PyObject_CallNoArg(__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 148, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_1 = __pyx_t_7;
    __pyx_t_7 = 0;
  }
  __pyx_t_7 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_10 = __Pyx_PyObject_AsString(__pyx_t_7); if (unlikely((!__pyx_t_10) && PyErr_Occurred())) __PYX_ERR(0, 148, __pyx_L1_error)
  __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_v_amount); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 148, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->collector->DepositMoney(__pyx_t_4, __pyx_t_6, __pyx_t_10, __pyx_t_11)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":147
 *         return self.all_trade_codes
 * 
 *     def deposit_money(self, bid, amount, bbid="0000", day=None):             # <<<<<<<<<<<<<<
 *         return self.collector.DepositMoney(as_str(bid if bid else ""), as_str(bbid if bbid else "0000"), as_str(day if day else self.get_trading_day()), amount)
 *     def withdraw_money(self, bid, amount, bbid="0000", day=None):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.deposit_money", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":149
 *     def deposit_money(self, bid, amount, bbid="0000", day=None):
 *         return self.collector.DepositMoney(as_str(bid if bid else ""), as_str(bbid if bbid else "0000"), as_str(day if day else self.get_trading_day()), amount)
 *     def withdraw_money(self, bid, amount, bbid="0000", day=None):             # <<<<<<<<<<<<<<
 *         return self.collector.WithdrawMoney(as_str(bid if bid else ""), as_str(bbid if bbid else "0000"), as_str(day if day else self.get_trading_day()), amount)
 *     def query_transfer(self, bid):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_81withdraw_money(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_81withdraw_money(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_bid = 0;
  PyObject *__pyx_v_amount = 0;
  PyObject *__pyx_v_bbid = 0;
  PyObject *__pyx_v_day = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("withdraw_money (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_bid,&__pyx_n_s_amount,&__pyx_n_s_bbid,&__pyx_n_s_day,0};
    PyObject* values[4] = {0,0,0,0};
    values[2] = ((PyObject *)__pyx_kp_s_0000);
    values[3] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_amount)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("withdraw_money", 0, 2, 4, 1); __PYX_ERR(0, 149, __pyx_L3_error)
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bbid);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_day);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "withdraw_money") < 0)) __PYX_ERR(0, 149, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_bid = values[0];
    __pyx_v_amount = values[1];
    __pyx_v_bbid = values[2];
    __pyx_v_day = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("withdraw_money", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 149, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.withdraw_money", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_80withdraw_money(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self), __pyx_v_bid, __pyx_v_amount, __pyx_v_bbid, __pyx_v_day);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_80withdraw_money(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_bid, PyObject *__pyx_v_amount, PyObject *__pyx_v_bbid, PyObject *__pyx_v_day) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  char const *__pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  char const *__pyx_t_10;
  double __pyx_t_11;
  __Pyx_RefNannySetupContext("withdraw_money", 0);

  /* "src/ctp_trader.pyx":150
 *         return self.collector.DepositMoney(as_str(bid if bid else ""), as_str(bbid if bbid else "0000"), as_str(day if day else self.get_trading_day()), amount)
 *     def withdraw_money(self, bid, amount, bbid="0000", day=None):
 *         return self.collector.WithdrawMoney(as_str(bid if bid else ""), as_str(bbid if bbid else "0000"), as_str(day if day else self.get_trading_day()), amount)             # <<<<<<<<<<<<<<
 *     def query_transfer(self, bid):
 *         return self.collector.QryTransferSerial(as_str(bid if bid else ""))
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_bid); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 150, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_bid);
    __pyx_t_1 = __pyx_v_bid;
  } else {
    __Pyx_INCREF(__pyx_kp_s__2);
    __pyx_t_1 = __pyx_kp_s__2;
  }
  __pyx_t_3 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 150, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_bbid); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 150, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_bbid);
    __pyx_t_1 = __pyx_v_bbid;
  } else {
    __Pyx_INCREF(__pyx_kp_s_0000);
    __pyx_t_1 = __pyx_kp_s_0000;
  }
  __pyx_t_5 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_AsString(__pyx_t_5); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 150, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_day); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 150, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_day);
    __pyx_t_1 = __pyx_v_day;
  } else {
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_trading_day); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 150, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    if (__pyx_t_9) {
      __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 150, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    } else {
      __pyx_t_7 = __Pyx_PyObject_CallNoArg(__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 150, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_1 = __pyx_t_7;
    __pyx_t_7 = 0;
  }
  __pyx_t_7 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_10 = __Pyx_PyObject_AsString(__pyx_t_7); if (unlikely((!__pyx_t_10) && PyErr_Occurred())) __PYX_ERR(0, 150, __pyx_L1_error)
  __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_v_amount); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 150, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->collector->WithdrawMoney(__pyx_t_4, __pyx_t_6, __pyx_t_10, __pyx_t_11)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":149
 *     def deposit_money(self, bid, amount, bbid="0000", day=None):
 *         return self.collector.DepositMoney(as_str(bid if bid else ""), as_str(bbid if bbid else "0000"), as_str(day if day else self.get_trading_day()), amount)
 *     def withdraw_money(self, bid, amount, bbid="0000", day=None):             # <<<<<<<<<<<<<<
 *         return self.collector.WithdrawMoney(as_str(bid if bid else ""), as_str(bbid if bbid else "0000"), as_str(day if day else self.get_trading_day()), amount)
 *     def query_transfer(self, bid):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.withdraw_money", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":151
 *     def withdraw_money(self, bid, amount, bbid="0000", day=None):
 *         return self.collector.WithdrawMoney(as_str(bid if bid else ""), as_str(bbid if bbid else "0000"), as_str(day if day else self.get_trading_day()), amount)
 *     def query_transfer(self, bid):             # <<<<<<<<<<<<<<
 *         return self.collector.QryTransferSerial(as_str(bid if bid else ""))
 *     def query_bank_money(self, bid, bbid="0000", day=None):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_83query_transfer(PyObject *__pyx_v_self, PyObject *__pyx_v_bid); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_83query_transfer(PyObject *__pyx_v_self, PyObject *__pyx_v_bid) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("query_transfer (wrapper)", 0);
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_82query_transfer(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self), ((PyObject *)__pyx_v_bid));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_82query_transfer(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_bid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  __Pyx_RefNannySetupContext("query_transfer", 0);

  /* "src/ctp_trader.pyx":152
 *         return self.collector.WithdrawMoney(as_str(bid if bid else ""), as_str(bbid if bbid else "0000"), as_str(day if day else self.get_trading_day()), amount)
 *     def query_transfer(self, bid):
 *         return self.collector.QryTransferSerial(as_str(bid if bid else ""))             # <<<<<<<<<<<<<<
 *     def query_bank_money(self, bid, bbid="0000", day=None):
 *         return self.collector.QryBankMoney(as_str(bid if bid else ""), as_str(bbid if bbid else "0000"), as_str(day if day else self.get_trading_day()))
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_bid); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 152, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_bid);
    __pyx_t_1 = __pyx_v_bid;
  } else {
    __Pyx_INCREF(__pyx_kp_s__2);
    __pyx_t_1 = __pyx_kp_s__2;
  }
  __pyx_t_3 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 152, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->collector->QryTransferSerial(__pyx_t_4)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":151
 *     def withdraw_money(self, bid, amount, bbid="0000", day=None):
 *         return self.collector.WithdrawMoney(as_str(bid if bid else ""), as_str(bbid if bbid else "0000"), as_str(day if day else self.get_trading_day()), amount)
 *     def query_transfer(self, bid):             # <<<<<<<<<<<<<<
 *         return self.collector.QryTransferSerial(as_str(bid if bid else ""))
 *     def query_bank_money(self, bid, bbid="0000", day=None):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.query_transfer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":153
 *     def query_transfer(self, bid):
 *         return self.collector.QryTransferSerial(as_str(bid if bid else ""))
 *     def query_bank_money(self, bid, bbid="0000", day=None):             # <<<<<<<<<<<<<<
 *         return self.collector.QryBankMoney(as_str(bid if bid else ""), as_str(bbid if bbid else "0000"), as_str(day if day else self.get_trading_day()))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_85query_bank_money(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_85query_bank_money(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_bid = 0;
  PyObject *__pyx_v_bbid = 0;
  PyObject *__pyx_v_day = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("query_bank_money (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_bid,&__pyx_n_s_bbid,&__pyx_n_s_day,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)__pyx_kp_s_0000);
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bbid);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_day);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "query_bank_money") < 0)) __PYX_ERR(0, 153, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_bid = values[0];
    __pyx_v_bbid = values[1];
    __pyx_v_day = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("query_bank_money", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 153, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.query_bank_money", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_84query_bank_money(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self), __pyx_v_bid, __pyx_v_bbid, __pyx_v_day);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_84query_bank_money(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_bid, PyObject *__pyx_v_bbid, PyObject *__pyx_v_day) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  char const *__pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  char const *__pyx_t_10;
  __Pyx_RefNannySetupContext("query_bank_money", 0);

  /* "src/ctp_trader.pyx":154
 *         return self.collector.QryTransferSerial(as_str(bid if bid else ""))
 *     def query_bank_money(self, bid, bbid="0000", day=None):
 *         return self.collector.QryBankMoney(as_str(bid if bid else ""), as_str(bbid if bbid else "0000"), as_str(day if day else self.get_trading_day()))             # <<<<<<<<<<<<<<
 * 
 *     def query_market_data(self, iid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_bid); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 154, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_bid);
    __pyx_t_1 = __pyx_v_bid;
  } else {
    __Pyx_INCREF(__pyx_kp_s__2);
    __pyx_t_1 = __pyx_kp_s__2;
  }
  __pyx_t_3 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 154, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_bbid); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 154, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_bbid);
    __pyx_t_1 = __pyx_v_bbid;
  } else {
    __Pyx_INCREF(__pyx_kp_s_0000);
    __pyx_t_1 = __pyx_kp_s_0000;
  }
  __pyx_t_5 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_AsString(__pyx_t_5); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 154, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_day); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 154, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_day);
    __pyx_t_1 = __pyx_v_day;
  } else {
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_trading_day); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 154, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    if (__pyx_t_9) {
      __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 154, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    } else {
      __pyx_t_7 = __Pyx_PyObject_CallNoArg(__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 154, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_1 = __pyx_t_7;
    __pyx_t_7 = 0;
  }
  __pyx_t_7 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_10 = __Pyx_PyObject_AsString(__pyx_t_7); if (unlikely((!__pyx_t_10) && PyErr_Occurred())) __PYX_ERR(0, 154, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->collector->QryBankMoney(__pyx_t_4, __pyx_t_6, __pyx_t_10)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":153
 *     def query_transfer(self, bid):
 *         return self.collector.QryTransferSerial(as_str(bid if bid else ""))
 *     def query_bank_money(self, bid, bbid="0000", day=None):             # <<<<<<<<<<<<<<
 *         return self.collector.QryBankMoney(as_str(bid if bid else ""), as_str(bbid if bbid else "0000"), as_str(day if day else self.get_trading_day()))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.query_bank_money", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":156
 *         return self.collector.QryBankMoney(as_str(bid if bid else ""), as_str(bbid if bbid else "0000"), as_str(day if day else self.get_trading_day()))
 * 
 *     def query_market_data(self, iid):             # <<<<<<<<<<<<<<
 *         return self.collector.QryMarketData(as_str(iid if iid else ""))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_87query_market_data(PyObject *__pyx_v_self, PyObject *__pyx_v_iid); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_87query_market_data(PyObject *__pyx_v_self, PyObject *__pyx_v_iid) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("query_market_data (wrapper)", 0);
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_86query_market_data(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self), ((PyObject *)__pyx_v_iid));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_86query_market_data(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_iid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  __Pyx_RefNannySetupContext("query_market_data", 0);

  /* "src/ctp_trader.pyx":157
 * 
 *     def query_market_data(self, iid):
 *         return self.collector.QryMarketData(as_str(iid if iid else ""))             # <<<<<<<<<<<<<<
 * 
 *     def ask_quote(self, iid, max_ref=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_iid); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 157, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_iid);
    __pyx_t_1 = __pyx_v_iid;
  } else {
    __Pyx_INCREF(__pyx_kp_s__2);
    __pyx_t_1 = __pyx_kp_s__2;
  }
  __pyx_t_3 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 157, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->collector->QryMarketData(__pyx_t_4)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":156
 *         return self.collector.QryBankMoney(as_str(bid if bid else ""), as_str(bbid if bbid else "0000"), as_str(day if day else self.get_trading_day()))
 * 
 *     def query_market_data(self, iid):             # <<<<<<<<<<<<<<
 *         return self.collector.QryMarketData(as_str(iid if iid else ""))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.query_market_data", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":159
 *         return self.collector.QryMarketData(as_str(iid if iid else ""))
 * 
 *     def ask_quote(self, iid, max_ref=None):             # <<<<<<<<<<<<<<
 *         return self.collector.AskQuote(as_str(iid if iid else ""), as_str(max_ref if max_ref else self.inc_max_other_ref()))
 *     def query_ask_quote(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_89ask_quote(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_89ask_quote(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_iid = 0;
  PyObject *__pyx_v_max_ref = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ask_quote (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_iid,&__pyx_n_s_max_ref,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_iid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_ref);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "ask_quote") < 0)) __PYX_ERR(0, 159, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_iid = values[0];
    __pyx_v_max_ref = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("ask_quote", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 159, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.ask_quote", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_88ask_quote(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self), __pyx_v_iid, __pyx_v_max_ref);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_88ask_quote(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_iid, PyObject *__pyx_v_max_ref) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  char const *__pyx_t_8;
  __Pyx_RefNannySetupContext("ask_quote", 0);

  /* "src/ctp_trader.pyx":160
 * 
 *     def ask_quote(self, iid, max_ref=None):
 *         return self.collector.AskQuote(as_str(iid if iid else ""), as_str(max_ref if max_ref else self.inc_max_other_ref()))             # <<<<<<<<<<<<<<
 *     def query_ask_quote(self):
 *         pass
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_iid); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 160, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_iid);
    __pyx_t_1 = __pyx_v_iid;
  } else {
    __Pyx_INCREF(__pyx_kp_s__2);
    __pyx_t_1 = __pyx_kp_s__2;
  }
  __pyx_t_3 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 160, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_max_ref); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 160, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_max_ref);
    __pyx_t_1 = __pyx_v_max_ref;
  } else {
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_inc_max_other_ref); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 160, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (__pyx_t_7) {
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 160, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else {
      __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 160, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_1 = __pyx_t_5;
    __pyx_t_5 = 0;
  }
  __pyx_t_5 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_8 = __Pyx_PyObject_AsString(__pyx_t_5); if (unlikely((!__pyx_t_8) && PyErr_Occurred())) __PYX_ERR(0, 160, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->collector->AskQuote(__pyx_t_4, __pyx_t_8)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":159
 *         return self.collector.QryMarketData(as_str(iid if iid else ""))
 * 
 *     def ask_quote(self, iid, max_ref=None):             # <<<<<<<<<<<<<<
 *         return self.collector.AskQuote(as_str(iid if iid else ""), as_str(max_ref if max_ref else self.inc_max_other_ref()))
 *     def query_ask_quote(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.ask_quote", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":161
 *     def ask_quote(self, iid, max_ref=None):
 *         return self.collector.AskQuote(as_str(iid if iid else ""), as_str(max_ref if max_ref else self.inc_max_other_ref()))
 *     def query_ask_quote(self):             # <<<<<<<<<<<<<<
 *         pass
 *     def answer_quote(self, iid, buy_price, sell_price, buy_volume, sell_volume):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_91query_ask_quote(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_91query_ask_quote(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("query_ask_quote (wrapper)", 0);
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_90query_ask_quote(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_90query_ask_quote(CYTHON_UNUSED struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("query_ask_quote", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":163
 *     def query_ask_quote(self):
 *         pass
 *     def answer_quote(self, iid, buy_price, sell_price, buy_volume, sell_volume):             # <<<<<<<<<<<<<<
 *         return self.collector.AnswerQuote(as_str(iid if iid else ""), buy_price, sell_price, buy_volume, sell_volume)
 *     def cancel_answer_quote(self, iid):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_93answer_quote(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_93answer_quote(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_iid = 0;
  PyObject *__pyx_v_buy_price = 0;
  PyObject *__pyx_v_sell_price = 0;
  PyObject *__pyx_v_buy_volume = 0;
  PyObject *__pyx_v_sell_volume = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("answer_quote (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_iid,&__pyx_n_s_buy_price,&__pyx_n_s_sell_price,&__pyx_n_s_buy_volume,&__pyx_n_s_sell_volume,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_iid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_buy_price)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("answer_quote", 1, 5, 5, 1); __PYX_ERR(0, 163, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sell_price)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("answer_quote", 1, 5, 5, 2); __PYX_ERR(0, 163, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_buy_volume)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("answer_quote", 1, 5, 5, 3); __PYX_ERR(0, 163, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sell_volume)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("answer_quote", 1, 5, 5, 4); __PYX_ERR(0, 163, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "answer_quote") < 0)) __PYX_ERR(0, 163, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_iid = values[0];
    __pyx_v_buy_price = values[1];
    __pyx_v_sell_price = values[2];
    __pyx_v_buy_volume = values[3];
    __pyx_v_sell_volume = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("answer_quote", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 163, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.answer_quote", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_92answer_quote(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self), __pyx_v_iid, __pyx_v_buy_price, __pyx_v_sell_price, __pyx_v_buy_volume, __pyx_v_sell_volume);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_92answer_quote(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_iid, PyObject *__pyx_v_buy_price, PyObject *__pyx_v_sell_price, PyObject *__pyx_v_buy_volume, PyObject *__pyx_v_sell_volume) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  double __pyx_t_5;
  double __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("answer_quote", 0);

  /* "src/ctp_trader.pyx":164
 *         pass
 *     def answer_quote(self, iid, buy_price, sell_price, buy_volume, sell_volume):
 *         return self.collector.AnswerQuote(as_str(iid if iid else ""), buy_price, sell_price, buy_volume, sell_volume)             # <<<<<<<<<<<<<<
 *     def cancel_answer_quote(self, iid):
 *         pass
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_iid); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 164, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_iid);
    __pyx_t_1 = __pyx_v_iid;
  } else {
    __Pyx_INCREF(__pyx_kp_s__2);
    __pyx_t_1 = __pyx_kp_s__2;
  }
  __pyx_t_3 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 164, __pyx_L1_error)
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_buy_price); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 164, __pyx_L1_error)
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_v_sell_price); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 164, __pyx_L1_error)
  __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_v_buy_volume); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 164, __pyx_L1_error)
  __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_v_sell_volume); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 164, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->collector->AnswerQuote(__pyx_t_4, __pyx_t_5, __pyx_t_6, __pyx_t_7, __pyx_t_8)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":163
 *     def query_ask_quote(self):
 *         pass
 *     def answer_quote(self, iid, buy_price, sell_price, buy_volume, sell_volume):             # <<<<<<<<<<<<<<
 *         return self.collector.AnswerQuote(as_str(iid if iid else ""), buy_price, sell_price, buy_volume, sell_volume)
 *     def cancel_answer_quote(self, iid):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.answer_quote", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":165
 *     def answer_quote(self, iid, buy_price, sell_price, buy_volume, sell_volume):
 *         return self.collector.AnswerQuote(as_str(iid if iid else ""), buy_price, sell_price, buy_volume, sell_volume)
 *     def cancel_answer_quote(self, iid):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_95cancel_answer_quote(PyObject *__pyx_v_self, PyObject *__pyx_v_iid); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_95cancel_answer_quote(PyObject *__pyx_v_self, PyObject *__pyx_v_iid) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cancel_answer_quote (wrapper)", 0);
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_94cancel_answer_quote(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self), ((PyObject *)__pyx_v_iid));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_94cancel_answer_quote(CYTHON_UNUSED struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_iid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cancel_answer_quote", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":168
 *         pass
 * 
 *     def insert_limit_price_order(self, iid, direction, volume, price, offset_flags, hedge_flags, min_volume=1, volume_condition='1', time_condition='3', force_close_reason='0', auto_suspend=0, user_force_close=0, max_ref=None, park=False):             # <<<<<<<<<<<<<<
 *         from cyctp.ctp_struct import OrderRequest, ParkOrderRequest
 *         order_req = OrderRequest() if not park else ParkOrderRequest()
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_97insert_limit_price_order(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_97insert_limit_price_order(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_iid = 0;
  PyObject *__pyx_v_direction = 0;
  PyObject *__pyx_v_volume = 0;
  PyObject *__pyx_v_price = 0;
  PyObject *__pyx_v_offset_flags = 0;
  PyObject *__pyx_v_hedge_flags = 0;
  PyObject *__pyx_v_min_volume = 0;
  PyObject *__pyx_v_volume_condition = 0;
  PyObject *__pyx_v_time_condition = 0;
  PyObject *__pyx_v_force_close_reason = 0;
  PyObject *__pyx_v_auto_suspend = 0;
  PyObject *__pyx_v_user_force_close = 0;
  PyObject *__pyx_v_max_ref = 0;
  PyObject *__pyx_v_park = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("insert_limit_price_order (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_iid,&__pyx_n_s_direction,&__pyx_n_s_volume,&__pyx_n_s_price,&__pyx_n_s_offset_flags,&__pyx_n_s_hedge_flags,&__pyx_n_s_min_volume,&__pyx_n_s_volume_condition,&__pyx_n_s_time_condition,&__pyx_n_s_force_close_reason,&__pyx_n_s_auto_suspend,&__pyx_n_s_user_force_close,&__pyx_n_s_max_ref,&__pyx_n_s_park,0};
    PyObject* values[14] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    values[6] = ((PyObject *)__pyx_int_1);
    values[7] = ((PyObject *)__pyx_kp_s_1);
    values[8] = ((PyObject *)__pyx_kp_s_3);
    values[9] = ((PyObject *)__pyx_kp_s_0);
    values[10] = ((PyObject *)__pyx_int_0);
    values[11] = ((PyObject *)__pyx_int_0);
    values[12] = ((PyObject *)Py_None);
    values[13] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_iid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_direction)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("insert_limit_price_order", 0, 6, 14, 1); __PYX_ERR(0, 168, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_volume)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("insert_limit_price_order", 0, 6, 14, 2); __PYX_ERR(0, 168, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_price)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("insert_limit_price_order", 0, 6, 14, 3); __PYX_ERR(0, 168, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_offset_flags)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("insert_limit_price_order", 0, 6, 14, 4); __PYX_ERR(0, 168, __pyx_L3_error)
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_hedge_flags)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("insert_limit_price_order", 0, 6, 14, 5); __PYX_ERR(0, 168, __pyx_L3_error)
        }
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_min_volume);
          if (value) { values[6] = value; kw_args--; }
        }
        case  7:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_volume_condition);
          if (value) { values[7] = value; kw_args--; }
        }
        case  8:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_time_condition);
          if (value) { values[8] = value; kw_args--; }
        }
        case  9:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_force_close_reason);
          if (value) { values[9] = value; kw_args--; }
        }
        case 10:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_auto_suspend);
          if (value) { values[10] = value; kw_args--; }
        }
        case 11:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_user_force_close);
          if (value) { values[11] = value; kw_args--; }
        }
        case 12:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_ref);
          if (value) { values[12] = value; kw_args--; }
        }
        case 13:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_park);
          if (value) { values[13] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "insert_limit_price_order") < 0)) __PYX_ERR(0, 168, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_iid = values[0];
    __pyx_v_direction = values[1];
    __pyx_v_volume = values[2];
    __pyx_v_price = values[3];
    __pyx_v_offset_flags = values[4];
    __pyx_v_hedge_flags = values[5];
    __pyx_v_min_volume = values[6];
    __pyx_v_volume_condition = values[7];
    __pyx_v_time_condition = values[8];
    __pyx_v_force_close_reason = values[9];
    __pyx_v_auto_suspend = values[10];
    __pyx_v_user_force_close = values[11];
    __pyx_v_max_ref = values[12];
    __pyx_v_park = values[13];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("insert_limit_price_order", 0, 6, 14, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 168, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.insert_limit_price_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_96insert_limit_price_order(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self), __pyx_v_iid, __pyx_v_direction, __pyx_v_volume, __pyx_v_price, __pyx_v_offset_flags, __pyx_v_hedge_flags, __pyx_v_min_volume, __pyx_v_volume_condition, __pyx_v_time_condition, __pyx_v_force_close_reason, __pyx_v_auto_suspend, __pyx_v_user_force_close, __pyx_v_max_ref, __pyx_v_park);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_96insert_limit_price_order(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_iid, PyObject *__pyx_v_direction, PyObject *__pyx_v_volume, PyObject *__pyx_v_price, PyObject *__pyx_v_offset_flags, PyObject *__pyx_v_hedge_flags, PyObject *__pyx_v_min_volume, PyObject *__pyx_v_volume_condition, PyObject *__pyx_v_time_condition, PyObject *__pyx_v_force_close_reason, PyObject *__pyx_v_auto_suspend, PyObject *__pyx_v_user_force_close, PyObject *__pyx_v_max_ref, PyObject *__pyx_v_park) {
  PyObject *__pyx_v_OrderRequest = NULL;
  PyObject *__pyx_v_ParkOrderRequest = NULL;
  PyObject *__pyx_v_order_req = NULL;
  unsigned int __pyx_v_addr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  unsigned int __pyx_t_10;
  __Pyx_RefNannySetupContext("insert_limit_price_order", 0);

  /* "src/ctp_trader.pyx":169
 * 
 *     def insert_limit_price_order(self, iid, direction, volume, price, offset_flags, hedge_flags, min_volume=1, volume_condition='1', time_condition='3', force_close_reason='0', auto_suspend=0, user_force_close=0, max_ref=None, park=False):
 *         from cyctp.ctp_struct import OrderRequest, ParkOrderRequest             # <<<<<<<<<<<<<<
 *         order_req = OrderRequest() if not park else ParkOrderRequest()
 *         memset(addressof(order_req), 0, csizeof(order_req))
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_OrderRequest);
  __Pyx_GIVEREF(__pyx_n_s_OrderRequest);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_OrderRequest);
  __Pyx_INCREF(__pyx_n_s_ParkOrderRequest);
  __Pyx_GIVEREF(__pyx_n_s_ParkOrderRequest);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_ParkOrderRequest);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_cyctp_ctp_struct, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_OrderRequest); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_OrderRequest = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_ParkOrderRequest); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_ParkOrderRequest = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/ctp_trader.pyx":170
 *     def insert_limit_price_order(self, iid, direction, volume, price, offset_flags, hedge_flags, min_volume=1, volume_condition='1', time_condition='3', force_close_reason='0', auto_suspend=0, user_force_close=0, max_ref=None, park=False):
 *         from cyctp.ctp_struct import OrderRequest, ParkOrderRequest
 *         order_req = OrderRequest() if not park else ParkOrderRequest()             # <<<<<<<<<<<<<<
 *         memset(addressof(order_req), 0, csizeof(order_req))
 *         order_req.InstrumentID = iid; order_req.OrderPriceType = '2' #ORDER_PRICE_TYPE_LIMIT
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_park); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 170, __pyx_L1_error)
  if (((!__pyx_t_3) != 0)) {
    __Pyx_INCREF(__pyx_v_OrderRequest);
    __pyx_t_4 = __pyx_v_OrderRequest; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 170, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 170, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __pyx_t_1;
    __pyx_t_1 = 0;
  } else {
    __Pyx_INCREF(__pyx_v_ParkOrderRequest);
    __pyx_t_4 = __pyx_v_ParkOrderRequest; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 170, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 170, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __pyx_t_1;
    __pyx_t_1 = 0;
  }
  __pyx_v_order_req = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "src/ctp_trader.pyx":171
 *         from cyctp.ctp_struct import OrderRequest, ParkOrderRequest
 *         order_req = OrderRequest() if not park else ParkOrderRequest()
 *         memset(addressof(order_req), 0, csizeof(order_req))             # <<<<<<<<<<<<<<
 *         order_req.InstrumentID = iid; order_req.OrderPriceType = '2' #ORDER_PRICE_TYPE_LIMIT
 *         order_req.OrderRef = max_ref if max_ref else self.inc_max_order_ref()
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_memset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_addressof); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_order_req); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 171, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_order_req};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 171, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_order_req};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 171, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 171, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_INCREF(__pyx_v_order_req);
      __Pyx_GIVEREF(__pyx_v_order_req);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_v_order_req);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 171, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_csizeof); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_order_req); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 171, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_order_req};
      __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 171, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_order_req};
      __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 171, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 171, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_INCREF(__pyx_v_order_req);
      __Pyx_GIVEREF(__pyx_v_order_req);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_v_order_req);
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_8, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 171, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_9 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_t_4, __pyx_int_0, __pyx_t_5};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_9, 3+__pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 171, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_t_4, __pyx_int_0, __pyx_t_5};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_9, 3+__pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 171, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(3+__pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 171, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_9, __pyx_t_4);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_9, __pyx_int_0);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_8, 2+__pyx_t_9, __pyx_t_5);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 171, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/ctp_trader.pyx":172
 *         order_req = OrderRequest() if not park else ParkOrderRequest()
 *         memset(addressof(order_req), 0, csizeof(order_req))
 *         order_req.InstrumentID = iid; order_req.OrderPriceType = '2' #ORDER_PRICE_TYPE_LIMIT             # <<<<<<<<<<<<<<
 *         order_req.OrderRef = max_ref if max_ref else self.inc_max_order_ref()
 *         order_req.Direction = direction; order_req.CombOffsetFlag = ''.join(offset_flags)
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_order_req, __pyx_n_s_InstrumentID, __pyx_v_iid) < 0) __PYX_ERR(0, 172, __pyx_L1_error)
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_order_req, __pyx_n_s_OrderPriceType, __pyx_kp_s_2) < 0) __PYX_ERR(0, 172, __pyx_L1_error)

  /* "src/ctp_trader.pyx":173
 *         memset(addressof(order_req), 0, csizeof(order_req))
 *         order_req.InstrumentID = iid; order_req.OrderPriceType = '2' #ORDER_PRICE_TYPE_LIMIT
 *         order_req.OrderRef = max_ref if max_ref else self.inc_max_order_ref()             # <<<<<<<<<<<<<<
 *         order_req.Direction = direction; order_req.CombOffsetFlag = ''.join(offset_flags)
 *         order_req.CombHedgeFlag = ''.join(hedge_flags); order_req.VolumeTotalOriginal = volume
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_max_ref); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 173, __pyx_L1_error)
  if (__pyx_t_3) {
    __Pyx_INCREF(__pyx_v_max_ref);
    __pyx_t_2 = __pyx_v_max_ref;
  } else {
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_inc_max_order_ref); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 173, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 173, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 173, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_2 = __pyx_t_1;
    __pyx_t_1 = 0;
  }
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_order_req, __pyx_n_s_OrderRef, __pyx_t_2) < 0) __PYX_ERR(0, 173, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/ctp_trader.pyx":174
 *         order_req.InstrumentID = iid; order_req.OrderPriceType = '2' #ORDER_PRICE_TYPE_LIMIT
 *         order_req.OrderRef = max_ref if max_ref else self.inc_max_order_ref()
 *         order_req.Direction = direction; order_req.CombOffsetFlag = ''.join(offset_flags)             # <<<<<<<<<<<<<<
 *         order_req.CombHedgeFlag = ''.join(hedge_flags); order_req.VolumeTotalOriginal = volume
 *         order_req.LimitPrice = price; order_req.VolumeCondition = volume_condition #VOLUME_CONDITION_ANY
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_order_req, __pyx_n_s_Direction, __pyx_v_direction) < 0) __PYX_ERR(0, 174, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyString_Join(__pyx_kp_s__2, __pyx_v_offset_flags); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_order_req, __pyx_n_s_CombOffsetFlag, __pyx_t_2) < 0) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/ctp_trader.pyx":175
 *         order_req.OrderRef = max_ref if max_ref else self.inc_max_order_ref()
 *         order_req.Direction = direction; order_req.CombOffsetFlag = ''.join(offset_flags)
 *         order_req.CombHedgeFlag = ''.join(hedge_flags); order_req.VolumeTotalOriginal = volume             # <<<<<<<<<<<<<<
 *         order_req.LimitPrice = price; order_req.VolumeCondition = volume_condition #VOLUME_CONDITION_ANY
 *         order_req.MinVolume = min_volume; order_req.ForceCloseReason = force_close_reason #FORCE_CLOSE_NOT
 */
  __pyx_t_2 = __Pyx_PyString_Join(__pyx_kp_s__2, __pyx_v_hedge_flags); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_order_req, __pyx_n_s_CombHedgeFlag, __pyx_t_2) < 0) __PYX_ERR(0, 175, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_order_req, __pyx_n_s_VolumeTotalOriginal, __pyx_v_volume) < 0) __PYX_ERR(0, 175, __pyx_L1_error)

  /* "src/ctp_trader.pyx":176
 *         order_req.Direction = direction; order_req.CombOffsetFlag = ''.join(offset_flags)
 *         order_req.CombHedgeFlag = ''.join(hedge_flags); order_req.VolumeTotalOriginal = volume
 *         order_req.LimitPrice = price; order_req.VolumeCondition = volume_condition #VOLUME_CONDITION_ANY             # <<<<<<<<<<<<<<
 *         order_req.MinVolume = min_volume; order_req.ForceCloseReason = force_close_reason #FORCE_CLOSE_NOT
 *         order_req.IsAutoSuspend = auto_suspend; order_req.UserForceClose = user_force_close
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_order_req, __pyx_n_s_LimitPrice, __pyx_v_price) < 0) __PYX_ERR(0, 176, __pyx_L1_error)
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_order_req, __pyx_n_s_VolumeCondition, __pyx_v_volume_condition) < 0) __PYX_ERR(0, 176, __pyx_L1_error)

  /* "src/ctp_trader.pyx":177
 *         order_req.CombHedgeFlag = ''.join(hedge_flags); order_req.VolumeTotalOriginal = volume
 *         order_req.LimitPrice = price; order_req.VolumeCondition = volume_condition #VOLUME_CONDITION_ANY
 *         order_req.MinVolume = min_volume; order_req.ForceCloseReason = force_close_reason #FORCE_CLOSE_NOT             # <<<<<<<<<<<<<<
 *         order_req.IsAutoSuspend = auto_suspend; order_req.UserForceClose = user_force_close
 *         order_req.TimeCondition = time_condition; order_req.ContingentCondition = '1' #CONDITION_TRIGGER_IMMEDIATELY
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_order_req, __pyx_n_s_MinVolume, __pyx_v_min_volume) < 0) __PYX_ERR(0, 177, __pyx_L1_error)
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_order_req, __pyx_n_s_ForceCloseReason, __pyx_v_force_close_reason) < 0) __PYX_ERR(0, 177, __pyx_L1_error)

  /* "src/ctp_trader.pyx":178
 *         order_req.LimitPrice = price; order_req.VolumeCondition = volume_condition #VOLUME_CONDITION_ANY
 *         order_req.MinVolume = min_volume; order_req.ForceCloseReason = force_close_reason #FORCE_CLOSE_NOT
 *         order_req.IsAutoSuspend = auto_suspend; order_req.UserForceClose = user_force_close             # <<<<<<<<<<<<<<
 *         order_req.TimeCondition = time_condition; order_req.ContingentCondition = '1' #CONDITION_TRIGGER_IMMEDIATELY
 *         cdef unsigned int addr = addressof(order_req) #byref(order_req) #
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_order_req, __pyx_n_s_IsAutoSuspend, __pyx_v_auto_suspend) < 0) __PYX_ERR(0, 178, __pyx_L1_error)
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_order_req, __pyx_n_s_UserForceClose, __pyx_v_user_force_close) < 0) __PYX_ERR(0, 178, __pyx_L1_error)

  /* "src/ctp_trader.pyx":179
 *         order_req.MinVolume = min_volume; order_req.ForceCloseReason = force_close_reason #FORCE_CLOSE_NOT
 *         order_req.IsAutoSuspend = auto_suspend; order_req.UserForceClose = user_force_close
 *         order_req.TimeCondition = time_condition; order_req.ContingentCondition = '1' #CONDITION_TRIGGER_IMMEDIATELY             # <<<<<<<<<<<<<<
 *         cdef unsigned int addr = addressof(order_req) #byref(order_req) #
 *         return self.collector.InsertOrder(<CThostFtdcInputOrderField*>addr) if not park else self.collector.InsertParkOrder(<CThostFtdcParkedOrderField*>addr)
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_order_req, __pyx_n_s_TimeCondition, __pyx_v_time_condition) < 0) __PYX_ERR(0, 179, __pyx_L1_error)
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_order_req, __pyx_n_s_ContingentCondition, __pyx_kp_s_1) < 0) __PYX_ERR(0, 179, __pyx_L1_error)

  /* "src/ctp_trader.pyx":180
 *         order_req.IsAutoSuspend = auto_suspend; order_req.UserForceClose = user_force_close
 *         order_req.TimeCondition = time_condition; order_req.ContingentCondition = '1' #CONDITION_TRIGGER_IMMEDIATELY
 *         cdef unsigned int addr = addressof(order_req) #byref(order_req) #             # <<<<<<<<<<<<<<
 *         return self.collector.InsertOrder(<CThostFtdcInputOrderField*>addr) if not park else self.collector.InsertParkOrder(<CThostFtdcParkedOrderField*>addr)
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_addressof); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_8) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_order_req); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_v_order_req};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 180, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_v_order_req};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 180, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 180, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_8); __pyx_t_8 = NULL;
      __Pyx_INCREF(__pyx_v_order_req);
      __Pyx_GIVEREF(__pyx_v_order_req);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_order_req);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 180, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_10 = __Pyx_PyInt_As_unsigned_int(__pyx_t_2); if (unlikely((__pyx_t_10 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_addr = __pyx_t_10;

  /* "src/ctp_trader.pyx":181
 *         order_req.TimeCondition = time_condition; order_req.ContingentCondition = '1' #CONDITION_TRIGGER_IMMEDIATELY
 *         cdef unsigned int addr = addressof(order_req) #byref(order_req) #
 *         return self.collector.InsertOrder(<CThostFtdcInputOrderField*>addr) if not park else self.collector.InsertParkOrder(<CThostFtdcParkedOrderField*>addr)             # <<<<<<<<<<<<<<
 * 
 *     def insert_market_price_order(self, iid, direction, volume, offset_flags, hedge_flags, min_volume=1, volume_condition='1', time_condition='1', force_close_reason='0', auto_suspend=0, user_force_close=0, max_ref=None, park=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_park); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 181, __pyx_L1_error)
  if (((!__pyx_t_3) != 0)) {
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->collector->InsertOrder(((struct CThostFtdcInputOrderField *)__pyx_v_addr))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_t_1;
    __pyx_t_1 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->collector->InsertParkOrder(((struct CThostFtdcParkedOrderField *)__pyx_v_addr))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_t_1;
    __pyx_t_1 = 0;
  }
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":168
 *         pass
 * 
 *     def insert_limit_price_order(self, iid, direction, volume, price, offset_flags, hedge_flags, min_volume=1, volume_condition='1', time_condition='3', force_close_reason='0', auto_suspend=0, user_force_close=0, max_ref=None, park=False):             # <<<<<<<<<<<<<<
 *         from cyctp.ctp_struct import OrderRequest, ParkOrderRequest
 *         order_req = OrderRequest() if not park else ParkOrderRequest()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.insert_limit_price_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_OrderRequest);
  __Pyx_XDECREF(__pyx_v_ParkOrderRequest);
  __Pyx_XDECREF(__pyx_v_order_req);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":183
 *         return self.collector.InsertOrder(<CThostFtdcInputOrderField*>addr) if not park else self.collector.InsertParkOrder(<CThostFtdcParkedOrderField*>addr)
 * 
 *     def insert_market_price_order(self, iid, direction, volume, offset_flags, hedge_flags, min_volume=1, volume_condition='1', time_condition='1', force_close_reason='0', auto_suspend=0, user_force_close=0, max_ref=None, park=False):             # <<<<<<<<<<<<<<
 *         from cyctp.ctp_struct import OrderRequest, ParkOrderRequest
 *         order_req = OrderRequest() if not park else ParkOrderRequest()
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_99insert_market_price_order(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_99insert_market_price_order(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_iid = 0;
  PyObject *__pyx_v_direction = 0;
  PyObject *__pyx_v_volume = 0;
  PyObject *__pyx_v_offset_flags = 0;
  PyObject *__pyx_v_hedge_flags = 0;
  PyObject *__pyx_v_min_volume = 0;
  PyObject *__pyx_v_volume_condition = 0;
  PyObject *__pyx_v_time_condition = 0;
  PyObject *__pyx_v_force_close_reason = 0;
  PyObject *__pyx_v_auto_suspend = 0;
  PyObject *__pyx_v_user_force_close = 0;
  PyObject *__pyx_v_max_ref = 0;
  PyObject *__pyx_v_park = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("insert_market_price_order (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_iid,&__pyx_n_s_direction,&__pyx_n_s_volume,&__pyx_n_s_offset_flags,&__pyx_n_s_hedge_flags,&__pyx_n_s_min_volume,&__pyx_n_s_volume_condition,&__pyx_n_s_time_condition,&__pyx_n_s_force_close_reason,&__pyx_n_s_auto_suspend,&__pyx_n_s_user_force_close,&__pyx_n_s_max_ref,&__pyx_n_s_park,0};
    PyObject* values[13] = {0,0,0,0,0,0,0,0,0,0,0,0,0};
    values[5] = ((PyObject *)__pyx_int_1);
    values[6] = ((PyObject *)__pyx_kp_s_1);
    values[7] = ((PyObject *)__pyx_kp_s_1);
    values[8] = ((PyObject *)__pyx_kp_s_0);
    values[9] = ((PyObject *)__pyx_int_0);
    values[10] = ((PyObject *)__pyx_int_0);
    values[11] = ((PyObject *)Py_None);
    values[12] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_iid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_direction)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("insert_market_price_order", 0, 5, 13, 1); __PYX_ERR(0, 183, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_volume)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("insert_market_price_order", 0, 5, 13, 2); __PYX_ERR(0, 183, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_offset_flags)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("insert_market_price_order", 0, 5, 13, 3); __PYX_ERR(0, 183, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_hedge_flags)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("insert_market_price_order", 0, 5, 13, 4); __PYX_ERR(0, 183, __pyx_L3_error)
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_min_volume);
          if (value) { values[5] = value; kw_args--; }
        }
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_volume_condition);
          if (value) { values[6] = value; kw_args--; }
        }
        case  7:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_time_condition);
          if (value) { values[7] = value; kw_args--; }
        }
        case  8:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_force_close_reason);
          if (value) { values[8] = value; kw_args--; }
        }
        case  9:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_auto_suspend);
          if (value) { values[9] = value; kw_args--; }
        }
        case 10:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_user_force_close);
          if (value) { values[10] = value; kw_args--; }
        }
        case 11:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_ref);
          if (value) { values[11] = value; kw_args--; }
        }
        case 12:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_park);
          if (value) { values[12] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "insert_market_price_order") < 0)) __PYX_ERR(0, 183, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_iid = values[0];
    __pyx_v_direction = values[1];
    __pyx_v_volume = values[2];
    __pyx_v_offset_flags = values[3];
    __pyx_v_hedge_flags = values[4];
    __pyx_v_min_volume = values[5];
    __pyx_v_volume_condition = values[6];
    __pyx_v_time_condition = values[7];
    __pyx_v_force_close_reason = values[8];
    __pyx_v_auto_suspend = values[9];
    __pyx_v_user_force_close = values[10];
    __pyx_v_max_ref = values[11];
    __pyx_v_park = values[12];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("insert_market_price_order", 0, 5, 13, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 183, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.insert_market_price_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_98insert_market_price_order(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self), __pyx_v_iid, __pyx_v_direction, __pyx_v_volume, __pyx_v_offset_flags, __pyx_v_hedge_flags, __pyx_v_min_volume, __pyx_v_volume_condition, __pyx_v_time_condition, __pyx_v_force_close_reason, __pyx_v_auto_suspend, __pyx_v_user_force_close, __pyx_v_max_ref, __pyx_v_park);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_98insert_market_price_order(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_iid, PyObject *__pyx_v_direction, PyObject *__pyx_v_volume, PyObject *__pyx_v_offset_flags, PyObject *__pyx_v_hedge_flags, PyObject *__pyx_v_min_volume, PyObject *__pyx_v_volume_condition, PyObject *__pyx_v_time_condition, PyObject *__pyx_v_force_close_reason, PyObject *__pyx_v_auto_suspend, PyObject *__pyx_v_user_force_close, PyObject *__pyx_v_max_ref, PyObject *__pyx_v_park) {
  PyObject *__pyx_v_OrderRequest = NULL;
  PyObject *__pyx_v_ParkOrderRequest = NULL;
  PyObject *__pyx_v_order_req = NULL;
  unsigned int __pyx_v_addr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  unsigned int __pyx_t_10;
  __Pyx_RefNannySetupContext("insert_market_price_order", 0);

  /* "src/ctp_trader.pyx":184
 * 
 *     def insert_market_price_order(self, iid, direction, volume, offset_flags, hedge_flags, min_volume=1, volume_condition='1', time_condition='1', force_close_reason='0', auto_suspend=0, user_force_close=0, max_ref=None, park=False):
 *         from cyctp.ctp_struct import OrderRequest, ParkOrderRequest             # <<<<<<<<<<<<<<
 *         order_req = OrderRequest() if not park else ParkOrderRequest()
 *         memset(addressof(order_req), 0, csizeof(order_req))
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_OrderRequest);
  __Pyx_GIVEREF(__pyx_n_s_OrderRequest);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_OrderRequest);
  __Pyx_INCREF(__pyx_n_s_ParkOrderRequest);
  __Pyx_GIVEREF(__pyx_n_s_ParkOrderRequest);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_ParkOrderRequest);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_cyctp_ctp_struct, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_OrderRequest); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_OrderRequest = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_ParkOrderRequest); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_ParkOrderRequest = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/ctp_trader.pyx":185
 *     def insert_market_price_order(self, iid, direction, volume, offset_flags, hedge_flags, min_volume=1, volume_condition='1', time_condition='1', force_close_reason='0', auto_suspend=0, user_force_close=0, max_ref=None, park=False):
 *         from cyctp.ctp_struct import OrderRequest, ParkOrderRequest
 *         order_req = OrderRequest() if not park else ParkOrderRequest()             # <<<<<<<<<<<<<<
 *         memset(addressof(order_req), 0, csizeof(order_req))
 *         order_req.InstrumentID = iid; order_req.OrderPriceType = '1' #ORDER_PRICE_TYPE_ANY
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_park); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 185, __pyx_L1_error)
  if (((!__pyx_t_3) != 0)) {
    __Pyx_INCREF(__pyx_v_OrderRequest);
    __pyx_t_4 = __pyx_v_OrderRequest; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 185, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 185, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __pyx_t_1;
    __pyx_t_1 = 0;
  } else {
    __Pyx_INCREF(__pyx_v_ParkOrderRequest);
    __pyx_t_4 = __pyx_v_ParkOrderRequest; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 185, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 185, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __pyx_t_1;
    __pyx_t_1 = 0;
  }
  __pyx_v_order_req = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "src/ctp_trader.pyx":186
 *         from cyctp.ctp_struct import OrderRequest, ParkOrderRequest
 *         order_req = OrderRequest() if not park else ParkOrderRequest()
 *         memset(addressof(order_req), 0, csizeof(order_req))             # <<<<<<<<<<<<<<
 *         order_req.InstrumentID = iid; order_req.OrderPriceType = '1' #ORDER_PRICE_TYPE_ANY
 *         order_req.OrderRef = max_ref if max_ref else self.inc_max_order_ref()
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_memset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_addressof); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_order_req); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 186, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_order_req};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 186, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_order_req};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 186, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 186, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_INCREF(__pyx_v_order_req);
      __Pyx_GIVEREF(__pyx_v_order_req);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_v_order_req);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 186, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_csizeof); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_order_req); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 186, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_order_req};
      __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 186, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_order_req};
      __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 186, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 186, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_INCREF(__pyx_v_order_req);
      __Pyx_GIVEREF(__pyx_v_order_req);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_v_order_req);
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_8, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 186, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_9 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_t_4, __pyx_int_0, __pyx_t_5};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_9, 3+__pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 186, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_t_4, __pyx_int_0, __pyx_t_5};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_9, 3+__pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 186, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(3+__pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 186, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_9, __pyx_t_4);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_9, __pyx_int_0);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_8, 2+__pyx_t_9, __pyx_t_5);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 186, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/ctp_trader.pyx":187
 *         order_req = OrderRequest() if not park else ParkOrderRequest()
 *         memset(addressof(order_req), 0, csizeof(order_req))
 *         order_req.InstrumentID = iid; order_req.OrderPriceType = '1' #ORDER_PRICE_TYPE_ANY             # <<<<<<<<<<<<<<
 *         order_req.OrderRef = max_ref if max_ref else self.inc_max_order_ref()
 *         order_req.Direction = direction; order_req.CombOffsetFlag = ''.join(offset_flags)
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_order_req, __pyx_n_s_InstrumentID, __pyx_v_iid) < 0) __PYX_ERR(0, 187, __pyx_L1_error)
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_order_req, __pyx_n_s_OrderPriceType, __pyx_kp_s_1) < 0) __PYX_ERR(0, 187, __pyx_L1_error)

  /* "src/ctp_trader.pyx":188
 *         memset(addressof(order_req), 0, csizeof(order_req))
 *         order_req.InstrumentID = iid; order_req.OrderPriceType = '1' #ORDER_PRICE_TYPE_ANY
 *         order_req.OrderRef = max_ref if max_ref else self.inc_max_order_ref()             # <<<<<<<<<<<<<<
 *         order_req.Direction = direction; order_req.CombOffsetFlag = ''.join(offset_flags)
 *         order_req.CombHedgeFlag = ''.join(hedge_flags); order_req.VolumeTotalOriginal = volume
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_max_ref); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 188, __pyx_L1_error)
  if (__pyx_t_3) {
    __Pyx_INCREF(__pyx_v_max_ref);
    __pyx_t_2 = __pyx_v_max_ref;
  } else {
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_inc_max_order_ref); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 188, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 188, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 188, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_2 = __pyx_t_1;
    __pyx_t_1 = 0;
  }
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_order_req, __pyx_n_s_OrderRef, __pyx_t_2) < 0) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/ctp_trader.pyx":189
 *         order_req.InstrumentID = iid; order_req.OrderPriceType = '1' #ORDER_PRICE_TYPE_ANY
 *         order_req.OrderRef = max_ref if max_ref else self.inc_max_order_ref()
 *         order_req.Direction = direction; order_req.CombOffsetFlag = ''.join(offset_flags)             # <<<<<<<<<<<<<<
 *         order_req.CombHedgeFlag = ''.join(hedge_flags); order_req.VolumeTotalOriginal = volume
 *         order_req.LimitPrice = 0; order_req.VolumeCondition = volume_condition #VOLUME_CONDITION_ANY
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_order_req, __pyx_n_s_Direction, __pyx_v_direction) < 0) __PYX_ERR(0, 189, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyString_Join(__pyx_kp_s__2, __pyx_v_offset_flags); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_order_req, __pyx_n_s_CombOffsetFlag, __pyx_t_2) < 0) __PYX_ERR(0, 189, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/ctp_trader.pyx":190
 *         order_req.OrderRef = max_ref if max_ref else self.inc_max_order_ref()
 *         order_req.Direction = direction; order_req.CombOffsetFlag = ''.join(offset_flags)
 *         order_req.CombHedgeFlag = ''.join(hedge_flags); order_req.VolumeTotalOriginal = volume             # <<<<<<<<<<<<<<
 *         order_req.LimitPrice = 0; order_req.VolumeCondition = volume_condition #VOLUME_CONDITION_ANY
 *         order_req.MinVolume = min_volume; order_req.ForceCloseReason = force_close_reason #FORCE_CLOSE_NOT
 */
  __pyx_t_2 = __Pyx_PyString_Join(__pyx_kp_s__2, __pyx_v_hedge_flags); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_order_req, __pyx_n_s_CombHedgeFlag, __pyx_t_2) < 0) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_order_req, __pyx_n_s_VolumeTotalOriginal, __pyx_v_volume) < 0) __PYX_ERR(0, 190, __pyx_L1_error)

  /* "src/ctp_trader.pyx":191
 *         order_req.Direction = direction; order_req.CombOffsetFlag = ''.join(offset_flags)
 *         order_req.CombHedgeFlag = ''.join(hedge_flags); order_req.VolumeTotalOriginal = volume
 *         order_req.LimitPrice = 0; order_req.VolumeCondition = volume_condition #VOLUME_CONDITION_ANY             # <<<<<<<<<<<<<<
 *         order_req.MinVolume = min_volume; order_req.ForceCloseReason = force_close_reason #FORCE_CLOSE_NOT
 *         order_req.IsAutoSuspend = auto_suspend; order_req.UserForceClose = user_force_close
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_order_req, __pyx_n_s_LimitPrice, __pyx_int_0) < 0) __PYX_ERR(0, 191, __pyx_L1_error)
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_order_req, __pyx_n_s_VolumeCondition, __pyx_v_volume_condition) < 0) __PYX_ERR(0, 191, __pyx_L1_error)

  /* "src/ctp_trader.pyx":192
 *         order_req.CombHedgeFlag = ''.join(hedge_flags); order_req.VolumeTotalOriginal = volume
 *         order_req.LimitPrice = 0; order_req.VolumeCondition = volume_condition #VOLUME_CONDITION_ANY
 *         order_req.MinVolume = min_volume; order_req.ForceCloseReason = force_close_reason #FORCE_CLOSE_NOT             # <<<<<<<<<<<<<<
 *         order_req.IsAutoSuspend = auto_suspend; order_req.UserForceClose = user_force_close
 *         order_req.TimeCondition = time_condition; order_req.ContingentCondition = '1' #CONDITION_TRIGGER_IMMEDIATELY
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_order_req, __pyx_n_s_MinVolume, __pyx_v_min_volume) < 0) __PYX_ERR(0, 192, __pyx_L1_error)
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_order_req, __pyx_n_s_ForceCloseReason, __pyx_v_force_close_reason) < 0) __PYX_ERR(0, 192, __pyx_L1_error)

  /* "src/ctp_trader.pyx":193
 *         order_req.LimitPrice = 0; order_req.VolumeCondition = volume_condition #VOLUME_CONDITION_ANY
 *         order_req.MinVolume = min_volume; order_req.ForceCloseReason = force_close_reason #FORCE_CLOSE_NOT
 *         order_req.IsAutoSuspend = auto_suspend; order_req.UserForceClose = user_force_close             # <<<<<<<<<<<<<<
 *         order_req.TimeCondition = time_condition; order_req.ContingentCondition = '1' #CONDITION_TRIGGER_IMMEDIATELY
 *         cdef unsigned int addr = addressof(order_req) #byref(order_req) #
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_order_req, __pyx_n_s_IsAutoSuspend, __pyx_v_auto_suspend) < 0) __PYX_ERR(0, 193, __pyx_L1_error)
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_order_req, __pyx_n_s_UserForceClose, __pyx_v_user_force_close) < 0) __PYX_ERR(0, 193, __pyx_L1_error)

  /* "src/ctp_trader.pyx":194
 *         order_req.MinVolume = min_volume; order_req.ForceCloseReason = force_close_reason #FORCE_CLOSE_NOT
 *         order_req.IsAutoSuspend = auto_suspend; order_req.UserForceClose = user_force_close
 *         order_req.TimeCondition = time_condition; order_req.ContingentCondition = '1' #CONDITION_TRIGGER_IMMEDIATELY             # <<<<<<<<<<<<<<
 *         cdef unsigned int addr = addressof(order_req) #byref(order_req) #
 *         return self.collector.InsertOrder(<CThostFtdcInputOrderField*>addr) if not park else self.collector.InsertParkOrder(<CThostFtdcParkedOrderField*>addr)
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_order_req, __pyx_n_s_TimeCondition, __pyx_v_time_condition) < 0) __PYX_ERR(0, 194, __pyx_L1_error)
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_order_req, __pyx_n_s_ContingentCondition, __pyx_kp_s_1) < 0) __PYX_ERR(0, 194, __pyx_L1_error)

  /* "src/ctp_trader.pyx":195
 *         order_req.IsAutoSuspend = auto_suspend; order_req.UserForceClose = user_force_close
 *         order_req.TimeCondition = time_condition; order_req.ContingentCondition = '1' #CONDITION_TRIGGER_IMMEDIATELY
 *         cdef unsigned int addr = addressof(order_req) #byref(order_req) #             # <<<<<<<<<<<<<<
 *         return self.collector.InsertOrder(<CThostFtdcInputOrderField*>addr) if not park else self.collector.InsertParkOrder(<CThostFtdcParkedOrderField*>addr)
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_addressof); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_8) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_order_req); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 195, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_v_order_req};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 195, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_v_order_req};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 195, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 195, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_8); __pyx_t_8 = NULL;
      __Pyx_INCREF(__pyx_v_order_req);
      __Pyx_GIVEREF(__pyx_v_order_req);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_order_req);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 195, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_10 = __Pyx_PyInt_As_unsigned_int(__pyx_t_2); if (unlikely((__pyx_t_10 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_addr = __pyx_t_10;

  /* "src/ctp_trader.pyx":196
 *         order_req.TimeCondition = time_condition; order_req.ContingentCondition = '1' #CONDITION_TRIGGER_IMMEDIATELY
 *         cdef unsigned int addr = addressof(order_req) #byref(order_req) #
 *         return self.collector.InsertOrder(<CThostFtdcInputOrderField*>addr) if not park else self.collector.InsertParkOrder(<CThostFtdcParkedOrderField*>addr)             # <<<<<<<<<<<<<<
 * 
 *     def insert_condition_order(self, iid, direction, volume, stop_price, contingent_condition, time_condition, offset_flags, hedge_flags, date=None, price=None, min_volume=1, volume_condition='1', force_close_reason='0', auto_suspend=0, user_force_close=0, max_ref=None, park=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_park); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 196, __pyx_L1_error)
  if (((!__pyx_t_3) != 0)) {
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->collector->InsertOrder(((struct CThostFtdcInputOrderField *)__pyx_v_addr))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 196, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_t_1;
    __pyx_t_1 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->collector->InsertParkOrder(((struct CThostFtdcParkedOrderField *)__pyx_v_addr))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 196, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_t_1;
    __pyx_t_1 = 0;
  }
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":183
 *         return self.collector.InsertOrder(<CThostFtdcInputOrderField*>addr) if not park else self.collector.InsertParkOrder(<CThostFtdcParkedOrderField*>addr)
 * 
 *     def insert_market_price_order(self, iid, direction, volume, offset_flags, hedge_flags, min_volume=1, volume_condition='1', time_condition='1', force_close_reason='0', auto_suspend=0, user_force_close=0, max_ref=None, park=False):             # <<<<<<<<<<<<<<
 *         from cyctp.ctp_struct import OrderRequest, ParkOrderRequest
 *         order_req = OrderRequest() if not park else ParkOrderRequest()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.insert_market_price_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_OrderRequest);
  __Pyx_XDECREF(__pyx_v_ParkOrderRequest);
  __Pyx_XDECREF(__pyx_v_order_req);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":198
 *         return self.collector.InsertOrder(<CThostFtdcInputOrderField*>addr) if not park else self.collector.InsertParkOrder(<CThostFtdcParkedOrderField*>addr)
 * 
 *     def insert_condition_order(self, iid, direction, volume, stop_price, contingent_condition, time_condition, offset_flags, hedge_flags, date=None, price=None, min_volume=1, volume_condition='1', force_close_reason='0', auto_suspend=0, user_force_close=0, max_ref=None, park=False):             # <<<<<<<<<<<<<<
 *         from cyctp.ctp_struct import OrderRequest, ParkOrderRequest
 *         order_req = OrderRequest() if not park else ParkOrderRequest()
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_101insert_condition_order(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_101insert_condition_order(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_iid = 0;
  PyObject *__pyx_v_direction = 0;
  PyObject *__pyx_v_volume = 0;
  PyObject *__pyx_v_stop_price = 0;
  PyObject *__pyx_v_contingent_condition = 0;
  PyObject *__pyx_v_time_condition = 0;
  PyObject *__pyx_v_offset_flags = 0;
  PyObject *__pyx_v_hedge_flags = 0;
  PyObject *__pyx_v_date = 0;
  PyObject *__pyx_v_price = 0;
  PyObject *__pyx_v_min_volume = 0;
  PyObject *__pyx_v_volume_condition = 0;
  PyObject *__pyx_v_force_close_reason = 0;
  PyObject *__pyx_v_auto_suspend = 0;
  PyObject *__pyx_v_user_force_close = 0;
  PyObject *__pyx_v_max_ref = 0;
  PyObject *__pyx_v_park = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("insert_condition_order (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_iid,&__pyx_n_s_direction,&__pyx_n_s_volume,&__pyx_n_s_stop_price,&__pyx_n_s_contingent_condition,&__pyx_n_s_time_condition,&__pyx_n_s_offset_flags,&__pyx_n_s_hedge_flags,&__pyx_n_s_date,&__pyx_n_s_price,&__pyx_n_s_min_volume,&__pyx_n_s_volume_condition,&__pyx_n_s_force_close_reason,&__pyx_n_s_auto_suspend,&__pyx_n_s_user_force_close,&__pyx_n_s_max_ref,&__pyx_n_s_park,0};
    PyObject* values[17] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    values[8] = ((PyObject *)Py_None);
    values[9] = ((PyObject *)Py_None);
    values[10] = ((PyObject *)__pyx_int_1);
    values[11] = ((PyObject *)__pyx_kp_s_1);
    values[12] = ((PyObject *)__pyx_kp_s_0);
    values[13] = ((PyObject *)__pyx_int_0);
    values[14] = ((PyObject *)__pyx_int_0);
    values[15] = ((PyObject *)Py_None);
    values[16] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_iid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_direction)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("insert_condition_order", 0, 8, 17, 1); __PYX_ERR(0, 198, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_volume)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("insert_condition_order", 0, 8, 17, 2); __PYX_ERR(0, 198, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stop_price)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("insert_condition_order", 0, 8, 17, 3); __PYX_ERR(0, 198, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_contingent_condition)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("insert_condition_order", 0, 8, 17, 4); __PYX_ERR(0, 198, __pyx_L3_error)
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_time_condition)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("insert_condition_order", 0, 8, 17, 5); __PYX_ERR(0, 198, __pyx_L3_error)
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_offset_flags)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("insert_condition_order", 0, 8, 17, 6); __PYX_ERR(0, 198, __pyx_L3_error)
        }
        case  7:
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_hedge_flags)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("insert_condition_order", 0, 8, 17, 7); __PYX_ERR(0, 198, __pyx_L3_error)
        }
        case  8:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_date);
          if (value) { values[8] = value; kw_args--; }
        }
        case  9:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_price);
          if (value) { values[9] = value; kw_args--; }
        }
        case 10:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_min_volume);
          if (value) { values[10] = value; kw_args--; }
        }
        case 11:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_volume_condition);
          if (value) { values[11] = value; kw_args--; }
        }
        case 12:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_force_close_reason);
          if (value) { values[12] = value; kw_args--; }
        }
        case 13:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_auto_suspend);
          if (value) { values[13] = value; kw_args--; }
        }
        case 14:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_user_force_close);
          if (value) { values[14] = value; kw_args--; }
        }
        case 15:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_ref);
          if (value) { values[15] = value; kw_args--; }
        }
        case 16:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_park);
          if (value) { values[16] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "insert_condition_order") < 0)) __PYX_ERR(0, 198, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_iid = values[0];
    __pyx_v_direction = values[1];
    __pyx_v_volume = values[2];
    __pyx_v_stop_price = values[3];
    __pyx_v_contingent_condition = values[4];
    __pyx_v_time_condition = values[5];
    __pyx_v_offset_flags = values[6];
    __pyx_v_hedge_flags = values[7];
    __pyx_v_date = values[8];
    __pyx_v_price = values[9];
    __pyx_v_min_volume = values[10];
    __pyx_v_volume_condition = values[11];
    __pyx_v_force_close_reason = values[12];
    __pyx_v_auto_suspend = values[13];
    __pyx_v_user_force_close = values[14];
    __pyx_v_max_ref = values[15];
    __pyx_v_park = values[16];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("insert_condition_order", 0, 8, 17, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 198, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.insert_condition_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_100insert_condition_order(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self), __pyx_v_iid, __pyx_v_direction, __pyx_v_volume, __pyx_v_stop_price, __pyx_v_contingent_condition, __pyx_v_time_condition, __pyx_v_offset_flags, __pyx_v_hedge_flags, __pyx_v_date, __pyx_v_price, __pyx_v_min_volume, __pyx_v_volume_condition, __pyx_v_force_close_reason, __pyx_v_auto_suspend, __pyx_v_user_force_close, __pyx_v_max_ref, __pyx_v_park);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_100insert_condition_order(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_iid, PyObject *__pyx_v_direction, PyObject *__pyx_v_volume, PyObject *__pyx_v_stop_price, PyObject *__pyx_v_contingent_condition, PyObject *__pyx_v_time_condition, PyObject *__pyx_v_offset_flags, PyObject *__pyx_v_hedge_flags, PyObject *__pyx_v_date, PyObject *__pyx_v_price, PyObject *__pyx_v_min_volume, PyObject *__pyx_v_volume_condition, PyObject *__pyx_v_force_close_reason, PyObject *__pyx_v_auto_suspend, PyObject *__pyx_v_user_force_close, PyObject *__pyx_v_max_ref, PyObject *__pyx_v_park) {
  PyObject *__pyx_v_OrderRequest = NULL;
  PyObject *__pyx_v_ParkOrderRequest = NULL;
  PyObject *__pyx_v_order_req = NULL;
  unsigned int __pyx_v_addr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  unsigned int __pyx_t_11;
  __Pyx_RefNannySetupContext("insert_condition_order", 0);

  /* "src/ctp_trader.pyx":199
 * 
 *     def insert_condition_order(self, iid, direction, volume, stop_price, contingent_condition, time_condition, offset_flags, hedge_flags, date=None, price=None, min_volume=1, volume_condition='1', force_close_reason='0', auto_suspend=0, user_force_close=0, max_ref=None, park=False):
 *         from cyctp.ctp_struct import OrderRequest, ParkOrderRequest             # <<<<<<<<<<<<<<
 *         order_req = OrderRequest() if not park else ParkOrderRequest()
 *         memset(addressof(order_req), 0, csizeof(order_req))
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_OrderRequest);
  __Pyx_GIVEREF(__pyx_n_s_OrderRequest);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_OrderRequest);
  __Pyx_INCREF(__pyx_n_s_ParkOrderRequest);
  __Pyx_GIVEREF(__pyx_n_s_ParkOrderRequest);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_ParkOrderRequest);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_cyctp_ctp_struct, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_OrderRequest); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_OrderRequest = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_ParkOrderRequest); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_ParkOrderRequest = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/ctp_trader.pyx":200
 *     def insert_condition_order(self, iid, direction, volume, stop_price, contingent_condition, time_condition, offset_flags, hedge_flags, date=None, price=None, min_volume=1, volume_condition='1', force_close_reason='0', auto_suspend=0, user_force_close=0, max_ref=None, park=False):
 *         from cyctp.ctp_struct import OrderRequest, ParkOrderRequest
 *         order_req = OrderRequest() if not park else ParkOrderRequest()             # <<<<<<<<<<<<<<
 *         memset(addressof(order_req), 0, csizeof(order_req))
 *         order_req.InstrumentID = iid; order_req.OrderPriceType = '2' #ORDER_PRICE_TYPE_LIMIT
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_park); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 200, __pyx_L1_error)
  if (((!__pyx_t_3) != 0)) {
    __Pyx_INCREF(__pyx_v_OrderRequest);
    __pyx_t_4 = __pyx_v_OrderRequest; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 200, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 200, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __pyx_t_1;
    __pyx_t_1 = 0;
  } else {
    __Pyx_INCREF(__pyx_v_ParkOrderRequest);
    __pyx_t_4 = __pyx_v_ParkOrderRequest; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 200, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 200, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __pyx_t_1;
    __pyx_t_1 = 0;
  }
  __pyx_v_order_req = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "src/ctp_trader.pyx":201
 *         from cyctp.ctp_struct import OrderRequest, ParkOrderRequest
 *         order_req = OrderRequest() if not park else ParkOrderRequest()
 *         memset(addressof(order_req), 0, csizeof(order_req))             # <<<<<<<<<<<<<<
 *         order_req.InstrumentID = iid; order_req.OrderPriceType = '2' #ORDER_PRICE_TYPE_LIMIT
 *         order_req.OrderRef = max_ref if max_ref else self.inc_max_order_ref()
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_memset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_addressof); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_order_req); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_order_req};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 201, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_order_req};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 201, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 201, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_INCREF(__pyx_v_order_req);
      __Pyx_GIVEREF(__pyx_v_order_req);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_v_order_req);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 201, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_csizeof); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_order_req); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_order_req};
      __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 201, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_order_req};
      __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 201, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 201, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_INCREF(__pyx_v_order_req);
      __Pyx_GIVEREF(__pyx_v_order_req);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_v_order_req);
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_8, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 201, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_9 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_t_4, __pyx_int_0, __pyx_t_5};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_9, 3+__pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 201, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_t_4, __pyx_int_0, __pyx_t_5};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_9, 3+__pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 201, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(3+__pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_9, __pyx_t_4);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_9, __pyx_int_0);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_8, 2+__pyx_t_9, __pyx_t_5);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/ctp_trader.pyx":202
 *         order_req = OrderRequest() if not park else ParkOrderRequest()
 *         memset(addressof(order_req), 0, csizeof(order_req))
 *         order_req.InstrumentID = iid; order_req.OrderPriceType = '2' #ORDER_PRICE_TYPE_LIMIT             # <<<<<<<<<<<<<<
 *         order_req.OrderRef = max_ref if max_ref else self.inc_max_order_ref()
 *         order_req.Direction = direction; order_req.CombOffsetFlag = ''.join(offset_flags)
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_order_req, __pyx_n_s_InstrumentID, __pyx_v_iid) < 0) __PYX_ERR(0, 202, __pyx_L1_error)
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_order_req, __pyx_n_s_OrderPriceType, __pyx_kp_s_2) < 0) __PYX_ERR(0, 202, __pyx_L1_error)

  /* "src/ctp_trader.pyx":203
 *         memset(addressof(order_req), 0, csizeof(order_req))
 *         order_req.InstrumentID = iid; order_req.OrderPriceType = '2' #ORDER_PRICE_TYPE_LIMIT
 *         order_req.OrderRef = max_ref if max_ref else self.inc_max_order_ref()             # <<<<<<<<<<<<<<
 *         order_req.Direction = direction; order_req.CombOffsetFlag = ''.join(offset_flags)
 *         order_req.CombHedgeFlag = ''.join(hedge_flags); order_req.VolumeTotalOriginal = volume
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_max_ref); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 203, __pyx_L1_error)
  if (__pyx_t_3) {
    __Pyx_INCREF(__pyx_v_max_ref);
    __pyx_t_2 = __pyx_v_max_ref;
  } else {
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_inc_max_order_ref); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 203, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 203, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 203, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_2 = __pyx_t_1;
    __pyx_t_1 = 0;
  }
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_order_req, __pyx_n_s_OrderRef, __pyx_t_2) < 0) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/ctp_trader.pyx":204
 *         order_req.InstrumentID = iid; order_req.OrderPriceType = '2' #ORDER_PRICE_TYPE_LIMIT
 *         order_req.OrderRef = max_ref if max_ref else self.inc_max_order_ref()
 *         order_req.Direction = direction; order_req.CombOffsetFlag = ''.join(offset_flags)             # <<<<<<<<<<<<<<
 *         order_req.CombHedgeFlag = ''.join(hedge_flags); order_req.VolumeTotalOriginal = volume
 *         order_req.StopPrice = stop_price; order_req.VolumeCondition = volume_condition #VOLUME_CONDITION_ANY
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_order_req, __pyx_n_s_Direction, __pyx_v_direction) < 0) __PYX_ERR(0, 204, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyString_Join(__pyx_kp_s__2, __pyx_v_offset_flags); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_order_req, __pyx_n_s_CombOffsetFlag, __pyx_t_2) < 0) __PYX_ERR(0, 204, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/ctp_trader.pyx":205
 *         order_req.OrderRef = max_ref if max_ref else self.inc_max_order_ref()
 *         order_req.Direction = direction; order_req.CombOffsetFlag = ''.join(offset_flags)
 *         order_req.CombHedgeFlag = ''.join(hedge_flags); order_req.VolumeTotalOriginal = volume             # <<<<<<<<<<<<<<
 *         order_req.StopPrice = stop_price; order_req.VolumeCondition = volume_condition #VOLUME_CONDITION_ANY
 *         order_req.MinVolume = min_volume; order_req.ForceCloseReason = force_close_reason #FORCE_CLOSE_NOT
 */
  __pyx_t_2 = __Pyx_PyString_Join(__pyx_kp_s__2, __pyx_v_hedge_flags); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_order_req, __pyx_n_s_CombHedgeFlag, __pyx_t_2) < 0) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_order_req, __pyx_n_s_VolumeTotalOriginal, __pyx_v_volume) < 0) __PYX_ERR(0, 205, __pyx_L1_error)

  /* "src/ctp_trader.pyx":206
 *         order_req.Direction = direction; order_req.CombOffsetFlag = ''.join(offset_flags)
 *         order_req.CombHedgeFlag = ''.join(hedge_flags); order_req.VolumeTotalOriginal = volume
 *         order_req.StopPrice = stop_price; order_req.VolumeCondition = volume_condition #VOLUME_CONDITION_ANY             # <<<<<<<<<<<<<<
 *         order_req.MinVolume = min_volume; order_req.ForceCloseReason = force_close_reason #FORCE_CLOSE_NOT
 *         order_req.IsAutoSuspend = auto_suspend; order_req.UserForceClose = user_force_close
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_order_req, __pyx_n_s_StopPrice, __pyx_v_stop_price) < 0) __PYX_ERR(0, 206, __pyx_L1_error)
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_order_req, __pyx_n_s_VolumeCondition, __pyx_v_volume_condition) < 0) __PYX_ERR(0, 206, __pyx_L1_error)

  /* "src/ctp_trader.pyx":207
 *         order_req.CombHedgeFlag = ''.join(hedge_flags); order_req.VolumeTotalOriginal = volume
 *         order_req.StopPrice = stop_price; order_req.VolumeCondition = volume_condition #VOLUME_CONDITION_ANY
 *         order_req.MinVolume = min_volume; order_req.ForceCloseReason = force_close_reason #FORCE_CLOSE_NOT             # <<<<<<<<<<<<<<
 *         order_req.IsAutoSuspend = auto_suspend; order_req.UserForceClose = user_force_close
 *         if date and time_condition == '4': order_req.GTDDate = date #TIME_CONDITION_GTILL_DAY
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_order_req, __pyx_n_s_MinVolume, __pyx_v_min_volume) < 0) __PYX_ERR(0, 207, __pyx_L1_error)
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_order_req, __pyx_n_s_ForceCloseReason, __pyx_v_force_close_reason) < 0) __PYX_ERR(0, 207, __pyx_L1_error)

  /* "src/ctp_trader.pyx":208
 *         order_req.StopPrice = stop_price; order_req.VolumeCondition = volume_condition #VOLUME_CONDITION_ANY
 *         order_req.MinVolume = min_volume; order_req.ForceCloseReason = force_close_reason #FORCE_CLOSE_NOT
 *         order_req.IsAutoSuspend = auto_suspend; order_req.UserForceClose = user_force_close             # <<<<<<<<<<<<<<
 *         if date and time_condition == '4': order_req.GTDDate = date #TIME_CONDITION_GTILL_DAY
 *         if price: order_req.LimitPrice = price
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_order_req, __pyx_n_s_IsAutoSuspend, __pyx_v_auto_suspend) < 0) __PYX_ERR(0, 208, __pyx_L1_error)
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_order_req, __pyx_n_s_UserForceClose, __pyx_v_user_force_close) < 0) __PYX_ERR(0, 208, __pyx_L1_error)

  /* "src/ctp_trader.pyx":209
 *         order_req.MinVolume = min_volume; order_req.ForceCloseReason = force_close_reason #FORCE_CLOSE_NOT
 *         order_req.IsAutoSuspend = auto_suspend; order_req.UserForceClose = user_force_close
 *         if date and time_condition == '4': order_req.GTDDate = date #TIME_CONDITION_GTILL_DAY             # <<<<<<<<<<<<<<
 *         if price: order_req.LimitPrice = price
 *         order_req.TimeCondition = time_condition; order_req.ContingentCondition = contingent_condition
 */
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_v_date); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 209, __pyx_L1_error)
  if (__pyx_t_10) {
  } else {
    __pyx_t_3 = __pyx_t_10;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_v_time_condition, __pyx_kp_s_4, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 209, __pyx_L1_error)
  __pyx_t_3 = __pyx_t_10;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_order_req, __pyx_n_s_GTDDate, __pyx_v_date) < 0) __PYX_ERR(0, 209, __pyx_L1_error)
  }

  /* "src/ctp_trader.pyx":210
 *         order_req.IsAutoSuspend = auto_suspend; order_req.UserForceClose = user_force_close
 *         if date and time_condition == '4': order_req.GTDDate = date #TIME_CONDITION_GTILL_DAY
 *         if price: order_req.LimitPrice = price             # <<<<<<<<<<<<<<
 *         order_req.TimeCondition = time_condition; order_req.ContingentCondition = contingent_condition
 *         cdef unsigned int addr = addressof(order_req) #byref(order_req) #
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_price); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 210, __pyx_L1_error)
  if (__pyx_t_3) {
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_order_req, __pyx_n_s_LimitPrice, __pyx_v_price) < 0) __PYX_ERR(0, 210, __pyx_L1_error)
  }

  /* "src/ctp_trader.pyx":211
 *         if date and time_condition == '4': order_req.GTDDate = date #TIME_CONDITION_GTILL_DAY
 *         if price: order_req.LimitPrice = price
 *         order_req.TimeCondition = time_condition; order_req.ContingentCondition = contingent_condition             # <<<<<<<<<<<<<<
 *         cdef unsigned int addr = addressof(order_req) #byref(order_req) #
 *         return self.collector.InsertOrder(<CThostFtdcInputOrderField*>addr) if not park else self.collector.InsertParkOrder(<CThostFtdcParkedOrderField*>addr)
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_order_req, __pyx_n_s_TimeCondition, __pyx_v_time_condition) < 0) __PYX_ERR(0, 211, __pyx_L1_error)
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_order_req, __pyx_n_s_ContingentCondition, __pyx_v_contingent_condition) < 0) __PYX_ERR(0, 211, __pyx_L1_error)

  /* "src/ctp_trader.pyx":212
 *         if price: order_req.LimitPrice = price
 *         order_req.TimeCondition = time_condition; order_req.ContingentCondition = contingent_condition
 *         cdef unsigned int addr = addressof(order_req) #byref(order_req) #             # <<<<<<<<<<<<<<
 *         return self.collector.InsertOrder(<CThostFtdcInputOrderField*>addr) if not park else self.collector.InsertParkOrder(<CThostFtdcParkedOrderField*>addr)
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_addressof); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_8) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_order_req); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 212, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_v_order_req};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 212, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_v_order_req};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 212, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 212, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_8); __pyx_t_8 = NULL;
      __Pyx_INCREF(__pyx_v_order_req);
      __Pyx_GIVEREF(__pyx_v_order_req);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_order_req);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 212, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_11 = __Pyx_PyInt_As_unsigned_int(__pyx_t_2); if (unlikely((__pyx_t_11 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_addr = __pyx_t_11;

  /* "src/ctp_trader.pyx":213
 *         order_req.TimeCondition = time_condition; order_req.ContingentCondition = contingent_condition
 *         cdef unsigned int addr = addressof(order_req) #byref(order_req) #
 *         return self.collector.InsertOrder(<CThostFtdcInputOrderField*>addr) if not park else self.collector.InsertParkOrder(<CThostFtdcParkedOrderField*>addr)             # <<<<<<<<<<<<<<
 * 
 *     def insert_fok_order(self, iid, direction, volume, price, offset_flags, hedge_flags, force_close_reason='0', auto_suspend=0, user_force_close=0, max_ref=None, park=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_park); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 213, __pyx_L1_error)
  if (((!__pyx_t_3) != 0)) {
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->collector->InsertOrder(((struct CThostFtdcInputOrderField *)__pyx_v_addr))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 213, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_t_1;
    __pyx_t_1 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->collector->InsertParkOrder(((struct CThostFtdcParkedOrderField *)__pyx_v_addr))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 213, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_t_1;
    __pyx_t_1 = 0;
  }
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":198
 *         return self.collector.InsertOrder(<CThostFtdcInputOrderField*>addr) if not park else self.collector.InsertParkOrder(<CThostFtdcParkedOrderField*>addr)
 * 
 *     def insert_condition_order(self, iid, direction, volume, stop_price, contingent_condition, time_condition, offset_flags, hedge_flags, date=None, price=None, min_volume=1, volume_condition='1', force_close_reason='0', auto_suspend=0, user_force_close=0, max_ref=None, park=False):             # <<<<<<<<<<<<<<
 *         from cyctp.ctp_struct import OrderRequest, ParkOrderRequest
 *         order_req = OrderRequest() if not park else ParkOrderRequest()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.insert_condition_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_OrderRequest);
  __Pyx_XDECREF(__pyx_v_ParkOrderRequest);
  __Pyx_XDECREF(__pyx_v_order_req);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":215
 *         return self.collector.InsertOrder(<CThostFtdcInputOrderField*>addr) if not park else self.collector.InsertParkOrder(<CThostFtdcParkedOrderField*>addr)
 * 
 *     def insert_fok_order(self, iid, direction, volume, price, offset_flags, hedge_flags, force_close_reason='0', auto_suspend=0, user_force_close=0, max_ref=None, park=False):             # <<<<<<<<<<<<<<
 *         return self.insert_limit_price_order(iid, direction, volume, price, offset_flags, hedge_flags, volume_condition='3', time_condition='1', force_close_reason=force_close_reason, auto_suspend=auto_suspend, user_force_close=user_force_close, max_ref=max_ref, park=park)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_103insert_fok_order(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_103insert_fok_order(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_iid = 0;
  PyObject *__pyx_v_direction = 0;
  PyObject *__pyx_v_volume = 0;
  PyObject *__pyx_v_price = 0;
  PyObject *__pyx_v_offset_flags = 0;
  PyObject *__pyx_v_hedge_flags = 0;
  PyObject *__pyx_v_force_close_reason = 0;
  PyObject *__pyx_v_auto_suspend = 0;
  PyObject *__pyx_v_user_force_close = 0;
  PyObject *__pyx_v_max_ref = 0;
  PyObject *__pyx_v_park = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("insert_fok_order (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_iid,&__pyx_n_s_direction,&__pyx_n_s_volume,&__pyx_n_s_price,&__pyx_n_s_offset_flags,&__pyx_n_s_hedge_flags,&__pyx_n_s_force_close_reason,&__pyx_n_s_auto_suspend,&__pyx_n_s_user_force_close,&__pyx_n_s_max_ref,&__pyx_n_s_park,0};
    PyObject* values[11] = {0,0,0,0,0,0,0,0,0,0,0};
    values[6] = ((PyObject *)__pyx_kp_s_0);
    values[7] = ((PyObject *)__pyx_int_0);
    values[8] = ((PyObject *)__pyx_int_0);
    values[9] = ((PyObject *)Py_None);
    values[10] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_iid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_direction)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("insert_fok_order", 0, 6, 11, 1); __PYX_ERR(0, 215, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_volume)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("insert_fok_order", 0, 6, 11, 2); __PYX_ERR(0, 215, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_price)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("insert_fok_order", 0, 6, 11, 3); __PYX_ERR(0, 215, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_offset_flags)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("insert_fok_order", 0, 6, 11, 4); __PYX_ERR(0, 215, __pyx_L3_error)
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_hedge_flags)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("insert_fok_order", 0, 6, 11, 5); __PYX_ERR(0, 215, __pyx_L3_error)
        }
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_force_close_reason);
          if (value) { values[6] = value; kw_args--; }
        }
        case  7:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_auto_suspend);
          if (value) { values[7] = value; kw_args--; }
        }
        case  8:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_user_force_close);
          if (value) { values[8] = value; kw_args--; }
        }
        case  9:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_ref);
          if (value) { values[9] = value; kw_args--; }
        }
        case 10:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_park);
          if (value) { values[10] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "insert_fok_order") < 0)) __PYX_ERR(0, 215, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_iid = values[0];
    __pyx_v_direction = values[1];
    __pyx_v_volume = values[2];
    __pyx_v_price = values[3];
    __pyx_v_offset_flags = values[4];
    __pyx_v_hedge_flags = values[5];
    __pyx_v_force_close_reason = values[6];
    __pyx_v_auto_suspend = values[7];
    __pyx_v_user_force_close = values[8];
    __pyx_v_max_ref = values[9];
    __pyx_v_park = values[10];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("insert_fok_order", 0, 6, 11, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 215, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.insert_fok_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_102insert_fok_order(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self), __pyx_v_iid, __pyx_v_direction, __pyx_v_volume, __pyx_v_price, __pyx_v_offset_flags, __pyx_v_hedge_flags, __pyx_v_force_close_reason, __pyx_v_auto_suspend, __pyx_v_user_force_close, __pyx_v_max_ref, __pyx_v_park);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_102insert_fok_order(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_iid, PyObject *__pyx_v_direction, PyObject *__pyx_v_volume, PyObject *__pyx_v_price, PyObject *__pyx_v_offset_flags, PyObject *__pyx_v_hedge_flags, PyObject *__pyx_v_force_close_reason, PyObject *__pyx_v_auto_suspend, PyObject *__pyx_v_user_force_close, PyObject *__pyx_v_max_ref, PyObject *__pyx_v_park) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("insert_fok_order", 0);

  /* "src/ctp_trader.pyx":216
 * 
 *     def insert_fok_order(self, iid, direction, volume, price, offset_flags, hedge_flags, force_close_reason='0', auto_suspend=0, user_force_close=0, max_ref=None, park=False):
 *         return self.insert_limit_price_order(iid, direction, volume, price, offset_flags, hedge_flags, volume_condition='3', time_condition='1', force_close_reason=force_close_reason, auto_suspend=auto_suspend, user_force_close=user_force_close, max_ref=max_ref, park=park)             # <<<<<<<<<<<<<<
 * 
 *     def insert_fak_order(self, iid, direction, volume, price, offset_flags, hedge_flags, min_volume=0, force_close_reason='0', auto_suspend=0, user_force_close=0, max_ref=None, park=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_insert_limit_price_order); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_iid);
  __Pyx_GIVEREF(__pyx_v_iid);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_iid);
  __Pyx_INCREF(__pyx_v_direction);
  __Pyx_GIVEREF(__pyx_v_direction);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_direction);
  __Pyx_INCREF(__pyx_v_volume);
  __Pyx_GIVEREF(__pyx_v_volume);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_volume);
  __Pyx_INCREF(__pyx_v_price);
  __Pyx_GIVEREF(__pyx_v_price);
  PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_v_price);
  __Pyx_INCREF(__pyx_v_offset_flags);
  __Pyx_GIVEREF(__pyx_v_offset_flags);
  PyTuple_SET_ITEM(__pyx_t_2, 4, __pyx_v_offset_flags);
  __Pyx_INCREF(__pyx_v_hedge_flags);
  __Pyx_GIVEREF(__pyx_v_hedge_flags);
  PyTuple_SET_ITEM(__pyx_t_2, 5, __pyx_v_hedge_flags);
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_volume_condition, __pyx_kp_s_3) < 0) __PYX_ERR(0, 216, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_time_condition, __pyx_kp_s_1) < 0) __PYX_ERR(0, 216, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_force_close_reason, __pyx_v_force_close_reason) < 0) __PYX_ERR(0, 216, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_auto_suspend, __pyx_v_auto_suspend) < 0) __PYX_ERR(0, 216, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_user_force_close, __pyx_v_user_force_close) < 0) __PYX_ERR(0, 216, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_max_ref, __pyx_v_max_ref) < 0) __PYX_ERR(0, 216, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_park, __pyx_v_park) < 0) __PYX_ERR(0, 216, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":215
 *         return self.collector.InsertOrder(<CThostFtdcInputOrderField*>addr) if not park else self.collector.InsertParkOrder(<CThostFtdcParkedOrderField*>addr)
 * 
 *     def insert_fok_order(self, iid, direction, volume, price, offset_flags, hedge_flags, force_close_reason='0', auto_suspend=0, user_force_close=0, max_ref=None, park=False):             # <<<<<<<<<<<<<<
 *         return self.insert_limit_price_order(iid, direction, volume, price, offset_flags, hedge_flags, volume_condition='3', time_condition='1', force_close_reason=force_close_reason, auto_suspend=auto_suspend, user_force_close=user_force_close, max_ref=max_ref, park=park)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.insert_fok_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":218
 *         return self.insert_limit_price_order(iid, direction, volume, price, offset_flags, hedge_flags, volume_condition='3', time_condition='1', force_close_reason=force_close_reason, auto_suspend=auto_suspend, user_force_close=user_force_close, max_ref=max_ref, park=park)
 * 
 *     def insert_fak_order(self, iid, direction, volume, price, offset_flags, hedge_flags, min_volume=0, force_close_reason='0', auto_suspend=0, user_force_close=0, max_ref=None, park=False):             # <<<<<<<<<<<<<<
 *         volume_condition = '2' if min_volume > 1 else '1'
 *         return self.insert_limit_price_order(iid, direction, volume, price, offset_flags, hedge_flags, min_volume=min_volume, volume_condition=volume_condition, time_condition='1', force_close_reason=force_close_reason, auto_suspend=auto_suspend, user_force_close=user_force_close, max_ref=max_ref, park=park)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_105insert_fak_order(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_105insert_fak_order(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_iid = 0;
  PyObject *__pyx_v_direction = 0;
  PyObject *__pyx_v_volume = 0;
  PyObject *__pyx_v_price = 0;
  PyObject *__pyx_v_offset_flags = 0;
  PyObject *__pyx_v_hedge_flags = 0;
  PyObject *__pyx_v_min_volume = 0;
  PyObject *__pyx_v_force_close_reason = 0;
  PyObject *__pyx_v_auto_suspend = 0;
  PyObject *__pyx_v_user_force_close = 0;
  PyObject *__pyx_v_max_ref = 0;
  PyObject *__pyx_v_park = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("insert_fak_order (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_iid,&__pyx_n_s_direction,&__pyx_n_s_volume,&__pyx_n_s_price,&__pyx_n_s_offset_flags,&__pyx_n_s_hedge_flags,&__pyx_n_s_min_volume,&__pyx_n_s_force_close_reason,&__pyx_n_s_auto_suspend,&__pyx_n_s_user_force_close,&__pyx_n_s_max_ref,&__pyx_n_s_park,0};
    PyObject* values[12] = {0,0,0,0,0,0,0,0,0,0,0,0};
    values[6] = ((PyObject *)__pyx_int_0);
    values[7] = ((PyObject *)__pyx_kp_s_0);
    values[8] = ((PyObject *)__pyx_int_0);
    values[9] = ((PyObject *)__pyx_int_0);
    values[10] = ((PyObject *)Py_None);
    values[11] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_iid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_direction)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("insert_fak_order", 0, 6, 12, 1); __PYX_ERR(0, 218, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_volume)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("insert_fak_order", 0, 6, 12, 2); __PYX_ERR(0, 218, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_price)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("insert_fak_order", 0, 6, 12, 3); __PYX_ERR(0, 218, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_offset_flags)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("insert_fak_order", 0, 6, 12, 4); __PYX_ERR(0, 218, __pyx_L3_error)
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_hedge_flags)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("insert_fak_order", 0, 6, 12, 5); __PYX_ERR(0, 218, __pyx_L3_error)
        }
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_min_volume);
          if (value) { values[6] = value; kw_args--; }
        }
        case  7:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_force_close_reason);
          if (value) { values[7] = value; kw_args--; }
        }
        case  8:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_auto_suspend);
          if (value) { values[8] = value; kw_args--; }
        }
        case  9:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_user_force_close);
          if (value) { values[9] = value; kw_args--; }
        }
        case 10:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_ref);
          if (value) { values[10] = value; kw_args--; }
        }
        case 11:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_park);
          if (value) { values[11] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "insert_fak_order") < 0)) __PYX_ERR(0, 218, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_iid = values[0];
    __pyx_v_direction = values[1];
    __pyx_v_volume = values[2];
    __pyx_v_price = values[3];
    __pyx_v_offset_flags = values[4];
    __pyx_v_hedge_flags = values[5];
    __pyx_v_min_volume = values[6];
    __pyx_v_force_close_reason = values[7];
    __pyx_v_auto_suspend = values[8];
    __pyx_v_user_force_close = values[9];
    __pyx_v_max_ref = values[10];
    __pyx_v_park = values[11];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("insert_fak_order", 0, 6, 12, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 218, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.insert_fak_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_104insert_fak_order(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self), __pyx_v_iid, __pyx_v_direction, __pyx_v_volume, __pyx_v_price, __pyx_v_offset_flags, __pyx_v_hedge_flags, __pyx_v_min_volume, __pyx_v_force_close_reason, __pyx_v_auto_suspend, __pyx_v_user_force_close, __pyx_v_max_ref, __pyx_v_park);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_104insert_fak_order(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_iid, PyObject *__pyx_v_direction, PyObject *__pyx_v_volume, PyObject *__pyx_v_price, PyObject *__pyx_v_offset_flags, PyObject *__pyx_v_hedge_flags, PyObject *__pyx_v_min_volume, PyObject *__pyx_v_force_close_reason, PyObject *__pyx_v_auto_suspend, PyObject *__pyx_v_user_force_close, PyObject *__pyx_v_max_ref, PyObject *__pyx_v_park) {
  PyObject *__pyx_v_volume_condition = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("insert_fak_order", 0);

  /* "src/ctp_trader.pyx":219
 * 
 *     def insert_fak_order(self, iid, direction, volume, price, offset_flags, hedge_flags, min_volume=0, force_close_reason='0', auto_suspend=0, user_force_close=0, max_ref=None, park=False):
 *         volume_condition = '2' if min_volume > 1 else '1'             # <<<<<<<<<<<<<<
 *         return self.insert_limit_price_order(iid, direction, volume, price, offset_flags, hedge_flags, min_volume=min_volume, volume_condition=volume_condition, time_condition='1', force_close_reason=force_close_reason, auto_suspend=auto_suspend, user_force_close=user_force_close, max_ref=max_ref, park=park)
 * 
 */
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_min_volume, __pyx_int_1, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 219, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 219, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __Pyx_INCREF(__pyx_kp_s_2);
    __pyx_t_1 = __pyx_kp_s_2;
  } else {
    __Pyx_INCREF(__pyx_kp_s_1);
    __pyx_t_1 = __pyx_kp_s_1;
  }
  __pyx_v_volume_condition = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "src/ctp_trader.pyx":220
 *     def insert_fak_order(self, iid, direction, volume, price, offset_flags, hedge_flags, min_volume=0, force_close_reason='0', auto_suspend=0, user_force_close=0, max_ref=None, park=False):
 *         volume_condition = '2' if min_volume > 1 else '1'
 *         return self.insert_limit_price_order(iid, direction, volume, price, offset_flags, hedge_flags, min_volume=min_volume, volume_condition=volume_condition, time_condition='1', force_close_reason=force_close_reason, auto_suspend=auto_suspend, user_force_close=user_force_close, max_ref=max_ref, park=park)             # <<<<<<<<<<<<<<
 * 
 *     def delete_order_by_ref(self, fid, sid, order_ref, max_ref=None, park=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_insert_limit_price_order); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_iid);
  __Pyx_GIVEREF(__pyx_v_iid);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_iid);
  __Pyx_INCREF(__pyx_v_direction);
  __Pyx_GIVEREF(__pyx_v_direction);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_direction);
  __Pyx_INCREF(__pyx_v_volume);
  __Pyx_GIVEREF(__pyx_v_volume);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_volume);
  __Pyx_INCREF(__pyx_v_price);
  __Pyx_GIVEREF(__pyx_v_price);
  PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_v_price);
  __Pyx_INCREF(__pyx_v_offset_flags);
  __Pyx_GIVEREF(__pyx_v_offset_flags);
  PyTuple_SET_ITEM(__pyx_t_2, 4, __pyx_v_offset_flags);
  __Pyx_INCREF(__pyx_v_hedge_flags);
  __Pyx_GIVEREF(__pyx_v_hedge_flags);
  PyTuple_SET_ITEM(__pyx_t_2, 5, __pyx_v_hedge_flags);
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_min_volume, __pyx_v_min_volume) < 0) __PYX_ERR(0, 220, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_volume_condition, __pyx_v_volume_condition) < 0) __PYX_ERR(0, 220, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_time_condition, __pyx_kp_s_1) < 0) __PYX_ERR(0, 220, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_force_close_reason, __pyx_v_force_close_reason) < 0) __PYX_ERR(0, 220, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_auto_suspend, __pyx_v_auto_suspend) < 0) __PYX_ERR(0, 220, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_user_force_close, __pyx_v_user_force_close) < 0) __PYX_ERR(0, 220, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_max_ref, __pyx_v_max_ref) < 0) __PYX_ERR(0, 220, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_park, __pyx_v_park) < 0) __PYX_ERR(0, 220, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":218
 *         return self.insert_limit_price_order(iid, direction, volume, price, offset_flags, hedge_flags, volume_condition='3', time_condition='1', force_close_reason=force_close_reason, auto_suspend=auto_suspend, user_force_close=user_force_close, max_ref=max_ref, park=park)
 * 
 *     def insert_fak_order(self, iid, direction, volume, price, offset_flags, hedge_flags, min_volume=0, force_close_reason='0', auto_suspend=0, user_force_close=0, max_ref=None, park=False):             # <<<<<<<<<<<<<<
 *         volume_condition = '2' if min_volume > 1 else '1'
 *         return self.insert_limit_price_order(iid, direction, volume, price, offset_flags, hedge_flags, min_volume=min_volume, volume_condition=volume_condition, time_condition='1', force_close_reason=force_close_reason, auto_suspend=auto_suspend, user_force_close=user_force_close, max_ref=max_ref, park=park)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.insert_fak_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_volume_condition);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":222
 *         return self.insert_limit_price_order(iid, direction, volume, price, offset_flags, hedge_flags, min_volume=min_volume, volume_condition=volume_condition, time_condition='1', force_close_reason=force_close_reason, auto_suspend=auto_suspend, user_force_close=user_force_close, max_ref=max_ref, park=park)
 * 
 *     def delete_order_by_ref(self, fid, sid, order_ref, max_ref=None, park=False):             # <<<<<<<<<<<<<<
 *         from cyctp.ctp_struct import OrderActionRequest, ParkOrderActionRequest
 *         action_req = OrderActionRequest() if not park else ParkOrderActionRequest()
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_107delete_order_by_ref(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_107delete_order_by_ref(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fid = 0;
  PyObject *__pyx_v_sid = 0;
  PyObject *__pyx_v_order_ref = 0;
  PyObject *__pyx_v_max_ref = 0;
  PyObject *__pyx_v_park = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("delete_order_by_ref (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fid,&__pyx_n_s_sid,&__pyx_n_s_order_ref,&__pyx_n_s_max_ref,&__pyx_n_s_park,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = ((PyObject *)Py_None);
    values[4] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("delete_order_by_ref", 0, 3, 5, 1); __PYX_ERR(0, 222, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_order_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("delete_order_by_ref", 0, 3, 5, 2); __PYX_ERR(0, 222, __pyx_L3_error)
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_ref);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_park);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "delete_order_by_ref") < 0)) __PYX_ERR(0, 222, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_fid = values[0];
    __pyx_v_sid = values[1];
    __pyx_v_order_ref = values[2];
    __pyx_v_max_ref = values[3];
    __pyx_v_park = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("delete_order_by_ref", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 222, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.delete_order_by_ref", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_106delete_order_by_ref(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self), __pyx_v_fid, __pyx_v_sid, __pyx_v_order_ref, __pyx_v_max_ref, __pyx_v_park);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_106delete_order_by_ref(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_fid, PyObject *__pyx_v_sid, PyObject *__pyx_v_order_ref, PyObject *__pyx_v_max_ref, PyObject *__pyx_v_park) {
  PyObject *__pyx_v_OrderActionRequest = NULL;
  PyObject *__pyx_v_ParkOrderActionRequest = NULL;
  PyObject *__pyx_v_action_req = NULL;
  unsigned int __pyx_v_addr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  unsigned int __pyx_t_10;
  __Pyx_RefNannySetupContext("delete_order_by_ref", 0);

  /* "src/ctp_trader.pyx":223
 * 
 *     def delete_order_by_ref(self, fid, sid, order_ref, max_ref=None, park=False):
 *         from cyctp.ctp_struct import OrderActionRequest, ParkOrderActionRequest             # <<<<<<<<<<<<<<
 *         action_req = OrderActionRequest() if not park else ParkOrderActionRequest()
 *         memset(addressof(action_req), 0, csizeof(action_req))
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_OrderActionRequest);
  __Pyx_GIVEREF(__pyx_n_s_OrderActionRequest);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_OrderActionRequest);
  __Pyx_INCREF(__pyx_n_s_ParkOrderActionRequest);
  __Pyx_GIVEREF(__pyx_n_s_ParkOrderActionRequest);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_ParkOrderActionRequest);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_cyctp_ctp_struct, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_OrderActionRequest); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_OrderActionRequest = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_ParkOrderActionRequest); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_ParkOrderActionRequest = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/ctp_trader.pyx":224
 *     def delete_order_by_ref(self, fid, sid, order_ref, max_ref=None, park=False):
 *         from cyctp.ctp_struct import OrderActionRequest, ParkOrderActionRequest
 *         action_req = OrderActionRequest() if not park else ParkOrderActionRequest()             # <<<<<<<<<<<<<<
 *         memset(addressof(action_req), 0, csizeof(action_req))
 *         action_req.OrderActionRef = max_ref if max_ref else int(self.inc_max_other_ref())
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_park); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 224, __pyx_L1_error)
  if (((!__pyx_t_3) != 0)) {
    __Pyx_INCREF(__pyx_v_OrderActionRequest);
    __pyx_t_4 = __pyx_v_OrderActionRequest; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 224, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 224, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __pyx_t_1;
    __pyx_t_1 = 0;
  } else {
    __Pyx_INCREF(__pyx_v_ParkOrderActionRequest);
    __pyx_t_4 = __pyx_v_ParkOrderActionRequest; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 224, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 224, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __pyx_t_1;
    __pyx_t_1 = 0;
  }
  __pyx_v_action_req = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "src/ctp_trader.pyx":225
 *         from cyctp.ctp_struct import OrderActionRequest, ParkOrderActionRequest
 *         action_req = OrderActionRequest() if not park else ParkOrderActionRequest()
 *         memset(addressof(action_req), 0, csizeof(action_req))             # <<<<<<<<<<<<<<
 *         action_req.OrderActionRef = max_ref if max_ref else int(self.inc_max_other_ref())
 *         action_req.FrontID = fid; action_req.SessionID = sid; action_req.OrderRef = order_ref
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_memset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_addressof); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_action_req); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 225, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_action_req};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 225, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_action_req};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 225, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 225, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_INCREF(__pyx_v_action_req);
      __Pyx_GIVEREF(__pyx_v_action_req);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_v_action_req);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 225, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_csizeof); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_action_req); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 225, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_action_req};
      __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 225, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_action_req};
      __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 225, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 225, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_INCREF(__pyx_v_action_req);
      __Pyx_GIVEREF(__pyx_v_action_req);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_v_action_req);
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_8, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 225, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_9 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_t_4, __pyx_int_0, __pyx_t_5};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_9, 3+__pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 225, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_t_4, __pyx_int_0, __pyx_t_5};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_9, 3+__pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 225, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(3+__pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 225, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_9, __pyx_t_4);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_9, __pyx_int_0);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_8, 2+__pyx_t_9, __pyx_t_5);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 225, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/ctp_trader.pyx":226
 *         action_req = OrderActionRequest() if not park else ParkOrderActionRequest()
 *         memset(addressof(action_req), 0, csizeof(action_req))
 *         action_req.OrderActionRef = max_ref if max_ref else int(self.inc_max_other_ref())             # <<<<<<<<<<<<<<
 *         action_req.FrontID = fid; action_req.SessionID = sid; action_req.OrderRef = order_ref
 *         action_req.ActionFlag = '0'
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_max_ref); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 226, __pyx_L1_error)
  if (__pyx_t_3) {
    __Pyx_INCREF(__pyx_v_max_ref);
    __pyx_t_2 = __pyx_v_max_ref;
  } else {
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_inc_max_other_ref); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 226, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 226, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 226, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyNumber_Int(__pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 226, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = __pyx_t_8;
    __pyx_t_8 = 0;
  }
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_action_req, __pyx_n_s_OrderActionRef, __pyx_t_2) < 0) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/ctp_trader.pyx":227
 *         memset(addressof(action_req), 0, csizeof(action_req))
 *         action_req.OrderActionRef = max_ref if max_ref else int(self.inc_max_other_ref())
 *         action_req.FrontID = fid; action_req.SessionID = sid; action_req.OrderRef = order_ref             # <<<<<<<<<<<<<<
 *         action_req.ActionFlag = '0'
 *         cdef unsigned int addr = addressof(action_req) #byref(action_req) #
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_action_req, __pyx_n_s_FrontID, __pyx_v_fid) < 0) __PYX_ERR(0, 227, __pyx_L1_error)
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_action_req, __pyx_n_s_SessionID, __pyx_v_sid) < 0) __PYX_ERR(0, 227, __pyx_L1_error)
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_action_req, __pyx_n_s_OrderRef, __pyx_v_order_ref) < 0) __PYX_ERR(0, 227, __pyx_L1_error)

  /* "src/ctp_trader.pyx":228
 *         action_req.OrderActionRef = max_ref if max_ref else int(self.inc_max_other_ref())
 *         action_req.FrontID = fid; action_req.SessionID = sid; action_req.OrderRef = order_ref
 *         action_req.ActionFlag = '0'             # <<<<<<<<<<<<<<
 *         cdef unsigned int addr = addressof(action_req) #byref(action_req) #
 *         return self.collector.ActionOrder(<CThostFtdcInputOrderActionField*>addr) if not park else self.collector.ActionParkOrder(<CThostFtdcParkedOrderActionField*>addr)
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_action_req, __pyx_n_s_ActionFlag, __pyx_kp_s_0) < 0) __PYX_ERR(0, 228, __pyx_L1_error)

  /* "src/ctp_trader.pyx":229
 *         action_req.FrontID = fid; action_req.SessionID = sid; action_req.OrderRef = order_ref
 *         action_req.ActionFlag = '0'
 *         cdef unsigned int addr = addressof(action_req) #byref(action_req) #             # <<<<<<<<<<<<<<
 *         return self.collector.ActionOrder(<CThostFtdcInputOrderActionField*>addr) if not park else self.collector.ActionParkOrder(<CThostFtdcParkedOrderActionField*>addr)
 * 
 */
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_addressof); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  if (!__pyx_t_1) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_action_req); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_v_action_req};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 229, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_v_action_req};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 229, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 229, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1); __pyx_t_1 = NULL;
      __Pyx_INCREF(__pyx_v_action_req);
      __Pyx_GIVEREF(__pyx_v_action_req);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_action_req);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 229, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_10 = __Pyx_PyInt_As_unsigned_int(__pyx_t_2); if (unlikely((__pyx_t_10 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 229, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_addr = __pyx_t_10;

  /* "src/ctp_trader.pyx":230
 *         action_req.ActionFlag = '0'
 *         cdef unsigned int addr = addressof(action_req) #byref(action_req) #
 *         return self.collector.ActionOrder(<CThostFtdcInputOrderActionField*>addr) if not park else self.collector.ActionParkOrder(<CThostFtdcParkedOrderActionField*>addr)             # <<<<<<<<<<<<<<
 * 
 *     def delete_order_by_sysid(self, eid, order_sys_id, max_ref=None, park=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_park); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 230, __pyx_L1_error)
  if (((!__pyx_t_3) != 0)) {
    __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_self->collector->ActionOrder(((struct CThostFtdcInputOrderActionField *)__pyx_v_addr))); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 230, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_2 = __pyx_t_8;
    __pyx_t_8 = 0;
  } else {
    __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_self->collector->ActionParkOrder(((struct CThostFtdcParkedOrderActionField *)__pyx_v_addr))); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 230, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_2 = __pyx_t_8;
    __pyx_t_8 = 0;
  }
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":222
 *         return self.insert_limit_price_order(iid, direction, volume, price, offset_flags, hedge_flags, min_volume=min_volume, volume_condition=volume_condition, time_condition='1', force_close_reason=force_close_reason, auto_suspend=auto_suspend, user_force_close=user_force_close, max_ref=max_ref, park=park)
 * 
 *     def delete_order_by_ref(self, fid, sid, order_ref, max_ref=None, park=False):             # <<<<<<<<<<<<<<
 *         from cyctp.ctp_struct import OrderActionRequest, ParkOrderActionRequest
 *         action_req = OrderActionRequest() if not park else ParkOrderActionRequest()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.delete_order_by_ref", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_OrderActionRequest);
  __Pyx_XDECREF(__pyx_v_ParkOrderActionRequest);
  __Pyx_XDECREF(__pyx_v_action_req);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":232
 *         return self.collector.ActionOrder(<CThostFtdcInputOrderActionField*>addr) if not park else self.collector.ActionParkOrder(<CThostFtdcParkedOrderActionField*>addr)
 * 
 *     def delete_order_by_sysid(self, eid, order_sys_id, max_ref=None, park=False):             # <<<<<<<<<<<<<<
 *         from cyctp.ctp_struct import OrderActionRequest, ParkOrderActionRequest
 *         action_req = OrderActionRequest() if not park else ParkOrderActionRequest()
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_109delete_order_by_sysid(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_109delete_order_by_sysid(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_eid = 0;
  PyObject *__pyx_v_order_sys_id = 0;
  PyObject *__pyx_v_max_ref = 0;
  PyObject *__pyx_v_park = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("delete_order_by_sysid (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_eid,&__pyx_n_s_order_sys_id,&__pyx_n_s_max_ref,&__pyx_n_s_park,0};
    PyObject* values[4] = {0,0,0,0};
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_eid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_order_sys_id)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("delete_order_by_sysid", 0, 2, 4, 1); __PYX_ERR(0, 232, __pyx_L3_error)
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_ref);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_park);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "delete_order_by_sysid") < 0)) __PYX_ERR(0, 232, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_eid = values[0];
    __pyx_v_order_sys_id = values[1];
    __pyx_v_max_ref = values[2];
    __pyx_v_park = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("delete_order_by_sysid", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 232, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.delete_order_by_sysid", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_108delete_order_by_sysid(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self), __pyx_v_eid, __pyx_v_order_sys_id, __pyx_v_max_ref, __pyx_v_park);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_108delete_order_by_sysid(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_eid, PyObject *__pyx_v_order_sys_id, PyObject *__pyx_v_max_ref, PyObject *__pyx_v_park) {
  PyObject *__pyx_v_OrderActionRequest = NULL;
  PyObject *__pyx_v_ParkOrderActionRequest = NULL;
  PyObject *__pyx_v_action_req = NULL;
  unsigned int __pyx_v_addr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  unsigned int __pyx_t_10;
  __Pyx_RefNannySetupContext("delete_order_by_sysid", 0);

  /* "src/ctp_trader.pyx":233
 * 
 *     def delete_order_by_sysid(self, eid, order_sys_id, max_ref=None, park=False):
 *         from cyctp.ctp_struct import OrderActionRequest, ParkOrderActionRequest             # <<<<<<<<<<<<<<
 *         action_req = OrderActionRequest() if not park else ParkOrderActionRequest()
 *         memset(addressof(action_req), 0, csizeof(action_req))
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_OrderActionRequest);
  __Pyx_GIVEREF(__pyx_n_s_OrderActionRequest);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_OrderActionRequest);
  __Pyx_INCREF(__pyx_n_s_ParkOrderActionRequest);
  __Pyx_GIVEREF(__pyx_n_s_ParkOrderActionRequest);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_ParkOrderActionRequest);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_cyctp_ctp_struct, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_OrderActionRequest); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_OrderActionRequest = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_ParkOrderActionRequest); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_ParkOrderActionRequest = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/ctp_trader.pyx":234
 *     def delete_order_by_sysid(self, eid, order_sys_id, max_ref=None, park=False):
 *         from cyctp.ctp_struct import OrderActionRequest, ParkOrderActionRequest
 *         action_req = OrderActionRequest() if not park else ParkOrderActionRequest()             # <<<<<<<<<<<<<<
 *         memset(addressof(action_req), 0, csizeof(action_req))
 *         action_req.OrderActionRef = max_ref if max_ref else int(self.inc_max_other_ref())
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_park); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 234, __pyx_L1_error)
  if (((!__pyx_t_3) != 0)) {
    __Pyx_INCREF(__pyx_v_OrderActionRequest);
    __pyx_t_4 = __pyx_v_OrderActionRequest; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 234, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 234, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __pyx_t_1;
    __pyx_t_1 = 0;
  } else {
    __Pyx_INCREF(__pyx_v_ParkOrderActionRequest);
    __pyx_t_4 = __pyx_v_ParkOrderActionRequest; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 234, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 234, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __pyx_t_1;
    __pyx_t_1 = 0;
  }
  __pyx_v_action_req = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "src/ctp_trader.pyx":235
 *         from cyctp.ctp_struct import OrderActionRequest, ParkOrderActionRequest
 *         action_req = OrderActionRequest() if not park else ParkOrderActionRequest()
 *         memset(addressof(action_req), 0, csizeof(action_req))             # <<<<<<<<<<<<<<
 *         action_req.OrderActionRef = max_ref if max_ref else int(self.inc_max_other_ref())
 *         action_req.ExchangeID = eid; action_req.OrderSysID = order_sys_id
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_memset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_addressof); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_action_req); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_action_req};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 235, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_action_req};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 235, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 235, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_INCREF(__pyx_v_action_req);
      __Pyx_GIVEREF(__pyx_v_action_req);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_v_action_req);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 235, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_csizeof); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_action_req); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_action_req};
      __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 235, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_action_req};
      __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 235, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 235, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_INCREF(__pyx_v_action_req);
      __Pyx_GIVEREF(__pyx_v_action_req);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_v_action_req);
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_8, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 235, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_9 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_t_4, __pyx_int_0, __pyx_t_5};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_9, 3+__pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 235, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_t_4, __pyx_int_0, __pyx_t_5};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_9, 3+__pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 235, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(3+__pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_9, __pyx_t_4);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_9, __pyx_int_0);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_8, 2+__pyx_t_9, __pyx_t_5);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/ctp_trader.pyx":236
 *         action_req = OrderActionRequest() if not park else ParkOrderActionRequest()
 *         memset(addressof(action_req), 0, csizeof(action_req))
 *         action_req.OrderActionRef = max_ref if max_ref else int(self.inc_max_other_ref())             # <<<<<<<<<<<<<<
 *         action_req.ExchangeID = eid; action_req.OrderSysID = order_sys_id
 *         action_req.ActionFlag = '0'
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_max_ref); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 236, __pyx_L1_error)
  if (__pyx_t_3) {
    __Pyx_INCREF(__pyx_v_max_ref);
    __pyx_t_2 = __pyx_v_max_ref;
  } else {
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_inc_max_other_ref); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 236, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 236, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 236, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyNumber_Int(__pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 236, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = __pyx_t_8;
    __pyx_t_8 = 0;
  }
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_action_req, __pyx_n_s_OrderActionRef, __pyx_t_2) < 0) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/ctp_trader.pyx":237
 *         memset(addressof(action_req), 0, csizeof(action_req))
 *         action_req.OrderActionRef = max_ref if max_ref else int(self.inc_max_other_ref())
 *         action_req.ExchangeID = eid; action_req.OrderSysID = order_sys_id             # <<<<<<<<<<<<<<
 *         action_req.ActionFlag = '0'
 *         cdef unsigned int addr = addressof(action_req) #byref(action_req) #
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_action_req, __pyx_n_s_ExchangeID, __pyx_v_eid) < 0) __PYX_ERR(0, 237, __pyx_L1_error)
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_action_req, __pyx_n_s_OrderSysID, __pyx_v_order_sys_id) < 0) __PYX_ERR(0, 237, __pyx_L1_error)

  /* "src/ctp_trader.pyx":238
 *         action_req.OrderActionRef = max_ref if max_ref else int(self.inc_max_other_ref())
 *         action_req.ExchangeID = eid; action_req.OrderSysID = order_sys_id
 *         action_req.ActionFlag = '0'             # <<<<<<<<<<<<<<
 *         cdef unsigned int addr = addressof(action_req) #byref(action_req) #
 *         return self.collector.ActionOrder(<CThostFtdcInputOrderActionField*>addr) if not park else self.collector.ActionParkOrder(<CThostFtdcParkedOrderActionField*>addr)
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_action_req, __pyx_n_s_ActionFlag, __pyx_kp_s_0) < 0) __PYX_ERR(0, 238, __pyx_L1_error)

  /* "src/ctp_trader.pyx":239
 *         action_req.ExchangeID = eid; action_req.OrderSysID = order_sys_id
 *         action_req.ActionFlag = '0'
 *         cdef unsigned int addr = addressof(action_req) #byref(action_req) #             # <<<<<<<<<<<<<<
 *         return self.collector.ActionOrder(<CThostFtdcInputOrderActionField*>addr) if not park else self.collector.ActionParkOrder(<CThostFtdcParkedOrderActionField*>addr)
 * 
 */
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_addressof); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  if (!__pyx_t_1) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_action_req); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 239, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_v_action_req};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 239, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_v_action_req};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 239, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 239, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1); __pyx_t_1 = NULL;
      __Pyx_INCREF(__pyx_v_action_req);
      __Pyx_GIVEREF(__pyx_v_action_req);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_action_req);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 239, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_10 = __Pyx_PyInt_As_unsigned_int(__pyx_t_2); if (unlikely((__pyx_t_10 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_addr = __pyx_t_10;

  /* "src/ctp_trader.pyx":240
 *         action_req.ActionFlag = '0'
 *         cdef unsigned int addr = addressof(action_req) #byref(action_req) #
 *         return self.collector.ActionOrder(<CThostFtdcInputOrderActionField*>addr) if not park else self.collector.ActionParkOrder(<CThostFtdcParkedOrderActionField*>addr)             # <<<<<<<<<<<<<<
 * 
 *     def delete_park(self, pid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_park); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 240, __pyx_L1_error)
  if (((!__pyx_t_3) != 0)) {
    __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_self->collector->ActionOrder(((struct CThostFtdcInputOrderActionField *)__pyx_v_addr))); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 240, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_2 = __pyx_t_8;
    __pyx_t_8 = 0;
  } else {
    __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_self->collector->ActionParkOrder(((struct CThostFtdcParkedOrderActionField *)__pyx_v_addr))); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 240, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_2 = __pyx_t_8;
    __pyx_t_8 = 0;
  }
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":232
 *         return self.collector.ActionOrder(<CThostFtdcInputOrderActionField*>addr) if not park else self.collector.ActionParkOrder(<CThostFtdcParkedOrderActionField*>addr)
 * 
 *     def delete_order_by_sysid(self, eid, order_sys_id, max_ref=None, park=False):             # <<<<<<<<<<<<<<
 *         from cyctp.ctp_struct import OrderActionRequest, ParkOrderActionRequest
 *         action_req = OrderActionRequest() if not park else ParkOrderActionRequest()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.delete_order_by_sysid", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_OrderActionRequest);
  __Pyx_XDECREF(__pyx_v_ParkOrderActionRequest);
  __Pyx_XDECREF(__pyx_v_action_req);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":242
 *         return self.collector.ActionOrder(<CThostFtdcInputOrderActionField*>addr) if not park else self.collector.ActionParkOrder(<CThostFtdcParkedOrderActionField*>addr)
 * 
 *     def delete_park(self, pid):             # <<<<<<<<<<<<<<
 *         return self.collector.RemovePark(as_str(pid if pid else ""))
 *     def delete_park_action(self, rpid):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_111delete_park(PyObject *__pyx_v_self, PyObject *__pyx_v_pid); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_111delete_park(PyObject *__pyx_v_self, PyObject *__pyx_v_pid) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("delete_park (wrapper)", 0);
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_110delete_park(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self), ((PyObject *)__pyx_v_pid));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_110delete_park(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_pid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  __Pyx_RefNannySetupContext("delete_park", 0);

  /* "src/ctp_trader.pyx":243
 * 
 *     def delete_park(self, pid):
 *         return self.collector.RemovePark(as_str(pid if pid else ""))             # <<<<<<<<<<<<<<
 *     def delete_park_action(self, rpid):
 *         return self.collector.RemoveParkAction(as_str(rpid if rpid else ""))
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_pid); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 243, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_pid);
    __pyx_t_1 = __pyx_v_pid;
  } else {
    __Pyx_INCREF(__pyx_kp_s__2);
    __pyx_t_1 = __pyx_kp_s__2;
  }
  __pyx_t_3 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 243, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->collector->RemovePark(__pyx_t_4)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":242
 *         return self.collector.ActionOrder(<CThostFtdcInputOrderActionField*>addr) if not park else self.collector.ActionParkOrder(<CThostFtdcParkedOrderActionField*>addr)
 * 
 *     def delete_park(self, pid):             # <<<<<<<<<<<<<<
 *         return self.collector.RemovePark(as_str(pid if pid else ""))
 *     def delete_park_action(self, rpid):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.delete_park", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":244
 *     def delete_park(self, pid):
 *         return self.collector.RemovePark(as_str(pid if pid else ""))
 *     def delete_park_action(self, rpid):             # <<<<<<<<<<<<<<
 *         return self.collector.RemoveParkAction(as_str(rpid if rpid else ""))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_113delete_park_action(PyObject *__pyx_v_self, PyObject *__pyx_v_rpid); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_113delete_park_action(PyObject *__pyx_v_self, PyObject *__pyx_v_rpid) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("delete_park_action (wrapper)", 0);
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_112delete_park_action(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self), ((PyObject *)__pyx_v_rpid));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_112delete_park_action(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_rpid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  __Pyx_RefNannySetupContext("delete_park_action", 0);

  /* "src/ctp_trader.pyx":245
 *         return self.collector.RemovePark(as_str(pid if pid else ""))
 *     def delete_park_action(self, rpid):
 *         return self.collector.RemoveParkAction(as_str(rpid if rpid else ""))             # <<<<<<<<<<<<<<
 * 
 *     def query_instrument_margin_rate(self, iid, hedge_flag):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_rpid); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 245, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_rpid);
    __pyx_t_1 = __pyx_v_rpid;
  } else {
    __Pyx_INCREF(__pyx_kp_s__2);
    __pyx_t_1 = __pyx_kp_s__2;
  }
  __pyx_t_3 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 245, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->collector->RemoveParkAction(__pyx_t_4)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":244
 *     def delete_park(self, pid):
 *         return self.collector.RemovePark(as_str(pid if pid else ""))
 *     def delete_park_action(self, rpid):             # <<<<<<<<<<<<<<
 *         return self.collector.RemoveParkAction(as_str(rpid if rpid else ""))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.delete_park_action", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":247
 *         return self.collector.RemoveParkAction(as_str(rpid if rpid else ""))
 * 
 *     def query_instrument_margin_rate(self, iid, hedge_flag):             # <<<<<<<<<<<<<<
 *         return self.collector.QryInstrumentMarginRate(as_str(iid if iid else ""), as_str(hedge_flag if hedge_flag else ""))
 *     def query_instrument_commission_rate(self, iid):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_115query_instrument_margin_rate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_115query_instrument_margin_rate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_iid = 0;
  PyObject *__pyx_v_hedge_flag = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("query_instrument_margin_rate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_iid,&__pyx_n_s_hedge_flag,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_iid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_hedge_flag)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("query_instrument_margin_rate", 1, 2, 2, 1); __PYX_ERR(0, 247, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "query_instrument_margin_rate") < 0)) __PYX_ERR(0, 247, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_iid = values[0];
    __pyx_v_hedge_flag = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("query_instrument_margin_rate", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 247, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.query_instrument_margin_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_114query_instrument_margin_rate(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self), __pyx_v_iid, __pyx_v_hedge_flag);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_114query_instrument_margin_rate(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_iid, PyObject *__pyx_v_hedge_flag) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  char const *__pyx_t_6;
  __Pyx_RefNannySetupContext("query_instrument_margin_rate", 0);

  /* "src/ctp_trader.pyx":248
 * 
 *     def query_instrument_margin_rate(self, iid, hedge_flag):
 *         return self.collector.QryInstrumentMarginRate(as_str(iid if iid else ""), as_str(hedge_flag if hedge_flag else ""))             # <<<<<<<<<<<<<<
 *     def query_instrument_commission_rate(self, iid):
 *         return self.collector.QryInstrumentCommissionRate(as_str(iid if iid else ""))
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_iid); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 248, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_iid);
    __pyx_t_1 = __pyx_v_iid;
  } else {
    __Pyx_INCREF(__pyx_kp_s__2);
    __pyx_t_1 = __pyx_kp_s__2;
  }
  __pyx_t_3 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 248, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_hedge_flag); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 248, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_hedge_flag);
    __pyx_t_1 = __pyx_v_hedge_flag;
  } else {
    __Pyx_INCREF(__pyx_kp_s__2);
    __pyx_t_1 = __pyx_kp_s__2;
  }
  __pyx_t_5 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_AsString(__pyx_t_5); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 248, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->collector->QryInstrumentMarginRate(__pyx_t_4, __pyx_t_6)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":247
 *         return self.collector.RemoveParkAction(as_str(rpid if rpid else ""))
 * 
 *     def query_instrument_margin_rate(self, iid, hedge_flag):             # <<<<<<<<<<<<<<
 *         return self.collector.QryInstrumentMarginRate(as_str(iid if iid else ""), as_str(hedge_flag if hedge_flag else ""))
 *     def query_instrument_commission_rate(self, iid):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.query_instrument_margin_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":249
 *     def query_instrument_margin_rate(self, iid, hedge_flag):
 *         return self.collector.QryInstrumentMarginRate(as_str(iid if iid else ""), as_str(hedge_flag if hedge_flag else ""))
 *     def query_instrument_commission_rate(self, iid):             # <<<<<<<<<<<<<<
 *         return self.collector.QryInstrumentCommissionRate(as_str(iid if iid else ""))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_117query_instrument_commission_rate(PyObject *__pyx_v_self, PyObject *__pyx_v_iid); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_117query_instrument_commission_rate(PyObject *__pyx_v_self, PyObject *__pyx_v_iid) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("query_instrument_commission_rate (wrapper)", 0);
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_116query_instrument_commission_rate(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self), ((PyObject *)__pyx_v_iid));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_116query_instrument_commission_rate(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_iid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  __Pyx_RefNannySetupContext("query_instrument_commission_rate", 0);

  /* "src/ctp_trader.pyx":250
 *         return self.collector.QryInstrumentMarginRate(as_str(iid if iid else ""), as_str(hedge_flag if hedge_flag else ""))
 *     def query_instrument_commission_rate(self, iid):
 *         return self.collector.QryInstrumentCommissionRate(as_str(iid if iid else ""))             # <<<<<<<<<<<<<<
 * 
 *     def query_exchange_margin_rate(self, iid, hedge_flag):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_iid); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 250, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_iid);
    __pyx_t_1 = __pyx_v_iid;
  } else {
    __Pyx_INCREF(__pyx_kp_s__2);
    __pyx_t_1 = __pyx_kp_s__2;
  }
  __pyx_t_3 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 250, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->collector->QryInstrumentCommissionRate(__pyx_t_4)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":249
 *     def query_instrument_margin_rate(self, iid, hedge_flag):
 *         return self.collector.QryInstrumentMarginRate(as_str(iid if iid else ""), as_str(hedge_flag if hedge_flag else ""))
 *     def query_instrument_commission_rate(self, iid):             # <<<<<<<<<<<<<<
 *         return self.collector.QryInstrumentCommissionRate(as_str(iid if iid else ""))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.query_instrument_commission_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":252
 *         return self.collector.QryInstrumentCommissionRate(as_str(iid if iid else ""))
 * 
 *     def query_exchange_margin_rate(self, iid, hedge_flag):             # <<<<<<<<<<<<<<
 *         return self.collector.QryExchangeMarginRate(as_str(iid if iid else ""), as_str(hedge_flag if hedge_flag else ""))
 *     def query_exchange_margin_rate_adjust(self, iid, hedge_flag):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_119query_exchange_margin_rate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_119query_exchange_margin_rate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_iid = 0;
  PyObject *__pyx_v_hedge_flag = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("query_exchange_margin_rate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_iid,&__pyx_n_s_hedge_flag,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_iid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_hedge_flag)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("query_exchange_margin_rate", 1, 2, 2, 1); __PYX_ERR(0, 252, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "query_exchange_margin_rate") < 0)) __PYX_ERR(0, 252, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_iid = values[0];
    __pyx_v_hedge_flag = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("query_exchange_margin_rate", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 252, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.query_exchange_margin_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_118query_exchange_margin_rate(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self), __pyx_v_iid, __pyx_v_hedge_flag);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_118query_exchange_margin_rate(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_iid, PyObject *__pyx_v_hedge_flag) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  char const *__pyx_t_6;
  __Pyx_RefNannySetupContext("query_exchange_margin_rate", 0);

  /* "src/ctp_trader.pyx":253
 * 
 *     def query_exchange_margin_rate(self, iid, hedge_flag):
 *         return self.collector.QryExchangeMarginRate(as_str(iid if iid else ""), as_str(hedge_flag if hedge_flag else ""))             # <<<<<<<<<<<<<<
 *     def query_exchange_margin_rate_adjust(self, iid, hedge_flag):
 *         return self.collector.QryExchangeMarginRateAdjust(as_str(iid if iid else ""), as_str(hedge_flag if hedge_flag else ""))
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_iid); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 253, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_iid);
    __pyx_t_1 = __pyx_v_iid;
  } else {
    __Pyx_INCREF(__pyx_kp_s__2);
    __pyx_t_1 = __pyx_kp_s__2;
  }
  __pyx_t_3 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 253, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_hedge_flag); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 253, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_hedge_flag);
    __pyx_t_1 = __pyx_v_hedge_flag;
  } else {
    __Pyx_INCREF(__pyx_kp_s__2);
    __pyx_t_1 = __pyx_kp_s__2;
  }
  __pyx_t_5 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_AsString(__pyx_t_5); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 253, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->collector->QryExchangeMarginRate(__pyx_t_4, __pyx_t_6)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":252
 *         return self.collector.QryInstrumentCommissionRate(as_str(iid if iid else ""))
 * 
 *     def query_exchange_margin_rate(self, iid, hedge_flag):             # <<<<<<<<<<<<<<
 *         return self.collector.QryExchangeMarginRate(as_str(iid if iid else ""), as_str(hedge_flag if hedge_flag else ""))
 *     def query_exchange_margin_rate_adjust(self, iid, hedge_flag):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.query_exchange_margin_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":254
 *     def query_exchange_margin_rate(self, iid, hedge_flag):
 *         return self.collector.QryExchangeMarginRate(as_str(iid if iid else ""), as_str(hedge_flag if hedge_flag else ""))
 *     def query_exchange_margin_rate_adjust(self, iid, hedge_flag):             # <<<<<<<<<<<<<<
 *         return self.collector.QryExchangeMarginRateAdjust(as_str(iid if iid else ""), as_str(hedge_flag if hedge_flag else ""))
 *     def query_currency_rate(self, from_id, to_cid):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_121query_exchange_margin_rate_adjust(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_121query_exchange_margin_rate_adjust(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_iid = 0;
  PyObject *__pyx_v_hedge_flag = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("query_exchange_margin_rate_adjust (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_iid,&__pyx_n_s_hedge_flag,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_iid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_hedge_flag)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("query_exchange_margin_rate_adjust", 1, 2, 2, 1); __PYX_ERR(0, 254, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "query_exchange_margin_rate_adjust") < 0)) __PYX_ERR(0, 254, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_iid = values[0];
    __pyx_v_hedge_flag = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("query_exchange_margin_rate_adjust", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 254, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.query_exchange_margin_rate_adjust", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_120query_exchange_margin_rate_adjust(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self), __pyx_v_iid, __pyx_v_hedge_flag);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_120query_exchange_margin_rate_adjust(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_iid, PyObject *__pyx_v_hedge_flag) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  char const *__pyx_t_6;
  __Pyx_RefNannySetupContext("query_exchange_margin_rate_adjust", 0);

  /* "src/ctp_trader.pyx":255
 *         return self.collector.QryExchangeMarginRate(as_str(iid if iid else ""), as_str(hedge_flag if hedge_flag else ""))
 *     def query_exchange_margin_rate_adjust(self, iid, hedge_flag):
 *         return self.collector.QryExchangeMarginRateAdjust(as_str(iid if iid else ""), as_str(hedge_flag if hedge_flag else ""))             # <<<<<<<<<<<<<<
 *     def query_currency_rate(self, from_id, to_cid):
 *         return self.collector.QryCurrencyRate(as_str(from_id if from_id else ""), as_str(to_cid if to_cid else ""))
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_iid); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 255, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_iid);
    __pyx_t_1 = __pyx_v_iid;
  } else {
    __Pyx_INCREF(__pyx_kp_s__2);
    __pyx_t_1 = __pyx_kp_s__2;
  }
  __pyx_t_3 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 255, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_hedge_flag); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 255, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_hedge_flag);
    __pyx_t_1 = __pyx_v_hedge_flag;
  } else {
    __Pyx_INCREF(__pyx_kp_s__2);
    __pyx_t_1 = __pyx_kp_s__2;
  }
  __pyx_t_5 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_AsString(__pyx_t_5); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 255, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->collector->QryExchangeMarginRateAdjust(__pyx_t_4, __pyx_t_6)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":254
 *     def query_exchange_margin_rate(self, iid, hedge_flag):
 *         return self.collector.QryExchangeMarginRate(as_str(iid if iid else ""), as_str(hedge_flag if hedge_flag else ""))
 *     def query_exchange_margin_rate_adjust(self, iid, hedge_flag):             # <<<<<<<<<<<<<<
 *         return self.collector.QryExchangeMarginRateAdjust(as_str(iid if iid else ""), as_str(hedge_flag if hedge_flag else ""))
 *     def query_currency_rate(self, from_id, to_cid):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.query_exchange_margin_rate_adjust", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":256
 *     def query_exchange_margin_rate_adjust(self, iid, hedge_flag):
 *         return self.collector.QryExchangeMarginRateAdjust(as_str(iid if iid else ""), as_str(hedge_flag if hedge_flag else ""))
 *     def query_currency_rate(self, from_id, to_cid):             # <<<<<<<<<<<<<<
 *         return self.collector.QryCurrencyRate(as_str(from_id if from_id else ""), as_str(to_cid if to_cid else ""))
 *     def query_product_rate(self, pid):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_123query_currency_rate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_123query_currency_rate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_from_id = 0;
  PyObject *__pyx_v_to_cid = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("query_currency_rate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_from_id,&__pyx_n_s_to_cid,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_from_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_to_cid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("query_currency_rate", 1, 2, 2, 1); __PYX_ERR(0, 256, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "query_currency_rate") < 0)) __PYX_ERR(0, 256, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_from_id = values[0];
    __pyx_v_to_cid = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("query_currency_rate", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 256, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.query_currency_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_122query_currency_rate(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self), __pyx_v_from_id, __pyx_v_to_cid);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_122query_currency_rate(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_from_id, PyObject *__pyx_v_to_cid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  char const *__pyx_t_6;
  __Pyx_RefNannySetupContext("query_currency_rate", 0);

  /* "src/ctp_trader.pyx":257
 *         return self.collector.QryExchangeMarginRateAdjust(as_str(iid if iid else ""), as_str(hedge_flag if hedge_flag else ""))
 *     def query_currency_rate(self, from_id, to_cid):
 *         return self.collector.QryCurrencyRate(as_str(from_id if from_id else ""), as_str(to_cid if to_cid else ""))             # <<<<<<<<<<<<<<
 *     def query_product_rate(self, pid):
 *         return self.collector.QryProductRate(as_str(pid if pid else ""))
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_from_id); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 257, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_from_id);
    __pyx_t_1 = __pyx_v_from_id;
  } else {
    __Pyx_INCREF(__pyx_kp_s__2);
    __pyx_t_1 = __pyx_kp_s__2;
  }
  __pyx_t_3 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 257, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_to_cid); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 257, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_to_cid);
    __pyx_t_1 = __pyx_v_to_cid;
  } else {
    __Pyx_INCREF(__pyx_kp_s__2);
    __pyx_t_1 = __pyx_kp_s__2;
  }
  __pyx_t_5 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_AsString(__pyx_t_5); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 257, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->collector->QryCurrencyRate(__pyx_t_4, __pyx_t_6)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":256
 *     def query_exchange_margin_rate_adjust(self, iid, hedge_flag):
 *         return self.collector.QryExchangeMarginRateAdjust(as_str(iid if iid else ""), as_str(hedge_flag if hedge_flag else ""))
 *     def query_currency_rate(self, from_id, to_cid):             # <<<<<<<<<<<<<<
 *         return self.collector.QryCurrencyRate(as_str(from_id if from_id else ""), as_str(to_cid if to_cid else ""))
 *     def query_product_rate(self, pid):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.query_currency_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":258
 *     def query_currency_rate(self, from_id, to_cid):
 *         return self.collector.QryCurrencyRate(as_str(from_id if from_id else ""), as_str(to_cid if to_cid else ""))
 *     def query_product_rate(self, pid):             # <<<<<<<<<<<<<<
 *         return self.collector.QryProductRate(as_str(pid if pid else ""))
 *     def query_product_group(self, pid, eid=None):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_125query_product_rate(PyObject *__pyx_v_self, PyObject *__pyx_v_pid); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_125query_product_rate(PyObject *__pyx_v_self, PyObject *__pyx_v_pid) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("query_product_rate (wrapper)", 0);
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_124query_product_rate(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self), ((PyObject *)__pyx_v_pid));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_124query_product_rate(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_pid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  __Pyx_RefNannySetupContext("query_product_rate", 0);

  /* "src/ctp_trader.pyx":259
 *         return self.collector.QryCurrencyRate(as_str(from_id if from_id else ""), as_str(to_cid if to_cid else ""))
 *     def query_product_rate(self, pid):
 *         return self.collector.QryProductRate(as_str(pid if pid else ""))             # <<<<<<<<<<<<<<
 *     def query_product_group(self, pid, eid=None):
 *         return self.collector.QryProductGroup(as_str(pid if pid else ""), as_str(eid if eid else ""))
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_pid); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 259, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_pid);
    __pyx_t_1 = __pyx_v_pid;
  } else {
    __Pyx_INCREF(__pyx_kp_s__2);
    __pyx_t_1 = __pyx_kp_s__2;
  }
  __pyx_t_3 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 259, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->collector->QryProductRate(__pyx_t_4)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":258
 *     def query_currency_rate(self, from_id, to_cid):
 *         return self.collector.QryCurrencyRate(as_str(from_id if from_id else ""), as_str(to_cid if to_cid else ""))
 *     def query_product_rate(self, pid):             # <<<<<<<<<<<<<<
 *         return self.collector.QryProductRate(as_str(pid if pid else ""))
 *     def query_product_group(self, pid, eid=None):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.query_product_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":260
 *     def query_product_rate(self, pid):
 *         return self.collector.QryProductRate(as_str(pid if pid else ""))
 *     def query_product_group(self, pid, eid=None):             # <<<<<<<<<<<<<<
 *         return self.collector.QryProductGroup(as_str(pid if pid else ""), as_str(eid if eid else ""))
 *     '''
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_127query_product_group(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_127query_product_group(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pid = 0;
  PyObject *__pyx_v_eid = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("query_product_group (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pid,&__pyx_n_s_eid,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_eid);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "query_product_group") < 0)) __PYX_ERR(0, 260, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_pid = values[0];
    __pyx_v_eid = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("query_product_group", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 260, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.query_product_group", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_126query_product_group(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self), __pyx_v_pid, __pyx_v_eid);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_126query_product_group(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self, PyObject *__pyx_v_pid, PyObject *__pyx_v_eid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  char const *__pyx_t_6;
  __Pyx_RefNannySetupContext("query_product_group", 0);

  /* "src/ctp_trader.pyx":261
 *         return self.collector.QryProductRate(as_str(pid if pid else ""))
 *     def query_product_group(self, pid, eid=None):
 *         return self.collector.QryProductGroup(as_str(pid if pid else ""), as_str(eid if eid else ""))             # <<<<<<<<<<<<<<
 *     '''
 *     def insert_park_order(self, iid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_pid); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 261, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_pid);
    __pyx_t_1 = __pyx_v_pid;
  } else {
    __Pyx_INCREF(__pyx_kp_s__2);
    __pyx_t_1 = __pyx_kp_s__2;
  }
  __pyx_t_3 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 261, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_eid); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 261, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_eid);
    __pyx_t_1 = __pyx_v_eid;
  } else {
    __Pyx_INCREF(__pyx_kp_s__2);
    __pyx_t_1 = __pyx_kp_s__2;
  }
  __pyx_t_5 = __pyx_f_3src_10ctp_trader_as_str(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_AsString(__pyx_t_5); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 261, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->collector->QryProductGroup(__pyx_t_4, __pyx_t_6)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":260
 *     def query_product_rate(self, pid):
 *         return self.collector.QryProductRate(as_str(pid if pid else ""))
 *     def query_product_group(self, pid, eid=None):             # <<<<<<<<<<<<<<
 *         return self.collector.QryProductGroup(as_str(pid if pid else ""), as_str(eid if eid else ""))
 *     '''
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.query_product_group", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":279
 *     #def ReqQryInstrument(CThostFtdcQryInstrumentField *pQryInstrument, int nRequestID):
 *     #    return self.collector.ReqQryInstrument()
 *     def get_handler(self):             # <<<<<<<<<<<<<<
 *         return self.handler
 *     #def join(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_129get_handler(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_129get_handler(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_handler (wrapper)", 0);
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_128get_handler(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_128get_handler(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_handler", 0);

  /* "src/ctp_trader.pyx":280
 *     #    return self.collector.ReqQryInstrument()
 *     def get_handler(self):
 *         return self.handler             # <<<<<<<<<<<<<<
 *     #def join(self):
 *     #    self._mdApi.Join()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_handler); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/ctp_trader.pyx":279
 *     #def ReqQryInstrument(CThostFtdcQryInstrumentField *pQryInstrument, int nRequestID):
 *     #    return self.collector.ReqQryInstrument()
 *     def get_handler(self):             # <<<<<<<<<<<<<<
 *         return self.handler
 *     #def join(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.get_handler", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/ctp_trader.pyx":283
 *     #def join(self):
 *     #    self._mdApi.Join()
 *     def close(self):             # <<<<<<<<<<<<<<
 *         if self.collector: return self.collector.Close()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_131close(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3src_10ctp_trader_9CtpTrader_131close(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("close (wrapper)", 0);
  __pyx_r = __pyx_pf_3src_10ctp_trader_9CtpTrader_130close(((struct __pyx_obj_3src_10ctp_trader_CtpTrader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3src_10ctp_trader_9CtpTrader_130close(struct __pyx_obj_3src_10ctp_trader_CtpTrader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("close", 0);

  /* "src/ctp_trader.pyx":284
 *     #    self._mdApi.Join()
 *     def close(self):
 *         if self.collector: return self.collector.Close()             # <<<<<<<<<<<<<<
 * 
 * #print "Imported CTP Trader Module"
 */
  __pyx_t_1 = (__pyx_v_self->collector != 0);
  if (__pyx_t_1) {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->collector->Close()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 284, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "src/ctp_trader.pyx":283
 *     #def join(self):
 *     #    self._mdApi.Join()
 *     def close(self):             # <<<<<<<<<<<<<<
 *         if self.collector: return self.collector.Close()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("src.ctp_trader.CtpTrader.close", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EnumBase":16
 * @cython.internal
 * cdef class __Pyx_EnumMeta(type):
 *     def __init__(cls, name, parents, dct):             # <<<<<<<<<<<<<<
 *         type.__init__(cls, name, parents, dct)
 *         cls.__members__ = __Pyx_OrderedDict()
 */

/* Python wrapper */
static int __pyx_pw_8EnumBase_14__Pyx_EnumMeta_1__init__(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8EnumBase_14__Pyx_EnumMeta_1__init__(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_parents = 0;
  PyObject *__pyx_v_dct = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_parents,&__pyx_n_s_dct,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_parents)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 1); __PYX_ERR(1, 16, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dct)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 2); __PYX_ERR(1, 16, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(1, 16, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_name = values[0];
    __pyx_v_parents = values[1];
    __pyx_v_dct = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 16, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("EnumBase.__Pyx_EnumMeta.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8EnumBase_14__Pyx_EnumMeta___init__(((struct __pyx_obj___Pyx_EnumMeta *)__pyx_v_cls), __pyx_v_name, __pyx_v_parents, __pyx_v_dct);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8EnumBase_14__Pyx_EnumMeta___init__(struct __pyx_obj___Pyx_EnumMeta *__pyx_v_cls, PyObject *__pyx_v_name, PyObject *__pyx_v_parents, PyObject *__pyx_v_dct) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "EnumBase":17
 * cdef class __Pyx_EnumMeta(type):
 *     def __init__(cls, name, parents, dct):
 *         type.__init__(cls, name, parents, dct)             # <<<<<<<<<<<<<<
 *         cls.__members__ = __Pyx_OrderedDict()
 *     def __iter__(cls):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)(&PyType_Type)), __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[5] = {__pyx_t_3, ((PyObject *)__pyx_v_cls), __pyx_v_name, __pyx_v_parents, __pyx_v_dct};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[5] = {__pyx_t_3, ((PyObject *)__pyx_v_cls), __pyx_v_name, __pyx_v_parents, __pyx_v_dct};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(4+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 17, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_cls));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_cls));
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, ((PyObject *)__pyx_v_cls));
    __Pyx_INCREF(__pyx_v_name);
    __Pyx_GIVEREF(__pyx_v_name);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_name);
    __Pyx_INCREF(__pyx_v_parents);
    __Pyx_GIVEREF(__pyx_v_parents);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_v_parents);
    __Pyx_INCREF(__pyx_v_dct);
    __Pyx_GIVEREF(__pyx_v_dct);
    PyTuple_SET_ITEM(__pyx_t_5, 3+__pyx_t_4, __pyx_v_dct);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "EnumBase":18
 *     def __init__(cls, name, parents, dct):
 *         type.__init__(cls, name, parents, dct)
 *         cls.__members__ = __Pyx_OrderedDict()             # <<<<<<<<<<<<<<
 *     def __iter__(cls):
 *         return iter(cls.__members__.values())
 */
  __Pyx_INCREF(__Pyx_OrderedDict);
  __pyx_t_2 = __Pyx_OrderedDict; __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 18, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 18, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_cls), __pyx_n_s_members, __pyx_t_1) < 0) __PYX_ERR(1, 18, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "EnumBase":16
 * @cython.internal
 * cdef class __Pyx_EnumMeta(type):
 *     def __init__(cls, name, parents, dct):             # <<<<<<<<<<<<<<
 *         type.__init__(cls, name, parents, dct)
 *         cls.__members__ = __Pyx_OrderedDict()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("EnumBase.__Pyx_EnumMeta.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EnumBase":19
 *         type.__init__(cls, name, parents, dct)
 *         cls.__members__ = __Pyx_OrderedDict()
 *     def __iter__(cls):             # <<<<<<<<<<<<<<
 *         return iter(cls.__members__.values())
 *     def __getitem__(cls, name):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8EnumBase_14__Pyx_EnumMeta_3__iter__(PyObject *__pyx_v_cls); /*proto*/
static PyObject *__pyx_pw_8EnumBase_14__Pyx_EnumMeta_3__iter__(PyObject *__pyx_v_cls) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8EnumBase_14__Pyx_EnumMeta_2__iter__(((struct __pyx_obj___Pyx_EnumMeta *)__pyx_v_cls));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8EnumBase_14__Pyx_EnumMeta_2__iter__(struct __pyx_obj___Pyx_EnumMeta *__pyx_v_cls) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__iter__", 0);

  /* "EnumBase":20
 *         cls.__members__ = __Pyx_OrderedDict()
 *     def __iter__(cls):
 *         return iter(cls.__members__.values())             # <<<<<<<<<<<<<<
 *     def __getitem__(cls, name):
 *         return cls.__members__[name]
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_cls), __pyx_n_s_members); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_values); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 20, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 20, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "EnumBase":19
 *         type.__init__(cls, name, parents, dct)
 *         cls.__members__ = __Pyx_OrderedDict()
 *     def __iter__(cls):             # <<<<<<<<<<<<<<
 *         return iter(cls.__members__.values())
 *     def __getitem__(cls, name):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("EnumBase.__Pyx_EnumMeta.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EnumBase":21
 *     def __iter__(cls):
 *         return iter(cls.__members__.values())
 *     def __getitem__(cls, name):             # <<<<<<<<<<<<<<
 *         return cls.__members__[name]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8EnumBase_14__Pyx_EnumMeta_5__getitem__(PyObject *__pyx_v_cls, PyObject *__pyx_v_name); /*proto*/
static PyObject *__pyx_pw_8EnumBase_14__Pyx_EnumMeta_5__getitem__(PyObject *__pyx_v_cls, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8EnumBase_14__Pyx_EnumMeta_4__getitem__(((struct __pyx_obj___Pyx_EnumMeta *)__pyx_v_cls), ((PyObject *)__pyx_v_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8EnumBase_14__Pyx_EnumMeta_4__getitem__(struct __pyx_obj___Pyx_EnumMeta *__pyx_v_cls, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "EnumBase":22
 *         return iter(cls.__members__.values())
 *     def __getitem__(cls, name):
 *         return cls.__members__[name]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_cls), __pyx_n_s_members); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_v_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "EnumBase":21
 *     def __iter__(cls):
 *         return iter(cls.__members__.values())
 *     def __getitem__(cls, name):             # <<<<<<<<<<<<<<
 *         return cls.__members__[name]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("EnumBase.__Pyx_EnumMeta.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EnumBase":28
 * class __Pyx_EnumBase(int):
 *     __metaclass__ = __Pyx_EnumMeta
 *     def __new__(cls, value, name=None):             # <<<<<<<<<<<<<<
 *         for v in cls:
 *             if v == value:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8EnumBase_14__Pyx_EnumBase_1__new__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8EnumBase_14__Pyx_EnumBase_1__new__ = {"__new__", (PyCFunction)__pyx_pw_8EnumBase_14__Pyx_EnumBase_1__new__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8EnumBase_14__Pyx_EnumBase_1__new__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_cls = 0;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__new__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cls,&__pyx_n_s_value,&__pyx_n_s_name,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cls)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__new__", 0, 2, 3, 1); __PYX_ERR(1, 28, __pyx_L3_error)
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__new__") < 0)) __PYX_ERR(1, 28, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_cls = values[0];
    __pyx_v_value = values[1];
    __pyx_v_name = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__new__", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 28, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("EnumBase.__Pyx_EnumBase.__new__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8EnumBase_14__Pyx_EnumBase___new__(__pyx_self, __pyx_v_cls, __pyx_v_value, __pyx_v_name);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8EnumBase_14__Pyx_EnumBase___new__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cls, PyObject *__pyx_v_value, PyObject *__pyx_v_name) {
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_v_res = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  __Pyx_RefNannySetupContext("__new__", 0);

  /* "EnumBase":29
 *     __metaclass__ = __Pyx_EnumMeta
 *     def __new__(cls, value, name=None):
 *         for v in cls:             # <<<<<<<<<<<<<<
 *             if v == value:
 *                 return v
 */
  if (likely(PyList_CheckExact(__pyx_v_cls)) || PyTuple_CheckExact(__pyx_v_cls)) {
    __pyx_t_1 = __pyx_v_cls; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_cls); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 29, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 29, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 29, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 29, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 29, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 29, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 29, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "EnumBase":30
 *     def __new__(cls, value, name=None):
 *         for v in cls:
 *             if v == value:             # <<<<<<<<<<<<<<
 *                 return v
 *         if name is None:
 */
    __pyx_t_4 = PyObject_RichCompare(__pyx_v_v, __pyx_v_value, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 30, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(1, 30, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_5) {

      /* "EnumBase":31
 *         for v in cls:
 *             if v == value:
 *                 return v             # <<<<<<<<<<<<<<
 *         if name is None:
 *             raise ValueError("Unknown enum value: '%s'" % value)
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_v);
      __pyx_r = __pyx_v_v;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;

      /* "EnumBase":30
 *     def __new__(cls, value, name=None):
 *         for v in cls:
 *             if v == value:             # <<<<<<<<<<<<<<
 *                 return v
 *         if name is None:
 */
    }

    /* "EnumBase":29
 *     __metaclass__ = __Pyx_EnumMeta
 *     def __new__(cls, value, name=None):
 *         for v in cls:             # <<<<<<<<<<<<<<
 *             if v == value:
 *                 return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "EnumBase":32
 *             if v == value:
 *                 return v
 *         if name is None:             # <<<<<<<<<<<<<<
 *             raise ValueError("Unknown enum value: '%s'" % value)
 *         res = int.__new__(cls, value)
 */
  __pyx_t_5 = (__pyx_v_name == Py_None);
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (__pyx_t_6) {

    /* "EnumBase":33
 *                 return v
 *         if name is None:
 *             raise ValueError("Unknown enum value: '%s'" % value)             # <<<<<<<<<<<<<<
 *         res = int.__new__(cls, value)
 *         res.name = name
 */
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_Unknown_enum_value_s, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 33, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 33, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 33, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 33, __pyx_L1_error)

    /* "EnumBase":32
 *             if v == value:
 *                 return v
 *         if name is None:             # <<<<<<<<<<<<<<
 *             raise ValueError("Unknown enum value: '%s'" % value)
 *         res = int.__new__(cls, value)
 */
  }

  /* "EnumBase":34
 *         if name is None:
 *             raise ValueError("Unknown enum value: '%s'" % value)
 *         res = int.__new__(cls, value)             # <<<<<<<<<<<<<<
 *         res.name = name
 *         setattr(cls, name, res)
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)(&PyInt_Type)), __pyx_n_s_new); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_v_cls, __pyx_v_value};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 34, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_v_cls, __pyx_v_value};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 34, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_9 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 34, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_INCREF(__pyx_v_cls);
    __Pyx_GIVEREF(__pyx_v_cls);
    PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_v_cls);
    __Pyx_INCREF(__pyx_v_value);
    __Pyx_GIVEREF(__pyx_v_value);
    PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_v_value);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 34, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_res = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "EnumBase":35
 *             raise ValueError("Unknown enum value: '%s'" % value)
 *         res = int.__new__(cls, value)
 *         res.name = name             # <<<<<<<<<<<<<<
 *         setattr(cls, name, res)
 *         cls.__members__[name] = res
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_res, __pyx_n_s_name, __pyx_v_name) < 0) __PYX_ERR(1, 35, __pyx_L1_error)

  /* "EnumBase":36
 *         res = int.__new__(cls, value)
 *         res.name = name
 *         setattr(cls, name, res)             # <<<<<<<<<<<<<<
 *         cls.__members__[name] = res
 *         return res
 */
  __pyx_t_10 = PyObject_SetAttr(__pyx_v_cls, __pyx_v_name, __pyx_v_res); if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(1, 36, __pyx_L1_error)

  /* "EnumBase":37
 *         res.name = name
 *         setattr(cls, name, res)
 *         cls.__members__[name] = res             # <<<<<<<<<<<<<<
 *         return res
 *     def __repr__(self):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_cls, __pyx_n_s_members); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_v_name, __pyx_v_res) < 0)) __PYX_ERR(1, 37, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "EnumBase":38
 *         setattr(cls, name, res)
 *         cls.__members__[name] = res
 *         return res             # <<<<<<<<<<<<<<
 *     def __repr__(self):
 *         return "<%s.%s: %d>" % (self.__class__.__name__, self.name, self)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_res);
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "EnumBase":28
 * class __Pyx_EnumBase(int):
 *     __metaclass__ = __Pyx_EnumMeta
 *     def __new__(cls, value, name=None):             # <<<<<<<<<<<<<<
 *         for v in cls:
 *             if v == value:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("EnumBase.__Pyx_EnumBase.__new__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XDECREF(__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EnumBase":39
 *         cls.__members__[name] = res
 *         return res
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<%s.%s: %d>" % (self.__class__.__name__, self.name, self)
 *     def __str__(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8EnumBase_14__Pyx_EnumBase_3__repr__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_8EnumBase_14__Pyx_EnumBase_3__repr__ = {"__repr__", (PyCFunction)__pyx_pw_8EnumBase_14__Pyx_EnumBase_3__repr__, METH_O, 0};
static PyObject *__pyx_pw_8EnumBase_14__Pyx_EnumBase_3__repr__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8EnumBase_14__Pyx_EnumBase_2__repr__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8EnumBase_14__Pyx_EnumBase_2__repr__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "EnumBase":40
 *         return res
 *     def __repr__(self):
 *         return "<%s.%s: %d>" % (self.__class__.__name__, self.name, self)             # <<<<<<<<<<<<<<
 *     def __str__(self):
 *         return "%s.%s" % (self.__class__.__name__, self.name)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_class); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_name_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_INCREF(__pyx_v_self);
  __Pyx_GIVEREF(__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_self);
  __pyx_t_2 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_s_s_d, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EnumBase":39
 *         cls.__members__[name] = res
 *         return res
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<%s.%s: %d>" % (self.__class__.__name__, self.name, self)
 *     def __str__(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("EnumBase.__Pyx_EnumBase.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EnumBase":41
 *     def __repr__(self):
 *         return "<%s.%s: %d>" % (self.__class__.__name__, self.name, self)
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "%s.%s" % (self.__class__.__name__, self.name)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8EnumBase_14__Pyx_EnumBase_5__str__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_8EnumBase_14__Pyx_EnumBase_5__str__ = {"__str__", (PyCFunction)__pyx_pw_8EnumBase_14__Pyx_EnumBase_5__str__, METH_O, 0};
static PyObject *__pyx_pw_8EnumBase_14__Pyx_EnumBase_5__str__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8EnumBase_14__Pyx_EnumBase_4__str__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8EnumBase_14__Pyx_EnumBase_4__str__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "EnumBase":42
 *         return "<%s.%s: %d>" % (self.__class__.__name__, self.name, self)
 *     def __str__(self):
 *         return "%s.%s" % (self.__class__.__name__, self.name)             # <<<<<<<<<<<<<<
 * 
 * if PY_VERSION_HEX >= 0x03040000:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_class); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_name_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_s_s, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EnumBase":41
 *     def __repr__(self):
 *         return "<%s.%s: %d>" % (self.__class__.__name__, self.name, self)
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "%s.%s" % (self.__class__.__name__, self.name)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("EnumBase.__Pyx_EnumBase.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_3src_10ctp_trader_CtpTrader(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_3src_10ctp_trader_9CtpTrader_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_3src_10ctp_trader_CtpTrader(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_3src_10ctp_trader_9CtpTrader_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_3src_10ctp_trader_CtpTrader[] = {
  {"version", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_5version, METH_VARARGS|METH_KEYWORDS, 0},
  {"connect", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_7connect, METH_VARARGS|METH_KEYWORDS, 0},
  {"auth", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_9auth, METH_NOARGS, 0},
  {"login", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_11login, METH_VARARGS|METH_KEYWORDS, 0},
  {"logout", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_13logout, METH_NOARGS, 0},
  {"get_trading_day", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_15get_trading_day, METH_NOARGS, 0},
  {"change_user_pwd", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_17change_user_pwd, METH_VARARGS|METH_KEYWORDS, 0},
  {"change_trading_pwd", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_19change_trading_pwd, METH_VARARGS|METH_KEYWORDS, 0},
  {"query_settle_confirm", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_21query_settle_confirm, METH_NOARGS, 0},
  {"query_settle", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_23query_settle, METH_VARARGS|METH_KEYWORDS, 0},
  {"confirm_settle", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_25confirm_settle, METH_NOARGS, 0},
  {"query_notice", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_27query_notice, METH_NOARGS, 0},
  {"query_trading_notice", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_29query_trading_notice, METH_NOARGS, 0},
  {"query_investor", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_31query_investor, METH_NOARGS, 0},
  {"query_exchange", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_33query_exchange, METH_VARARGS|METH_KEYWORDS, 0},
  {"query_product", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_35query_product, METH_VARARGS|METH_KEYWORDS, 0},
  {"query_instrument", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_37query_instrument, METH_VARARGS|METH_KEYWORDS, 0},
  {"query_instruments", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_39query_instruments, METH_NOARGS, 0},
  {"add_instrument", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_41add_instrument, METH_O, 0},
  {"get_instruments", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_43get_instruments, METH_NOARGS, 0},
  {"query_position", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_45query_position, METH_VARARGS|METH_KEYWORDS, 0},
  {"query_position_detail", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_47query_position_detail, METH_VARARGS|METH_KEYWORDS, 0},
  {"query_position_comb_detail", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_49query_position_comb_detail, METH_VARARGS|METH_KEYWORDS, 0},
  {"query_park_order", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_51query_park_order, METH_VARARGS|METH_KEYWORDS, 0},
  {"query_park_order_action", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_53query_park_order_action, METH_VARARGS|METH_KEYWORDS, 0},
  {"query_order", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_55query_order, METH_NOARGS, 0},
  {"query_order_max_volume", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_57query_order_max_volume, METH_VARARGS|METH_KEYWORDS, 0},
  {"query_trade", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_59query_trade, METH_VARARGS|METH_KEYWORDS, 0},
  {"query_account_register", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_61query_account_register, METH_VARARGS|METH_KEYWORDS, 0},
  {"add_bank_account", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_63add_bank_account, METH_O, 0},
  {"get_bank_accounts", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_65get_bank_accounts, METH_NOARGS, 0},
  {"query_transfer_bank", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_67query_transfer_bank, METH_VARARGS|METH_KEYWORDS, 0},
  {"query_contract_bank", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_69query_contract_bank, METH_VARARGS|METH_KEYWORDS, 0},
  {"query_trade_account", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_71query_trade_account, METH_NOARGS, 0},
  {"query_trade_code", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_73query_trade_code, METH_VARARGS|METH_KEYWORDS, 0},
  {"add_trade_code", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_75add_trade_code, METH_O, 0},
  {"get_trade_codes", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_77get_trade_codes, METH_NOARGS, 0},
  {"deposit_money", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_79deposit_money, METH_VARARGS|METH_KEYWORDS, 0},
  {"withdraw_money", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_81withdraw_money, METH_VARARGS|METH_KEYWORDS, 0},
  {"query_transfer", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_83query_transfer, METH_O, 0},
  {"query_bank_money", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_85query_bank_money, METH_VARARGS|METH_KEYWORDS, 0},
  {"query_market_data", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_87query_market_data, METH_O, 0},
  {"ask_quote", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_89ask_quote, METH_VARARGS|METH_KEYWORDS, 0},
  {"query_ask_quote", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_91query_ask_quote, METH_NOARGS, 0},
  {"answer_quote", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_93answer_quote, METH_VARARGS|METH_KEYWORDS, 0},
  {"cancel_answer_quote", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_95cancel_answer_quote, METH_O, 0},
  {"insert_limit_price_order", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_97insert_limit_price_order, METH_VARARGS|METH_KEYWORDS, 0},
  {"insert_market_price_order", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_99insert_market_price_order, METH_VARARGS|METH_KEYWORDS, 0},
  {"insert_condition_order", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_101insert_condition_order, METH_VARARGS|METH_KEYWORDS, 0},
  {"insert_fok_order", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_103insert_fok_order, METH_VARARGS|METH_KEYWORDS, 0},
  {"insert_fak_order", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_105insert_fak_order, METH_VARARGS|METH_KEYWORDS, 0},
  {"delete_order_by_ref", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_107delete_order_by_ref, METH_VARARGS|METH_KEYWORDS, 0},
  {"delete_order_by_sysid", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_109delete_order_by_sysid, METH_VARARGS|METH_KEYWORDS, 0},
  {"delete_park", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_111delete_park, METH_O, 0},
  {"delete_park_action", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_113delete_park_action, METH_O, 0},
  {"query_instrument_margin_rate", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_115query_instrument_margin_rate, METH_VARARGS|METH_KEYWORDS, 0},
  {"query_instrument_commission_rate", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_117query_instrument_commission_rate, METH_O, 0},
  {"query_exchange_margin_rate", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_119query_exchange_margin_rate, METH_VARARGS|METH_KEYWORDS, 0},
  {"query_exchange_margin_rate_adjust", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_121query_exchange_margin_rate_adjust, METH_VARARGS|METH_KEYWORDS, 0},
  {"query_currency_rate", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_123query_currency_rate, METH_VARARGS|METH_KEYWORDS, 0},
  {"query_product_rate", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_125query_product_rate, METH_O, 0},
  {"query_product_group", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_127query_product_group, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_handler", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_129get_handler, METH_NOARGS, 0},
  {"close", (PyCFunction)__pyx_pw_3src_10ctp_trader_9CtpTrader_131close, METH_NOARGS, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_3src_10ctp_trader_CtpTrader = {
  PyVarObject_HEAD_INIT(0, 0)
  "src.ctp_trader.CtpTrader", /*tp_name*/
  sizeof(struct __pyx_obj_3src_10ctp_trader_CtpTrader), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3src_10ctp_trader_CtpTrader, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_3src_10ctp_trader_CtpTrader, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3src_10ctp_trader_CtpTrader, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new___Pyx_EnumMeta(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (&PyType_Type)->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc___Pyx_EnumMeta(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  PyObject_GC_Track(o);
  (&PyType_Type)->tp_dealloc(o);
}

static int __pyx_tp_traverse___Pyx_EnumMeta(PyObject *o, visitproc v, void *a) {
  int e;
  if (!(&PyType_Type)->tp_traverse); else { e = (&PyType_Type)->tp_traverse(o,v,a); if (e) return e; }
  return 0;
}

static int __pyx_tp_clear___Pyx_EnumMeta(PyObject *o) {
  if (!(&PyType_Type)->tp_clear); else (&PyType_Type)->tp_clear(o);
  return 0;
}
static PyObject *__pyx_sq_item___Pyx_EnumMeta(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods___Pyx_EnumMeta[] = {
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence___Pyx_EnumMeta = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item___Pyx_EnumMeta, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping___Pyx_EnumMeta = {
  0, /*mp_length*/
  __pyx_pw_8EnumBase_14__Pyx_EnumMeta_5__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __Pyx_EnumMeta = {
  PyVarObject_HEAD_INIT(0, 0)
  "src.ctp_trader.__Pyx_EnumMeta", /*tp_name*/
  sizeof(struct __pyx_obj___Pyx_EnumMeta), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc___Pyx_EnumMeta, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence___Pyx_EnumMeta, /*tp_as_sequence*/
  &__pyx_tp_as_mapping___Pyx_EnumMeta, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse___Pyx_EnumMeta, /*tp_traverse*/
  __pyx_tp_clear___Pyx_EnumMeta, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_8EnumBase_14__Pyx_EnumMeta_3__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods___Pyx_EnumMeta, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8EnumBase_14__Pyx_EnumMeta_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new___Pyx_EnumMeta, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "ctp_trader",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_0, __pyx_k_0, sizeof(__pyx_k_0), 0, 0, 1, 0},
  {&__pyx_kp_s_0000, __pyx_k_0000, sizeof(__pyx_k_0000), 0, 0, 1, 0},
  {&__pyx_kp_s_1, __pyx_k_1, sizeof(__pyx_k_1), 0, 0, 1, 0},
  {&__pyx_kp_s_2, __pyx_k_2, sizeof(__pyx_k_2), 0, 0, 1, 0},
  {&__pyx_kp_s_3, __pyx_k_3, sizeof(__pyx_k_3), 0, 0, 1, 0},
  {&__pyx_kp_s_4, __pyx_k_4, sizeof(__pyx_k_4), 0, 0, 1, 0},
  {&__pyx_n_s_ActionFlag, __pyx_k_ActionFlag, sizeof(__pyx_k_ActionFlag), 0, 0, 1, 1},
  {&__pyx_n_s_BankBranchID, __pyx_k_BankBranchID, sizeof(__pyx_k_BankBranchID), 0, 0, 1, 1},
  {&__pyx_n_s_BankID, __pyx_k_BankID, sizeof(__pyx_k_BankID), 0, 0, 1, 1},
  {&__pyx_n_s_BrokerBranchID, __pyx_k_BrokerBranchID, sizeof(__pyx_k_BrokerBranchID), 0, 0, 1, 1},
  {&__pyx_n_s_BrokerID, __pyx_k_BrokerID, sizeof(__pyx_k_BrokerID), 0, 0, 1, 1},
  {&__pyx_n_s_CNY, __pyx_k_CNY, sizeof(__pyx_k_CNY), 0, 0, 1, 1},
  {&__pyx_kp_s_Cannot_convert_s_to_string, __pyx_k_Cannot_convert_s_to_string, sizeof(__pyx_k_Cannot_convert_s_to_string), 0, 0, 1, 0},
  {&__pyx_n_s_CombHedgeFlag, __pyx_k_CombHedgeFlag, sizeof(__pyx_k_CombHedgeFlag), 0, 0, 1, 1},
  {&__pyx_n_s_CombOffsetFlag, __pyx_k_CombOffsetFlag, sizeof(__pyx_k_CombOffsetFlag), 0, 0, 1, 1},
  {&__pyx_n_s_ContingentCondition, __pyx_k_ContingentCondition, sizeof(__pyx_k_ContingentCondition), 0, 0, 1, 1},
  {&__pyx_kp_s_CtpTrader_dealloc, __pyx_k_CtpTrader_dealloc, sizeof(__pyx_k_CtpTrader_dealloc), 0, 0, 1, 0},
  {&__pyx_kp_s_D_startup_cyctp_src_ctp_trader_p, __pyx_k_D_startup_cyctp_src_ctp_trader_p, sizeof(__pyx_k_D_startup_cyctp_src_ctp_trader_p), 0, 0, 1, 0},
  {&__pyx_n_s_Direction, __pyx_k_Direction, sizeof(__pyx_k_Direction), 0, 0, 1, 1},
  {&__pyx_n_s_EnumBase, __pyx_k_EnumBase, sizeof(__pyx_k_EnumBase), 0, 0, 1, 1},
  {&__pyx_n_s_EnumType, __pyx_k_EnumType, sizeof(__pyx_k_EnumType), 0, 0, 1, 1},
  {&__pyx_n_s_ExchangeID, __pyx_k_ExchangeID, sizeof(__pyx_k_ExchangeID), 0, 0, 1, 1},
  {&__pyx_n_s_ForceCloseReason, __pyx_k_ForceCloseReason, sizeof(__pyx_k_ForceCloseReason), 0, 0, 1, 1},
  {&__pyx_n_s_FrontID, __pyx_k_FrontID, sizeof(__pyx_k_FrontID), 0, 0, 1, 1},
  {&__pyx_n_s_GTDDate, __pyx_k_GTDDate, sizeof(__pyx_k_GTDDate), 0, 0, 1, 1},
  {&__pyx_n_s_InstrumentID, __pyx_k_InstrumentID, sizeof(__pyx_k_InstrumentID), 0, 0, 1, 1},
  {&__pyx_n_s_IntEnum, __pyx_k_IntEnum, sizeof(__pyx_k_IntEnum), 0, 0, 1, 1},
  {&__pyx_n_s_InvestorID, __pyx_k_InvestorID, sizeof(__pyx_k_InvestorID), 0, 0, 1, 1},
  {&__pyx_n_s_IsAutoSuspend, __pyx_k_IsAutoSuspend, sizeof(__pyx_k_IsAutoSuspend), 0, 0, 1, 1},
  {&__pyx_n_s_LimitPrice, __pyx_k_LimitPrice, sizeof(__pyx_k_LimitPrice), 0, 0, 1, 1},
  {&__pyx_n_s_MinVolume, __pyx_k_MinVolume, sizeof(__pyx_k_MinVolume), 0, 0, 1, 1},
  {&__pyx_n_s_OrderActionRef, __pyx_k_OrderActionRef, sizeof(__pyx_k_OrderActionRef), 0, 0, 1, 1},
  {&__pyx_n_s_OrderActionRequest, __pyx_k_OrderActionRequest, sizeof(__pyx_k_OrderActionRequest), 0, 0, 1, 1},
  {&__pyx_n_s_OrderPriceType, __pyx_k_OrderPriceType, sizeof(__pyx_k_OrderPriceType), 0, 0, 1, 1},
  {&__pyx_n_s_OrderRef, __pyx_k_OrderRef, sizeof(__pyx_k_OrderRef), 0, 0, 1, 1},
  {&__pyx_n_s_OrderRequest, __pyx_k_OrderRequest, sizeof(__pyx_k_OrderRequest), 0, 0, 1, 1},
  {&__pyx_n_s_OrderSysID, __pyx_k_OrderSysID, sizeof(__pyx_k_OrderSysID), 0, 0, 1, 1},
  {&__pyx_n_s_OrderedDict, __pyx_k_OrderedDict, sizeof(__pyx_k_OrderedDict), 0, 0, 1, 1},
  {&__pyx_n_s_ParkOrderActionRequest, __pyx_k_ParkOrderActionRequest, sizeof(__pyx_k_ParkOrderActionRequest), 0, 0, 1, 1},
  {&__pyx_n_s_ParkOrderRequest, __pyx_k_ParkOrderRequest, sizeof(__pyx_k_ParkOrderRequest), 0, 0, 1, 1},
  {&__pyx_n_s_Pyx_EnumBase, __pyx_k_Pyx_EnumBase, sizeof(__pyx_k_Pyx_EnumBase), 0, 0, 1, 1},
  {&__pyx_n_s_Pyx_EnumBase___new, __pyx_k_Pyx_EnumBase___new, sizeof(__pyx_k_Pyx_EnumBase___new), 0, 0, 1, 1},
  {&__pyx_n_s_Pyx_EnumBase___repr, __pyx_k_Pyx_EnumBase___repr, sizeof(__pyx_k_Pyx_EnumBase___repr), 0, 0, 1, 1},
  {&__pyx_n_s_Pyx_EnumBase___str, __pyx_k_Pyx_EnumBase___str, sizeof(__pyx_k_Pyx_EnumBase___str), 0, 0, 1, 1},
  {&__pyx_n_s_SessionID, __pyx_k_SessionID, sizeof(__pyx_k_SessionID), 0, 0, 1, 1},
  {&__pyx_n_s_StopPrice, __pyx_k_StopPrice, sizeof(__pyx_k_StopPrice), 0, 0, 1, 1},
  {&__pyx_n_s_TD_CALLBACK_TYPE, __pyx_k_TD_CALLBACK_TYPE, sizeof(__pyx_k_TD_CALLBACK_TYPE), 0, 0, 1, 1},
  {&__pyx_n_s_TD_ERR_RTN_BANK_TO_FUTURE_BY_FUT, __pyx_k_TD_ERR_RTN_BANK_TO_FUTURE_BY_FUT, sizeof(__pyx_k_TD_ERR_RTN_BANK_TO_FUTURE_BY_FUT), 0, 0, 1, 1},
  {&__pyx_n_s_TD_ERR_RTN_BATCH_ORDER_ACTION, __pyx_k_TD_ERR_RTN_BATCH_ORDER_ACTION, sizeof(__pyx_k_TD_ERR_RTN_BATCH_ORDER_ACTION), 0, 0, 1, 1},
  {&__pyx_n_s_TD_ERR_RTN_COMB_ACTION_INSERT, __pyx_k_TD_ERR_RTN_COMB_ACTION_INSERT, sizeof(__pyx_k_TD_ERR_RTN_COMB_ACTION_INSERT), 0, 0, 1, 1},
  {&__pyx_n_s_TD_ERR_RTN_EXEC_ORDER_ACTION, __pyx_k_TD_ERR_RTN_EXEC_ORDER_ACTION, sizeof(__pyx_k_TD_ERR_RTN_EXEC_ORDER_ACTION), 0, 0, 1, 1},
  {&__pyx_n_s_TD_ERR_RTN_EXEC_ORDER_INSERT, __pyx_k_TD_ERR_RTN_EXEC_ORDER_INSERT, sizeof(__pyx_k_TD_ERR_RTN_EXEC_ORDER_INSERT), 0, 0, 1, 1},
  {&__pyx_n_s_TD_ERR_RTN_FOR_QUOTE_INSERT, __pyx_k_TD_ERR_RTN_FOR_QUOTE_INSERT, sizeof(__pyx_k_TD_ERR_RTN_FOR_QUOTE_INSERT), 0, 0, 1, 1},
  {&__pyx_n_s_TD_ERR_RTN_FUTURE_TO_BANK_BY_FUT, __pyx_k_TD_ERR_RTN_FUTURE_TO_BANK_BY_FUT, sizeof(__pyx_k_TD_ERR_RTN_FUTURE_TO_BANK_BY_FUT), 0, 0, 1, 1},
  {&__pyx_n_s_TD_ERR_RTN_ORDER_ACTION, __pyx_k_TD_ERR_RTN_ORDER_ACTION, sizeof(__pyx_k_TD_ERR_RTN_ORDER_ACTION), 0, 0, 1, 1},
  {&__pyx_n_s_TD_ERR_RTN_ORDER_INSERT, __pyx_k_TD_ERR_RTN_ORDER_INSERT, sizeof(__pyx_k_TD_ERR_RTN_ORDER_INSERT), 0, 0, 1, 1},
  {&__pyx_n_s_TD_ERR_RTN_QRY_BANK_BALANCE_BY_F, __pyx_k_TD_ERR_RTN_QRY_BANK_BALANCE_BY_F, sizeof(__pyx_k_TD_ERR_RTN_QRY_BANK_BALANCE_BY_F), 0, 0, 1, 1},
  {&__pyx_n_s_TD_ERR_RTN_QUOTE_ACTION, __pyx_k_TD_ERR_RTN_QUOTE_ACTION, sizeof(__pyx_k_TD_ERR_RTN_QUOTE_ACTION), 0, 0, 1, 1},
  {&__pyx_n_s_TD_ERR_RTN_QUOTE_INSERT, __pyx_k_TD_ERR_RTN_QUOTE_INSERT, sizeof(__pyx_k_TD_ERR_RTN_QUOTE_INSERT), 0, 0, 1, 1},
  {&__pyx_n_s_TD_ERR_RTN_REPEAL_BANK_TO_FUTURE, __pyx_k_TD_ERR_RTN_REPEAL_BANK_TO_FUTURE, sizeof(__pyx_k_TD_ERR_RTN_REPEAL_BANK_TO_FUTURE), 0, 0, 1, 1},
  {&__pyx_n_s_TD_ERR_RTN_REPEAL_FUTURE_TO_BANK, __pyx_k_TD_ERR_RTN_REPEAL_FUTURE_TO_BANK, sizeof(__pyx_k_TD_ERR_RTN_REPEAL_FUTURE_TO_BANK), 0, 0, 1, 1},
  {&__pyx_n_s_TD_FRONT_CONNECTED, __pyx_k_TD_FRONT_CONNECTED, sizeof(__pyx_k_TD_FRONT_CONNECTED), 0, 0, 1, 1},
  {&__pyx_n_s_TD_FRONT_DISCONNECTED, __pyx_k_TD_FRONT_DISCONNECTED, sizeof(__pyx_k_TD_FRONT_DISCONNECTED), 0, 0, 1, 1},
  {&__pyx_n_s_TD_HEART_BEAT_WARN, __pyx_k_TD_HEART_BEAT_WARN, sizeof(__pyx_k_TD_HEART_BEAT_WARN), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_AUTH, __pyx_k_TD_RSP_AUTH, sizeof(__pyx_k_TD_RSP_AUTH), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_BATCH_ORDER_ACTION, __pyx_k_TD_RSP_BATCH_ORDER_ACTION, sizeof(__pyx_k_TD_RSP_BATCH_ORDER_ACTION), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_COMB_ACTION_INSERT, __pyx_k_TD_RSP_COMB_ACTION_INSERT, sizeof(__pyx_k_TD_RSP_COMB_ACTION_INSERT), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_ERROR, __pyx_k_TD_RSP_ERROR, sizeof(__pyx_k_TD_RSP_ERROR), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_EXEC_ORDER_ACTION, __pyx_k_TD_RSP_EXEC_ORDER_ACTION, sizeof(__pyx_k_TD_RSP_EXEC_ORDER_ACTION), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_EXEC_ORDER_INSERT, __pyx_k_TD_RSP_EXEC_ORDER_INSERT, sizeof(__pyx_k_TD_RSP_EXEC_ORDER_INSERT), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_FOR_QUOTE_INSERT, __pyx_k_TD_RSP_FOR_QUOTE_INSERT, sizeof(__pyx_k_TD_RSP_FOR_QUOTE_INSERT), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_FROM_BANK_TO_FUTURE_BY_FU, __pyx_k_TD_RSP_FROM_BANK_TO_FUTURE_BY_FU, sizeof(__pyx_k_TD_RSP_FROM_BANK_TO_FUTURE_BY_FU), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_FROM_FUTURE_TO_BANK_BY_FU, __pyx_k_TD_RSP_FROM_FUTURE_TO_BANK_BY_FU, sizeof(__pyx_k_TD_RSP_FROM_FUTURE_TO_BANK_BY_FU), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_ORDER_ACTION, __pyx_k_TD_RSP_ORDER_ACTION, sizeof(__pyx_k_TD_RSP_ORDER_ACTION), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_ORDER_INSERT, __pyx_k_TD_RSP_ORDER_INSERT, sizeof(__pyx_k_TD_RSP_ORDER_INSERT), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_PACK_ORDER_ACTION, __pyx_k_TD_RSP_PACK_ORDER_ACTION, sizeof(__pyx_k_TD_RSP_PACK_ORDER_ACTION), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_PACK_ORDER_INSERT, __pyx_k_TD_RSP_PACK_ORDER_INSERT, sizeof(__pyx_k_TD_RSP_PACK_ORDER_INSERT), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_PWD_UPDATE, __pyx_k_TD_RSP_PWD_UPDATE, sizeof(__pyx_k_TD_RSP_PWD_UPDATE), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_QRY_ACCOUNT_REGISTER, __pyx_k_TD_RSP_QRY_ACCOUNT_REGISTER, sizeof(__pyx_k_TD_RSP_QRY_ACCOUNT_REGISTER), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_QRY_BANK_ACCOUNT_MONEY_BY, __pyx_k_TD_RSP_QRY_BANK_ACCOUNT_MONEY_BY, sizeof(__pyx_k_TD_RSP_QRY_BANK_ACCOUNT_MONEY_BY), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_QRY_BROKER_TRADING_ALGOS, __pyx_k_TD_RSP_QRY_BROKER_TRADING_ALGOS, sizeof(__pyx_k_TD_RSP_QRY_BROKER_TRADING_ALGOS), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_QRY_BROKER_TRADING_PARAMS, __pyx_k_TD_RSP_QRY_BROKER_TRADING_PARAMS, sizeof(__pyx_k_TD_RSP_QRY_BROKER_TRADING_PARAMS), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_QRY_CFMMC_TRADING_ACCOUNT, __pyx_k_TD_RSP_QRY_CFMMC_TRADING_ACCOUNT, sizeof(__pyx_k_TD_RSP_QRY_CFMMC_TRADING_ACCOUNT), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_2, __pyx_k_TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_2, sizeof(__pyx_k_TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_2), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_QRY_COMB_ACTION, __pyx_k_TD_RSP_QRY_COMB_ACTION, sizeof(__pyx_k_TD_RSP_QRY_COMB_ACTION), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_QRY_COMB_INSTRUMENT_GUARD, __pyx_k_TD_RSP_QRY_COMB_INSTRUMENT_GUARD, sizeof(__pyx_k_TD_RSP_QRY_COMB_INSTRUMENT_GUARD), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_QRY_CONTRACT_BANK, __pyx_k_TD_RSP_QRY_CONTRACT_BANK, sizeof(__pyx_k_TD_RSP_QRY_CONTRACT_BANK), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_QRY_DEPTH_MARKET_DATA, __pyx_k_TD_RSP_QRY_DEPTH_MARKET_DATA, sizeof(__pyx_k_TD_RSP_QRY_DEPTH_MARKET_DATA), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_QRY_EWARRANT_OFFSET, __pyx_k_TD_RSP_QRY_EWARRANT_OFFSET, sizeof(__pyx_k_TD_RSP_QRY_EWARRANT_OFFSET), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_QRY_EXCHANGE, __pyx_k_TD_RSP_QRY_EXCHANGE, sizeof(__pyx_k_TD_RSP_QRY_EXCHANGE), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_QRY_EXCHANGE_MARGIN_RATE, __pyx_k_TD_RSP_QRY_EXCHANGE_MARGIN_RATE, sizeof(__pyx_k_TD_RSP_QRY_EXCHANGE_MARGIN_RATE), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_QRY_EXCHANGE_MARGIN_RATE_2, __pyx_k_TD_RSP_QRY_EXCHANGE_MARGIN_RATE_2, sizeof(__pyx_k_TD_RSP_QRY_EXCHANGE_MARGIN_RATE_2), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_QRY_EXCHANGE_RATE, __pyx_k_TD_RSP_QRY_EXCHANGE_RATE, sizeof(__pyx_k_TD_RSP_QRY_EXCHANGE_RATE), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_QRY_EXEC_ORDER, __pyx_k_TD_RSP_QRY_EXEC_ORDER, sizeof(__pyx_k_TD_RSP_QRY_EXEC_ORDER), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_QRY_FOR_QUOTE, __pyx_k_TD_RSP_QRY_FOR_QUOTE, sizeof(__pyx_k_TD_RSP_QRY_FOR_QUOTE), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_QRY_INSTRUMENT, __pyx_k_TD_RSP_QRY_INSTRUMENT, sizeof(__pyx_k_TD_RSP_QRY_INSTRUMENT), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_QRY_INSTRUMENT_COMMISSION, __pyx_k_TD_RSP_QRY_INSTRUMENT_COMMISSION, sizeof(__pyx_k_TD_RSP_QRY_INSTRUMENT_COMMISSION), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_QRY_INSTRUMENT_MARGIN_RAT, __pyx_k_TD_RSP_QRY_INSTRUMENT_MARGIN_RAT, sizeof(__pyx_k_TD_RSP_QRY_INSTRUMENT_MARGIN_RAT), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_QRY_INSTRUMENT_ORDER_COMM, __pyx_k_TD_RSP_QRY_INSTRUMENT_ORDER_COMM, sizeof(__pyx_k_TD_RSP_QRY_INSTRUMENT_ORDER_COMM), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_QRY_INVESTOR, __pyx_k_TD_RSP_QRY_INVESTOR, sizeof(__pyx_k_TD_RSP_QRY_INVESTOR), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_QRY_INVESTOR_POS, __pyx_k_TD_RSP_QRY_INVESTOR_POS, sizeof(__pyx_k_TD_RSP_QRY_INVESTOR_POS), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_QRY_INVESTOR_POS_COMB_DET, __pyx_k_TD_RSP_QRY_INVESTOR_POS_COMB_DET, sizeof(__pyx_k_TD_RSP_QRY_INVESTOR_POS_COMB_DET), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_QRY_INVESTOR_POS_DETAIL, __pyx_k_TD_RSP_QRY_INVESTOR_POS_DETAIL, sizeof(__pyx_k_TD_RSP_QRY_INVESTOR_POS_DETAIL), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_QRY_INVESTOR_PRODUCT_GROU, __pyx_k_TD_RSP_QRY_INVESTOR_PRODUCT_GROU, sizeof(__pyx_k_TD_RSP_QRY_INVESTOR_PRODUCT_GROU), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_QRY_MAX_ORDER_VOLUME, __pyx_k_TD_RSP_QRY_MAX_ORDER_VOLUME, sizeof(__pyx_k_TD_RSP_QRY_MAX_ORDER_VOLUME), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_QRY_MM_INSTRUMENT_COMMISS, __pyx_k_TD_RSP_QRY_MM_INSTRUMENT_COMMISS, sizeof(__pyx_k_TD_RSP_QRY_MM_INSTRUMENT_COMMISS), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_QRY_MM_OPTION_INSTR_COMM, __pyx_k_TD_RSP_QRY_MM_OPTION_INSTR_COMM, sizeof(__pyx_k_TD_RSP_QRY_MM_OPTION_INSTR_COMM), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_QRY_NOTICE, __pyx_k_TD_RSP_QRY_NOTICE, sizeof(__pyx_k_TD_RSP_QRY_NOTICE), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_QRY_OPTION_INSTR_COMM_RAT, __pyx_k_TD_RSP_QRY_OPTION_INSTR_COMM_RAT, sizeof(__pyx_k_TD_RSP_QRY_OPTION_INSTR_COMM_RAT), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_QRY_OPTION_INSTR_TRADE_CO, __pyx_k_TD_RSP_QRY_OPTION_INSTR_TRADE_CO, sizeof(__pyx_k_TD_RSP_QRY_OPTION_INSTR_TRADE_CO), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_QRY_ORDER, __pyx_k_TD_RSP_QRY_ORDER, sizeof(__pyx_k_TD_RSP_QRY_ORDER), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_QRY_PACK_ORDER, __pyx_k_TD_RSP_QRY_PACK_ORDER, sizeof(__pyx_k_TD_RSP_QRY_PACK_ORDER), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_QRY_PACK_ORDER_ACTION, __pyx_k_TD_RSP_QRY_PACK_ORDER_ACTION, sizeof(__pyx_k_TD_RSP_QRY_PACK_ORDER_ACTION), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_QRY_PRODUCT, __pyx_k_TD_RSP_QRY_PRODUCT, sizeof(__pyx_k_TD_RSP_QRY_PRODUCT), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_QRY_PRODUCT_EXCH_RATE, __pyx_k_TD_RSP_QRY_PRODUCT_EXCH_RATE, sizeof(__pyx_k_TD_RSP_QRY_PRODUCT_EXCH_RATE), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_QRY_PRODUCT_GROUP, __pyx_k_TD_RSP_QRY_PRODUCT_GROUP, sizeof(__pyx_k_TD_RSP_QRY_PRODUCT_GROUP), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_QRY_QUOTE, __pyx_k_TD_RSP_QRY_QUOTE, sizeof(__pyx_k_TD_RSP_QRY_QUOTE), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_QRY_SEC_AGENT_ACID_MAP, __pyx_k_TD_RSP_QRY_SEC_AGENT_ACID_MAP, sizeof(__pyx_k_TD_RSP_QRY_SEC_AGENT_ACID_MAP), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_QRY_SETTLE_INFO, __pyx_k_TD_RSP_QRY_SETTLE_INFO, sizeof(__pyx_k_TD_RSP_QRY_SETTLE_INFO), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_QRY_SETTLE_INFO_CONFIRM, __pyx_k_TD_RSP_QRY_SETTLE_INFO_CONFIRM, sizeof(__pyx_k_TD_RSP_QRY_SETTLE_INFO_CONFIRM), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_QRY_TRADE, __pyx_k_TD_RSP_QRY_TRADE, sizeof(__pyx_k_TD_RSP_QRY_TRADE), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_QRY_TRADING_ACCOUNT, __pyx_k_TD_RSP_QRY_TRADING_ACCOUNT, sizeof(__pyx_k_TD_RSP_QRY_TRADING_ACCOUNT), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_QRY_TRADING_CODE, __pyx_k_TD_RSP_QRY_TRADING_CODE, sizeof(__pyx_k_TD_RSP_QRY_TRADING_CODE), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_QRY_TRADING_NOTICE, __pyx_k_TD_RSP_QRY_TRADING_NOTICE, sizeof(__pyx_k_TD_RSP_QRY_TRADING_NOTICE), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_QRY_TRANSFER_BANK, __pyx_k_TD_RSP_QRY_TRANSFER_BANK, sizeof(__pyx_k_TD_RSP_QRY_TRANSFER_BANK), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_QRY_TRANSFER_SERIAL, __pyx_k_TD_RSP_QRY_TRANSFER_SERIAL, sizeof(__pyx_k_TD_RSP_QRY_TRANSFER_SERIAL), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_QUOTE_ACTION, __pyx_k_TD_RSP_QUOTE_ACTION, sizeof(__pyx_k_TD_RSP_QUOTE_ACTION), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_QUOTE_INSERT, __pyx_k_TD_RSP_QUOTE_INSERT, sizeof(__pyx_k_TD_RSP_QUOTE_INSERT), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_REMOVE_PACK, __pyx_k_TD_RSP_REMOVE_PACK, sizeof(__pyx_k_TD_RSP_REMOVE_PACK), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_REMOVE_PACK_ACTION, __pyx_k_TD_RSP_REMOVE_PACK_ACTION, sizeof(__pyx_k_TD_RSP_REMOVE_PACK_ACTION), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_SETTLE_INFO_CONFIRM, __pyx_k_TD_RSP_SETTLE_INFO_CONFIRM, sizeof(__pyx_k_TD_RSP_SETTLE_INFO_CONFIRM), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_TRADING_PWD_UPDATE, __pyx_k_TD_RSP_TRADING_PWD_UPDATE, sizeof(__pyx_k_TD_RSP_TRADING_PWD_UPDATE), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_USER_LOGIN, __pyx_k_TD_RSP_USER_LOGIN, sizeof(__pyx_k_TD_RSP_USER_LOGIN), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RSP_USER_LOGOUT, __pyx_k_TD_RSP_USER_LOGOUT, sizeof(__pyx_k_TD_RSP_USER_LOGOUT), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RTN_BULLETIN, __pyx_k_TD_RTN_BULLETIN, sizeof(__pyx_k_TD_RTN_BULLETIN), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RTN_CANCEL_ACCOUNT_BY_BANK, __pyx_k_TD_RTN_CANCEL_ACCOUNT_BY_BANK, sizeof(__pyx_k_TD_RTN_CANCEL_ACCOUNT_BY_BANK), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RTN_CFMMC_TRADING_ACCOUNT_TOK, __pyx_k_TD_RTN_CFMMC_TRADING_ACCOUNT_TOK, sizeof(__pyx_k_TD_RTN_CFMMC_TRADING_ACCOUNT_TOK), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RTN_CHANGE_ACCOUNT_BY_BANK, __pyx_k_TD_RTN_CHANGE_ACCOUNT_BY_BANK, sizeof(__pyx_k_TD_RTN_CHANGE_ACCOUNT_BY_BANK), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RTN_COMB_ACTION, __pyx_k_TD_RTN_COMB_ACTION, sizeof(__pyx_k_TD_RTN_COMB_ACTION), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RTN_ERROR_CONDITIONAL_ORDER, __pyx_k_TD_RTN_ERROR_CONDITIONAL_ORDER, sizeof(__pyx_k_TD_RTN_ERROR_CONDITIONAL_ORDER), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RTN_EXEC_ORDER, __pyx_k_TD_RTN_EXEC_ORDER, sizeof(__pyx_k_TD_RTN_EXEC_ORDER), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RTN_FOR_QUOTE_RSP, __pyx_k_TD_RTN_FOR_QUOTE_RSP, sizeof(__pyx_k_TD_RTN_FOR_QUOTE_RSP), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RTN_FROM_BANK_TO_FUTURE_BY_BA, __pyx_k_TD_RTN_FROM_BANK_TO_FUTURE_BY_BA, sizeof(__pyx_k_TD_RTN_FROM_BANK_TO_FUTURE_BY_BA), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RTN_FROM_BANK_TO_FUTURE_BY_FU, __pyx_k_TD_RTN_FROM_BANK_TO_FUTURE_BY_FU, sizeof(__pyx_k_TD_RTN_FROM_BANK_TO_FUTURE_BY_FU), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RTN_FROM_FUTURE_TO_BANK_BY_BA, __pyx_k_TD_RTN_FROM_FUTURE_TO_BANK_BY_BA, sizeof(__pyx_k_TD_RTN_FROM_FUTURE_TO_BANK_BY_BA), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RTN_FROM_FUTURE_TO_BANK_BY_FU, __pyx_k_TD_RTN_FROM_FUTURE_TO_BANK_BY_FU, sizeof(__pyx_k_TD_RTN_FROM_FUTURE_TO_BANK_BY_FU), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RTN_INSTRUMENT_STATUS, __pyx_k_TD_RTN_INSTRUMENT_STATUS, sizeof(__pyx_k_TD_RTN_INSTRUMENT_STATUS), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RTN_OPEN_ACCOUNT_BY_BANK, __pyx_k_TD_RTN_OPEN_ACCOUNT_BY_BANK, sizeof(__pyx_k_TD_RTN_OPEN_ACCOUNT_BY_BANK), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RTN_ORDER, __pyx_k_TD_RTN_ORDER, sizeof(__pyx_k_TD_RTN_ORDER), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RTN_QUERY_BANK_BALANCE_BY_FUT, __pyx_k_TD_RTN_QUERY_BANK_BALANCE_BY_FUT, sizeof(__pyx_k_TD_RTN_QUERY_BANK_BALANCE_BY_FUT), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RTN_QUOTE, __pyx_k_TD_RTN_QUOTE, sizeof(__pyx_k_TD_RTN_QUOTE), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RTN_REPEAL_FROM_BANK_TO_FUTUR, __pyx_k_TD_RTN_REPEAL_FROM_BANK_TO_FUTUR, sizeof(__pyx_k_TD_RTN_REPEAL_FROM_BANK_TO_FUTUR), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RTN_REPEAL_FROM_BANK_TO_FUTUR_2, __pyx_k_TD_RTN_REPEAL_FROM_BANK_TO_FUTUR_2, sizeof(__pyx_k_TD_RTN_REPEAL_FROM_BANK_TO_FUTUR_2), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RTN_REPEAL_FROM_BANK_TO_FUTUR_3, __pyx_k_TD_RTN_REPEAL_FROM_BANK_TO_FUTUR_3, sizeof(__pyx_k_TD_RTN_REPEAL_FROM_BANK_TO_FUTUR_3), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RTN_REPEAL_FROM_FUTURE_TO_BAN, __pyx_k_TD_RTN_REPEAL_FROM_FUTURE_TO_BAN, sizeof(__pyx_k_TD_RTN_REPEAL_FROM_FUTURE_TO_BAN), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RTN_REPEAL_FROM_FUTURE_TO_BAN_2, __pyx_k_TD_RTN_REPEAL_FROM_FUTURE_TO_BAN_2, sizeof(__pyx_k_TD_RTN_REPEAL_FROM_FUTURE_TO_BAN_2), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RTN_REPEAL_FROM_FUTURE_TO_BAN_3, __pyx_k_TD_RTN_REPEAL_FROM_FUTURE_TO_BAN_3, sizeof(__pyx_k_TD_RTN_REPEAL_FROM_FUTURE_TO_BAN_3), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RTN_TRADE, __pyx_k_TD_RTN_TRADE, sizeof(__pyx_k_TD_RTN_TRADE), 0, 0, 1, 1},
  {&__pyx_n_s_TD_RTN_TRADING_NOTICE, __pyx_k_TD_RTN_TRADING_NOTICE, sizeof(__pyx_k_TD_RTN_TRADING_NOTICE), 0, 0, 1, 1},
  {&__pyx_n_s_THOST_TERT_QUICK, __pyx_k_THOST_TERT_QUICK, sizeof(__pyx_k_THOST_TERT_QUICK), 0, 0, 1, 1},
  {&__pyx_n_s_THOST_TERT_RESTART, __pyx_k_THOST_TERT_RESTART, sizeof(__pyx_k_THOST_TERT_RESTART), 0, 0, 1, 1},
  {&__pyx_n_s_THOST_TERT_RESUME, __pyx_k_THOST_TERT_RESUME, sizeof(__pyx_k_THOST_TERT_RESUME), 0, 0, 1, 1},
  {&__pyx_n_s_THOST_TE_RESUME_TYPE, __pyx_k_THOST_TE_RESUME_TYPE, sizeof(__pyx_k_THOST_TE_RESUME_TYPE), 0, 0, 1, 1},
  {&__pyx_n_s_ThreadPool, __pyx_k_ThreadPool, sizeof(__pyx_k_ThreadPool), 0, 0, 1, 1},
  {&__pyx_n_s_TimeCondition, __pyx_k_TimeCondition, sizeof(__pyx_k_TimeCondition), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_s_Unknown_enum_value_s, __pyx_k_Unknown_enum_value_s, sizeof(__pyx_k_Unknown_enum_value_s), 0, 0, 1, 0},
  {&__pyx_n_s_UserForceClose, __pyx_k_UserForceClose, sizeof(__pyx_k_UserForceClose), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_VolumeCondition, __pyx_k_VolumeCondition, sizeof(__pyx_k_VolumeCondition), 0, 0, 1, 1},
  {&__pyx_n_s_VolumeTotalOriginal, __pyx_k_VolumeTotalOriginal, sizeof(__pyx_k_VolumeTotalOriginal), 0, 0, 1, 1},
  {&__pyx_kp_s__2, __pyx_k__2, sizeof(__pyx_k__2), 0, 0, 1, 0},
  {&__pyx_n_s_account, __pyx_k_account, sizeof(__pyx_k_account), 0, 0, 1, 1},
  {&__pyx_n_s_addressof, __pyx_k_addressof, sizeof(__pyx_k_addressof), 0, 0, 1, 1},
  {&__pyx_n_s_all_bank_accounts, __pyx_k_all_bank_accounts, sizeof(__pyx_k_all_bank_accounts), 0, 0, 1, 1},
  {&__pyx_n_s_all_instruments, __pyx_k_all_instruments, sizeof(__pyx_k_all_instruments), 0, 0, 1, 1},
  {&__pyx_n_s_all_trade_codes, __pyx_k_all_trade_codes, sizeof(__pyx_k_all_trade_codes), 0, 0, 1, 1},
  {&__pyx_n_s_amount, __pyx_k_amount, sizeof(__pyx_k_amount), 0, 0, 1, 1},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_s_apply_async, __pyx_k_apply_async, sizeof(__pyx_k_apply_async), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_async_callback, __pyx_k_async_callback, sizeof(__pyx_k_async_callback), 0, 0, 1, 1},
  {&__pyx_n_s_authcode, __pyx_k_authcode, sizeof(__pyx_k_authcode), 0, 0, 1, 1},
  {&__pyx_n_s_auto_suspend, __pyx_k_auto_suspend, sizeof(__pyx_k_auto_suspend), 0, 0, 1, 1},
  {&__pyx_n_s_bbid, __pyx_k_bbid, sizeof(__pyx_k_bbid), 0, 0, 1, 1},
  {&__pyx_n_s_bid, __pyx_k_bid, sizeof(__pyx_k_bid), 0, 0, 1, 1},
  {&__pyx_n_s_broker, __pyx_k_broker, sizeof(__pyx_k_broker), 0, 0, 1, 1},
  {&__pyx_n_s_buy_price, __pyx_k_buy_price, sizeof(__pyx_k_buy_price), 0, 0, 1, 1},
  {&__pyx_n_s_buy_volume, __pyx_k_buy_volume, sizeof(__pyx_k_buy_volume), 0, 0, 1, 1},
  {&__pyx_n_s_byref, __pyx_k_byref, sizeof(__pyx_k_byref), 0, 0, 1, 1},
  {&__pyx_n_s_cb_pool, __pyx_k_cb_pool, sizeof(__pyx_k_cb_pool), 0, 0, 1, 1},
  {&__pyx_n_s_cid, __pyx_k_cid, sizeof(__pyx_k_cid), 0, 0, 1, 1},
  {&__pyx_n_s_cidt, __pyx_k_cidt, sizeof(__pyx_k_cidt), 0, 0, 1, 1},
  {&__pyx_n_s_ciid, __pyx_k_ciid, sizeof(__pyx_k_ciid), 0, 0, 1, 1},
  {&__pyx_n_s_class, __pyx_k_class, sizeof(__pyx_k_class), 0, 0, 1, 1},
  {&__pyx_n_s_cls, __pyx_k_cls, sizeof(__pyx_k_cls), 0, 0, 1, 1},
  {&__pyx_n_s_collections, __pyx_k_collections, sizeof(__pyx_k_collections), 0, 0, 1, 1},
  {&__pyx_n_s_context, __pyx_k_context, sizeof(__pyx_k_context), 0, 0, 1, 1},
  {&__pyx_n_s_contingent_condition, __pyx_k_contingent_condition, sizeof(__pyx_k_contingent_condition), 0, 0, 1, 1},
  {&__pyx_n_s_csizeof, __pyx_k_csizeof, sizeof(__pyx_k_csizeof), 0, 0, 1, 1},
  {&__pyx_n_s_ctypes, __pyx_k_ctypes, sizeof(__pyx_k_ctypes), 0, 0, 1, 1},
  {&__pyx_n_s_currency, __pyx_k_currency, sizeof(__pyx_k_currency), 0, 0, 1, 1},
  {&__pyx_n_s_current_thread, __pyx_k_current_thread, sizeof(__pyx_k_current_thread), 0, 0, 1, 1},
  {&__pyx_n_s_cyctp_ctp_struct, __pyx_k_cyctp_ctp_struct, sizeof(__pyx_k_cyctp_ctp_struct), 0, 0, 1, 1},
  {&__pyx_n_s_data, __pyx_k_data, sizeof(__pyx_k_data), 0, 0, 1, 1},
  {&__pyx_n_s_date, __pyx_k_date, sizeof(__pyx_k_date), 0, 0, 1, 1},
  {&__pyx_n_s_day, __pyx_k_day, sizeof(__pyx_k_day), 0, 0, 1, 1},
  {&__pyx_n_s_dct, __pyx_k_dct, sizeof(__pyx_k_dct), 0, 0, 1, 1},
  {&__pyx_n_s_direction, __pyx_k_direction, sizeof(__pyx_k_direction), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_eid, __pyx_k_eid, sizeof(__pyx_k_eid), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_enum, __pyx_k_enum, sizeof(__pyx_k_enum), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_fid, __pyx_k_fid, sizeof(__pyx_k_fid), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_n_s_flowPath, __pyx_k_flowPath, sizeof(__pyx_k_flowPath), 0, 0, 1, 1},
  {&__pyx_kp_s_flow_td, __pyx_k_flow_td, sizeof(__pyx_k_flow_td), 0, 0, 1, 0},
  {&__pyx_n_s_force_close_reason, __pyx_k_force_close_reason, sizeof(__pyx_k_force_close_reason), 0, 0, 1, 1},
  {&__pyx_n_s_from_id, __pyx_k_from_id, sizeof(__pyx_k_from_id), 0, 0, 1, 1},
  {&__pyx_n_s_frontPaths, __pyx_k_frontPaths, sizeof(__pyx_k_frontPaths), 0, 0, 1, 1},
  {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
  {&__pyx_n_s_getLogger, __pyx_k_getLogger, sizeof(__pyx_k_getLogger), 0, 0, 1, 1},
  {&__pyx_n_s_get_handler, __pyx_k_get_handler, sizeof(__pyx_k_get_handler), 0, 0, 1, 1},
  {&__pyx_n_s_get_trading_day, __pyx_k_get_trading_day, sizeof(__pyx_k_get_trading_day), 0, 0, 1, 1},
  {&__pyx_n_s_handler, __pyx_k_handler, sizeof(__pyx_k_handler), 0, 0, 1, 1},
  {&__pyx_n_s_hedge_flag, __pyx_k_hedge_flag, sizeof(__pyx_k_hedge_flag), 0, 0, 1, 1},
  {&__pyx_n_s_hedge_flags, __pyx_k_hedge_flags, sizeof(__pyx_k_hedge_flags), 0, 0, 1, 1},
  {&__pyx_n_s_iid, __pyx_k_iid, sizeof(__pyx_k_iid), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_inc_max_order_ref, __pyx_k_inc_max_order_ref, sizeof(__pyx_k_inc_max_order_ref), 0, 0, 1, 1},
  {&__pyx_n_s_inc_max_other_ref, __pyx_k_inc_max_other_ref, sizeof(__pyx_k_inc_max_other_ref), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_s_insert_limit_price_order, __pyx_k_insert_limit_price_order, sizeof(__pyx_k_insert_limit_price_order), 0, 0, 1, 1},
  {&__pyx_n_s_join, __pyx_k_join, sizeof(__pyx_k_join), 0, 0, 1, 1},
  {&__pyx_n_s_last, __pyx_k_last, sizeof(__pyx_k_last), 0, 0, 1, 1},
  {&__pyx_n_s_logger, __pyx_k_logger, sizeof(__pyx_k_logger), 0, 0, 1, 1},
  {&__pyx_n_s_logging, __pyx_k_logging, sizeof(__pyx_k_logging), 0, 0, 1, 1},
  {&__pyx_n_s_logging_config, __pyx_k_logging_config, sizeof(__pyx_k_logging_config), 0, 0, 1, 1},
  {&__pyx_n_s_login, __pyx_k_login, sizeof(__pyx_k_login), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_max_ref, __pyx_k_max_ref, sizeof(__pyx_k_max_ref), 0, 0, 1, 1},
  {&__pyx_n_s_members, __pyx_k_members, sizeof(__pyx_k_members), 0, 0, 1, 1},
  {&__pyx_n_s_memset, __pyx_k_memset, sizeof(__pyx_k_memset), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_min_volume, __pyx_k_min_volume, sizeof(__pyx_k_min_volume), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_multiprocessing_pool, __pyx_k_multiprocessing_pool, sizeof(__pyx_k_multiprocessing_pool), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
  {&__pyx_n_s_npwd, __pyx_k_npwd, sizeof(__pyx_k_npwd), 0, 0, 1, 1},
  {&__pyx_n_s_offset_flags, __pyx_k_offset_flags, sizeof(__pyx_k_offset_flags), 0, 0, 1, 1},
  {&__pyx_n_s_opwd, __pyx_k_opwd, sizeof(__pyx_k_opwd), 0, 0, 1, 1},
  {&__pyx_n_s_order_ref, __pyx_k_order_ref, sizeof(__pyx_k_order_ref), 0, 0, 1, 1},
  {&__pyx_n_s_order_sys_id, __pyx_k_order_sys_id, sizeof(__pyx_k_order_sys_id), 0, 0, 1, 1},
  {&__pyx_n_s_parents, __pyx_k_parents, sizeof(__pyx_k_parents), 0, 0, 1, 1},
  {&__pyx_n_s_park, __pyx_k_park, sizeof(__pyx_k_park), 0, 0, 1, 1},
  {&__pyx_n_s_pclass, __pyx_k_pclass, sizeof(__pyx_k_pclass), 0, 0, 1, 1},
  {&__pyx_n_s_pid, __pyx_k_pid, sizeof(__pyx_k_pid), 0, 0, 1, 1},
  {&__pyx_n_s_pointer, __pyx_k_pointer, sizeof(__pyx_k_pointer), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_price, __pyx_k_price, sizeof(__pyx_k_price), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_privateResume, __pyx_k_privateResume, sizeof(__pyx_k_privateResume), 0, 0, 1, 1},
  {&__pyx_n_s_processes, __pyx_k_processes, sizeof(__pyx_k_processes), 0, 0, 1, 1},
  {&__pyx_n_s_product, __pyx_k_product, sizeof(__pyx_k_product), 0, 0, 1, 1},
  {&__pyx_n_s_publicResume, __pyx_k_publicResume, sizeof(__pyx_k_publicResume), 0, 0, 1, 1},
  {&__pyx_n_s_pwd, __pyx_k_pwd, sizeof(__pyx_k_pwd), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_repr, __pyx_k_repr, sizeof(__pyx_k_repr), 0, 0, 1, 1},
  {&__pyx_n_s_res, __pyx_k_res, sizeof(__pyx_k_res), 0, 0, 1, 1},
  {&__pyx_n_s_rid, __pyx_k_rid, sizeof(__pyx_k_rid), 0, 0, 1, 1},
  {&__pyx_n_s_route, __pyx_k_route, sizeof(__pyx_k_route), 0, 0, 1, 1},
  {&__pyx_kp_s_s_s, __pyx_k_s_s, sizeof(__pyx_k_s_s), 0, 0, 1, 0},
  {&__pyx_kp_s_s_s_d, __pyx_k_s_s_d, sizeof(__pyx_k_s_s_d), 0, 0, 1, 0},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_n_s_sell_price, __pyx_k_sell_price, sizeof(__pyx_k_sell_price), 0, 0, 1, 1},
  {&__pyx_n_s_sell_volume, __pyx_k_sell_volume, sizeof(__pyx_k_sell_volume), 0, 0, 1, 1},
  {&__pyx_n_s_sid, __pyx_k_sid, sizeof(__pyx_k_sid), 0, 0, 1, 1},
  {&__pyx_n_s_sizeof, __pyx_k_sizeof, sizeof(__pyx_k_sizeof), 0, 0, 1, 1},
  {&__pyx_n_s_src_ctp_trader, __pyx_k_src_ctp_trader, sizeof(__pyx_k_src_ctp_trader), 0, 0, 1, 1},
  {&__pyx_n_s_staticmethod, __pyx_k_staticmethod, sizeof(__pyx_k_staticmethod), 0, 0, 1, 1},
  {&__pyx_n_s_stop_price, __pyx_k_stop_price, sizeof(__pyx_k_stop_price), 0, 0, 1, 1},
  {&__pyx_n_s_str, __pyx_k_str, sizeof(__pyx_k_str), 0, 0, 1, 1},
  {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {&__pyx_n_s_t, __pyx_k_t, sizeof(__pyx_k_t), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_threading, __pyx_k_threading, sizeof(__pyx_k_threading), 0, 0, 1, 1},
  {&__pyx_n_s_tid, __pyx_k_tid, sizeof(__pyx_k_tid), 0, 0, 1, 1},
  {&__pyx_n_s_time_condition, __pyx_k_time_condition, sizeof(__pyx_k_time_condition), 0, 0, 1, 1},
  {&__pyx_n_s_to_cid, __pyx_k_to_cid, sizeof(__pyx_k_to_cid), 0, 0, 1, 1},
  {&__pyx_n_s_user, __pyx_k_user, sizeof(__pyx_k_user), 0, 0, 1, 1},
  {&__pyx_n_s_user_force_close, __pyx_k_user_force_close, sizeof(__pyx_k_user_force_close), 0, 0, 1, 1},
  {&__pyx_n_s_utf8, __pyx_k_utf8, sizeof(__pyx_k_utf8), 0, 0, 1, 1},
  {&__pyx_n_s_v, __pyx_k_v, sizeof(__pyx_k_v), 0, 0, 1, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_n_s_values, __pyx_k_values, sizeof(__pyx_k_values), 0, 0, 1, 1},
  {&__pyx_n_s_version, __pyx_k_version, sizeof(__pyx_k_version), 0, 0, 1, 1},
  {&__pyx_n_s_volume, __pyx_k_volume, sizeof(__pyx_k_volume), 0, 0, 1, 1},
  {&__pyx_n_s_volume_condition, __pyx_k_volume_condition, sizeof(__pyx_k_volume_condition), 0, 0, 1, 1},
  {&__pyx_n_s_xrange, __pyx_k_xrange, sizeof(__pyx_k_xrange), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_staticmethod = __Pyx_GetBuiltinName(__pyx_n_s_staticmethod); if (!__pyx_builtin_staticmethod) __PYX_ERR(0, 48, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 33, __pyx_L1_error)
  #if PY_MAJOR_VERSION >= 3
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_xrange) __PYX_ERR(0, 37, __pyx_L1_error)
  #else
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_xrange); if (!__pyx_builtin_xrange) __PYX_ERR(0, 37, __pyx_L1_error)
  #endif
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(0, 96, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(1, 33, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "src/ctp_trader.pyx":32
 *         return data
 *     elif isinstance(data, unicode):
 *         return data.encode('utf8')             # <<<<<<<<<<<<<<
 *     raise TypeError('Cannot convert %s to string' % type(data))
 * 
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_n_s_utf8); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "src/ctp_trader.pyx":23
 *     return 0
 * 
 * def async_callback(context, t, data, rid, last):             # <<<<<<<<<<<<<<
 *     #print '', current_thread().ident, t, 'pycallback'
 *     context.get_handler().route(t, data, rid, last)
 */
  __pyx_tuple__5 = PyTuple_Pack(5, __pyx_n_s_context, __pyx_n_s_t, __pyx_n_s_data, __pyx_n_s_rid, __pyx_n_s_last); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);
  __pyx_codeobj__6 = (PyObject*)__Pyx_PyCode_New(5, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__5, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_D_startup_cyctp_src_ctp_trader_p, __pyx_n_s_async_callback, 23, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__6)) __PYX_ERR(0, 23, __pyx_L1_error)

  /* "src/ctp_trader.pyx":49
 *         if self.collector is not NULL: del self.collector
 *     @staticmethod
 *     def version():             # <<<<<<<<<<<<<<
 *         return ctp_trader.CTraderCollector.Version()
 *     def connect(self, frontPaths, privateResume=ctp_trader.THOST_TERT_QUICK, publicResume=ctp_trader.THOST_TERT_RESTART):
 */
  __pyx_codeobj__7 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_D_startup_cyctp_src_ctp_trader_p, __pyx_n_s_version, 49, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__7)) __PYX_ERR(0, 49, __pyx_L1_error)

  /* "EnumBase":28
 * class __Pyx_EnumBase(int):
 *     __metaclass__ = __Pyx_EnumMeta
 *     def __new__(cls, value, name=None):             # <<<<<<<<<<<<<<
 *         for v in cls:
 *             if v == value:
 */
  __pyx_tuple__8 = PyTuple_Pack(5, __pyx_n_s_cls, __pyx_n_s_value, __pyx_n_s_name, __pyx_n_s_v, __pyx_n_s_res); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(1, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);
  __pyx_codeobj__9 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__8, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_new, 28, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__9)) __PYX_ERR(1, 28, __pyx_L1_error)
  __pyx_tuple__10 = PyTuple_Pack(1, ((PyObject *)Py_None)); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(1, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "EnumBase":39
 *         cls.__members__[name] = res
 *         return res
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<%s.%s: %d>" % (self.__class__.__name__, self.name, self)
 *     def __str__(self):
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(1, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);
  __pyx_codeobj__12 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__11, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_repr, 39, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__12)) __PYX_ERR(1, 39, __pyx_L1_error)

  /* "EnumBase":41
 *     def __repr__(self):
 *         return "<%s.%s: %d>" % (self.__class__.__name__, self.name, self)
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "%s.%s" % (self.__class__.__name__, self.name)
 * 
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(1, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);
  __pyx_codeobj__14 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__13, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_str, 41, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__14)) __PYX_ERR(1, 41, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initctp_trader(void); /*proto*/
PyMODINIT_FUNC initctp_trader(void)
#else
PyMODINIT_FUNC PyInit_ctp_trader(void); /*proto*/
PyMODINIT_FUNC PyInit_ctp_trader(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  PyObject *__pyx_t_24 = NULL;
  PyObject *__pyx_t_25 = NULL;
  PyObject *__pyx_t_26 = NULL;
  PyObject *__pyx_t_27 = NULL;
  PyObject *__pyx_t_28 = NULL;
  PyObject *__pyx_t_29 = NULL;
  PyObject *__pyx_t_30 = NULL;
  PyObject *__pyx_t_31 = NULL;
  PyObject *__pyx_t_32 = NULL;
  PyObject *__pyx_t_33 = NULL;
  PyObject *__pyx_t_34 = NULL;
  PyObject *__pyx_t_35 = NULL;
  PyObject *__pyx_t_36 = NULL;
  PyObject *__pyx_t_37 = NULL;
  PyObject *__pyx_t_38 = NULL;
  PyObject *__pyx_t_39 = NULL;
  PyObject *__pyx_t_40 = NULL;
  PyObject *__pyx_t_41 = NULL;
  PyObject *__pyx_t_42 = NULL;
  PyObject *__pyx_t_43 = NULL;
  PyObject *__pyx_t_44 = NULL;
  PyObject *__pyx_t_45 = NULL;
  PyObject *__pyx_t_46 = NULL;
  PyObject *__pyx_t_47 = NULL;
  PyObject *__pyx_t_48 = NULL;
  PyObject *__pyx_t_49 = NULL;
  PyObject *__pyx_t_50 = NULL;
  PyObject *__pyx_t_51 = NULL;
  PyObject *__pyx_t_52 = NULL;
  PyObject *__pyx_t_53 = NULL;
  PyObject *__pyx_t_54 = NULL;
  PyObject *__pyx_t_55 = NULL;
  PyObject *__pyx_t_56 = NULL;
  PyObject *__pyx_t_57 = NULL;
  PyObject *__pyx_t_58 = NULL;
  PyObject *__pyx_t_59 = NULL;
  PyObject *__pyx_t_60 = NULL;
  PyObject *__pyx_t_61 = NULL;
  PyObject *__pyx_t_62 = NULL;
  PyObject *__pyx_t_63 = NULL;
  PyObject *__pyx_t_64 = NULL;
  PyObject *__pyx_t_65 = NULL;
  PyObject *__pyx_t_66 = NULL;
  PyObject *__pyx_t_67 = NULL;
  PyObject *__pyx_t_68 = NULL;
  PyObject *__pyx_t_69 = NULL;
  PyObject *__pyx_t_70 = NULL;
  PyObject *__pyx_t_71 = NULL;
  PyObject *__pyx_t_72 = NULL;
  PyObject *__pyx_t_73 = NULL;
  PyObject *__pyx_t_74 = NULL;
  PyObject *__pyx_t_75 = NULL;
  PyObject *__pyx_t_76 = NULL;
  PyObject *__pyx_t_77 = NULL;
  PyObject *__pyx_t_78 = NULL;
  PyObject *__pyx_t_79 = NULL;
  PyObject *__pyx_t_80 = NULL;
  PyObject *__pyx_t_81 = NULL;
  PyObject *__pyx_t_82 = NULL;
  PyObject *__pyx_t_83 = NULL;
  PyObject *__pyx_t_84 = NULL;
  PyObject *__pyx_t_85 = NULL;
  PyObject *__pyx_t_86 = NULL;
  PyObject *__pyx_t_87 = NULL;
  PyObject *__pyx_t_88 = NULL;
  PyObject *__pyx_t_89 = NULL;
  PyObject *__pyx_t_90 = NULL;
  PyObject *__pyx_t_91 = NULL;
  PyObject *__pyx_t_92 = NULL;
  PyObject *__pyx_t_93 = NULL;
  PyObject *__pyx_t_94 = NULL;
  PyObject *__pyx_t_95 = NULL;
  PyObject *__pyx_t_96 = NULL;
  PyObject *__pyx_t_97 = NULL;
  PyObject *__pyx_t_98 = NULL;
  PyObject *__pyx_t_99 = NULL;
  PyObject *__pyx_t_100 = NULL;
  PyObject *__pyx_t_101 = NULL;
  PyObject *__pyx_t_102 = NULL;
  PyObject *__pyx_t_103 = NULL;
  PyObject *__pyx_t_104 = NULL;
  PyObject *__pyx_t_105 = NULL;
  PyObject *__pyx_t_106 = NULL;
  PyObject *__pyx_t_107 = NULL;
  PyObject *__pyx_t_108 = NULL;
  PyObject *__pyx_t_109 = NULL;
  PyObject *__pyx_t_110 = NULL;
  PyObject *__pyx_t_111 = NULL;
  PyObject *__pyx_t_112 = NULL;
  PyObject *__pyx_t_113 = NULL;
  PyObject *__pyx_t_114 = NULL;
  PyObject *__pyx_t_115 = NULL;
  PyObject *__pyx_t_116 = NULL;
  int __pyx_t_117;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_ctp_trader(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("ctp_trader", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_src__ctp_trader) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "src.ctp_trader")) {
      if (unlikely(PyDict_SetItemString(modules, "src.ctp_trader", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global init code ---*/
  __Pyx_OrderedDict = Py_None; Py_INCREF(Py_None);
  __Pyx_EnumBase = Py_None; Py_INCREF(Py_None);
  __Pyx_globals = ((PyObject*)Py_None); Py_INCREF(Py_None);
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_3src_10ctp_trader_CtpTrader) < 0) __PYX_ERR(0, 41, __pyx_L1_error)
  __pyx_type_3src_10ctp_trader_CtpTrader.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "CtpTrader", (PyObject *)&__pyx_type_3src_10ctp_trader_CtpTrader) < 0) __PYX_ERR(0, 41, __pyx_L1_error)
  __pyx_ptype_3src_10ctp_trader_CtpTrader = &__pyx_type_3src_10ctp_trader_CtpTrader;
  __Pyx_EnumMeta.tp_base = (&PyType_Type);
  if (PyType_Ready(&__Pyx_EnumMeta) < 0) __PYX_ERR(1, 15, __pyx_L1_error)
  __Pyx_EnumMeta.tp_print = 0;
  __pyx_ptype___Pyx_EnumMeta = &__Pyx_EnumMeta;
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if CYTHON_COMPILING_IN_PYPY
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) __PYX_ERR(2, 9, __pyx_L1_error)
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "src/ctp_trader.pyx":6
 * from cpython.string cimport PyString_AsString
 * from libc.string cimport strdup
 * import logging, logging.config             # <<<<<<<<<<<<<<
 * from multiprocessing.pool import ThreadPool
 * from threading import current_thread
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_logging, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_logging, __pyx_t_1) < 0) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_logging_config, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_logging, __pyx_t_1) < 0) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/ctp_trader.pyx":7
 * from libc.string cimport strdup
 * import logging, logging.config
 * from multiprocessing.pool import ThreadPool             # <<<<<<<<<<<<<<
 * from threading import current_thread
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_ThreadPool);
  __Pyx_GIVEREF(__pyx_n_s_ThreadPool);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_ThreadPool);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_multiprocessing_pool, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_ThreadPool); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ThreadPool, __pyx_t_1) < 0) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/ctp_trader.pyx":8
 * import logging, logging.config
 * from multiprocessing.pool import ThreadPool
 * from threading import current_thread             # <<<<<<<<<<<<<<
 * 
 * cimport ctp_trader
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_current_thread);
  __Pyx_GIVEREF(__pyx_n_s_current_thread);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_current_thread);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_threading, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_current_thread); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_current_thread, __pyx_t_2) < 0) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/ctp_trader.pyx":12
 * cimport ctp_trader
 * #from ctp_struct import *
 * from ctypes import addressof, memset, pointer, byref, sizeof as csizeof             # <<<<<<<<<<<<<<
 * 
 * logger = logging.getLogger()#__name__)
 */
  __pyx_t_1 = PyList_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_addressof);
  __Pyx_GIVEREF(__pyx_n_s_addressof);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_addressof);
  __Pyx_INCREF(__pyx_n_s_memset);
  __Pyx_GIVEREF(__pyx_n_s_memset);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_memset);
  __Pyx_INCREF(__pyx_n_s_pointer);
  __Pyx_GIVEREF(__pyx_n_s_pointer);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_s_pointer);
  __Pyx_INCREF(__pyx_n_s_byref);
  __Pyx_GIVEREF(__pyx_n_s_byref);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_n_s_byref);
  __Pyx_INCREF(__pyx_n_s_sizeof);
  __Pyx_GIVEREF(__pyx_n_s_sizeof);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_n_s_sizeof);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_ctypes, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_addressof); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_addressof, __pyx_t_1) < 0) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_memset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_memset, __pyx_t_1) < 0) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_pointer); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pointer, __pyx_t_1) < 0) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_byref); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_byref, __pyx_t_1) < 0) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_sizeof); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_csizeof, __pyx_t_1) < 0) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/ctp_trader.pyx":14
 * from ctypes import addressof, memset, pointer, byref, sizeof as csizeof
 * 
 * logger = logging.getLogger()#__name__)             # <<<<<<<<<<<<<<
 * 
 * cb_pool = ThreadPool(processes=2)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_logging); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_getLogger); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_1) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 14, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 14, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_logger, __pyx_t_2) < 0) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/ctp_trader.pyx":16
 * logger = logging.getLogger()#__name__)
 * 
 * cb_pool = ThreadPool(processes=2)             # <<<<<<<<<<<<<<
 * 
 * cdef int td_callback(void *context, ctp_trader.TD_CALLBACK_TYPE t, void* data, int rid, int last) with gil:
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_ThreadPool); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_processes, __pyx_int_2) < 0) __PYX_ERR(0, 16, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_cb_pool, __pyx_t_1) < 0) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/ctp_trader.pyx":23
 *     return 0
 * 
 * def async_callback(context, t, data, rid, last):             # <<<<<<<<<<<<<<
 *     #print '', current_thread().ident, t, 'pycallback'
 *     context.get_handler().route(t, data, rid, last)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_3src_10ctp_trader_1async_callback, NULL, __pyx_n_s_src_ctp_trader); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_async_callback, __pyx_t_1) < 0) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/ctp_trader.pyx":49
 *         if self.collector is not NULL: del self.collector
 *     @staticmethod
 *     def version():             # <<<<<<<<<<<<<<
 *         return ctp_trader.CTraderCollector.Version()
 *     def connect(self, frontPaths, privateResume=ctp_trader.THOST_TERT_QUICK, publicResume=ctp_trader.THOST_TERT_RESTART):
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_3src_10ctp_trader_9CtpTrader_5version, NULL, __pyx_n_s_src_ctp_trader); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "src/ctp_trader.pyx":48
 *         print 'CtpTrader dealloc'
 *         if self.collector is not NULL: del self.collector
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def version():
 *         return ctp_trader.CTraderCollector.Version()
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_3src_10ctp_trader_CtpTrader->tp_dict, __pyx_n_s_version, __pyx_t_1) < 0) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_3src_10ctp_trader_CtpTrader);

  /* "src/ctp_trader.pyx":49
 *         if self.collector is not NULL: del self.collector
 *     @staticmethod
 *     def version():             # <<<<<<<<<<<<<<
 *         return ctp_trader.CTraderCollector.Version()
 *     def connect(self, frontPaths, privateResume=ctp_trader.THOST_TERT_QUICK, publicResume=ctp_trader.THOST_TERT_RESTART):
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_3src_10ctp_trader_CtpTrader, __pyx_n_s_version); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "src/ctp_trader.pyx":48
 *         print 'CtpTrader dealloc'
 *         if self.collector is not NULL: del self.collector
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def version():
 *         return ctp_trader.CTraderCollector.Version()
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_3src_10ctp_trader_CtpTrader->tp_dict, __pyx_n_s_version, __pyx_t_1) < 0) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_3src_10ctp_trader_CtpTrader);

  /* "src/ctp_trader.pyx":51
 *     def version():
 *         return ctp_trader.CTraderCollector.Version()
 *     def connect(self, frontPaths, privateResume=ctp_trader.THOST_TERT_QUICK, publicResume=ctp_trader.THOST_TERT_RESTART):             # <<<<<<<<<<<<<<
 *         self.collector.RegisterCb(<void*>self, td_callback)
 *         ids = to_cstring_array(frontPaths)
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum__THOST_TE_RESUME_TYPE(THOST_TERT_QUICK); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__3 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_enum__THOST_TE_RESUME_TYPE(THOST_TERT_RESTART); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__4 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/ctp_trader.pyx":1
 * #distutils: language = c++             # <<<<<<<<<<<<<<
 * 
 * from libc.stdlib cimport malloc, free
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "EnumBase":9
 * 
 * cdef object __Pyx_OrderedDict
 * if PY_VERSION_HEX >= 0x02070000:             # <<<<<<<<<<<<<<
 *     from collections import OrderedDict as __Pyx_OrderedDict
 * else:
 */
  __pyx_t_4 = ((PY_VERSION_HEX >= 0x02070000) != 0);
  if (__pyx_t_4) {

    /* "EnumBase":10
 * cdef object __Pyx_OrderedDict
 * if PY_VERSION_HEX >= 0x02070000:
 *     from collections import OrderedDict as __Pyx_OrderedDict             # <<<<<<<<<<<<<<
 * else:
 *     __Pyx_OrderedDict = dict
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 10, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_OrderedDict);
    __Pyx_GIVEREF(__pyx_n_s_OrderedDict);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_OrderedDict);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_collections, __pyx_t_1, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 10, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_OrderedDict); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 10, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_XGOTREF(__Pyx_OrderedDict);
    __Pyx_DECREF_SET(__Pyx_OrderedDict, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EnumBase":9
 * 
 * cdef object __Pyx_OrderedDict
 * if PY_VERSION_HEX >= 0x02070000:             # <<<<<<<<<<<<<<
 *     from collections import OrderedDict as __Pyx_OrderedDict
 * else:
 */
    goto __pyx_L2;
  }

  /* "EnumBase":12
 *     from collections import OrderedDict as __Pyx_OrderedDict
 * else:
 *     __Pyx_OrderedDict = dict             # <<<<<<<<<<<<<<
 * 
 * @cython.internal
 */
  /*else*/ {
    __Pyx_INCREF(((PyObject *)(&PyDict_Type)));
    __Pyx_XGOTREF(__Pyx_OrderedDict);
    __Pyx_DECREF_SET(__Pyx_OrderedDict, ((PyObject *)(&PyDict_Type)));
    __Pyx_GIVEREF(((PyObject *)(&PyDict_Type)));
  }
  __pyx_L2:;

  /* "EnumBase":26
 * 
 * cdef object __Pyx_EnumBase
 * class __Pyx_EnumBase(int):             # <<<<<<<<<<<<<<
 *     __metaclass__ = __Pyx_EnumMeta
 *     def __new__(cls, value, name=None):
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)(&PyInt_Type)));
  __Pyx_GIVEREF(((PyObject *)(&PyInt_Type)));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)(&PyInt_Type)));
  __pyx_t_1 = __Pyx_CalculateMetaclass(NULL, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_Py3MetaclassPrepare(__pyx_t_1, __pyx_t_3, __pyx_n_s_Pyx_EnumBase, __pyx_n_s_Pyx_EnumBase, (PyObject *) NULL, __pyx_n_s_EnumBase, (PyObject *) NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "EnumBase":27
 * cdef object __Pyx_EnumBase
 * class __Pyx_EnumBase(int):
 *     __metaclass__ = __Pyx_EnumMeta             # <<<<<<<<<<<<<<
 *     def __new__(cls, value, name=None):
 *         for v in cls:
 */
  if (PyObject_SetItem(__pyx_t_2, __pyx_n_s_metaclass, ((PyObject *)__pyx_ptype___Pyx_EnumMeta)) < 0) __PYX_ERR(1, 27, __pyx_L1_error)

  /* "EnumBase":28
 * class __Pyx_EnumBase(int):
 *     __metaclass__ = __Pyx_EnumMeta
 *     def __new__(cls, value, name=None):             # <<<<<<<<<<<<<<
 *         for v in cls:
 *             if v == value:
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8EnumBase_14__Pyx_EnumBase_1__new__, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_Pyx_EnumBase___new, NULL, __pyx_n_s_EnumBase, __pyx_d, ((PyObject *)__pyx_codeobj__9)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_5, __pyx_tuple__10);
  if (PyObject_SetItem(__pyx_t_2, __pyx_n_s_new, __pyx_t_5) < 0) __PYX_ERR(1, 28, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "EnumBase":39
 *         cls.__members__[name] = res
 *         return res
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<%s.%s: %d>" % (self.__class__.__name__, self.name, self)
 *     def __str__(self):
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8EnumBase_14__Pyx_EnumBase_3__repr__, 0, __pyx_n_s_Pyx_EnumBase___repr, NULL, __pyx_n_s_EnumBase, __pyx_d, ((PyObject *)__pyx_codeobj__12)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_2, __pyx_n_s_repr, __pyx_t_5) < 0) __PYX_ERR(1, 39, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "EnumBase":41
 *     def __repr__(self):
 *         return "<%s.%s: %d>" % (self.__class__.__name__, self.name, self)
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "%s.%s" % (self.__class__.__name__, self.name)
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8EnumBase_14__Pyx_EnumBase_5__str__, 0, __pyx_n_s_Pyx_EnumBase___str, NULL, __pyx_n_s_EnumBase, __pyx_d, ((PyObject *)__pyx_codeobj__14)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_2, __pyx_n_s_str, __pyx_t_5) < 0) __PYX_ERR(1, 41, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "EnumBase":26
 * 
 * cdef object __Pyx_EnumBase
 * class __Pyx_EnumBase(int):             # <<<<<<<<<<<<<<
 *     __metaclass__ = __Pyx_EnumMeta
 *     def __new__(cls, value, name=None):
 */
  __pyx_t_5 = __Pyx_Py3ClassCreate(__pyx_t_1, __pyx_n_s_Pyx_EnumBase, __pyx_t_3, __pyx_t_2, NULL, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_XGOTREF(__Pyx_EnumBase);
  __Pyx_DECREF_SET(__Pyx_EnumBase, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "EnumBase":44
 *         return "%s.%s" % (self.__class__.__name__, self.name)
 * 
 * if PY_VERSION_HEX >= 0x03040000:             # <<<<<<<<<<<<<<
 *     from enum import IntEnum as __Pyx_EnumBase
 * 
 */
  __pyx_t_4 = ((PY_VERSION_HEX >= 0x03040000) != 0);
  if (__pyx_t_4) {

    /* "EnumBase":45
 * 
 * if PY_VERSION_HEX >= 0x03040000:
 *     from enum import IntEnum as __Pyx_EnumBase             # <<<<<<<<<<<<<<
 * 
 */
    __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 45, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_IntEnum);
    __Pyx_GIVEREF(__pyx_n_s_IntEnum);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_IntEnum);
    __pyx_t_1 = __Pyx_Import(__pyx_n_s_enum, __pyx_t_3, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 45, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_IntEnum); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 45, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XGOTREF(__Pyx_EnumBase);
    __Pyx_DECREF_SET(__Pyx_EnumBase, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumBase":44
 *         return "%s.%s" % (self.__class__.__name__, self.name)
 * 
 * if PY_VERSION_HEX >= 0x03040000:             # <<<<<<<<<<<<<<
 *     from enum import IntEnum as __Pyx_EnumBase
 * 
 */
  }

  /* "EnumType":50
 * 
 * 
 * cdef dict __Pyx_globals = globals()             # <<<<<<<<<<<<<<
 * if PY_VERSION_HEX >= 0x03040000:
 * 
 */
  __pyx_t_1 = __Pyx_Globals(); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(1, 50, __pyx_L1_error)
  __Pyx_XGOTREF(__Pyx_globals);
  __Pyx_DECREF_SET(__Pyx_globals, ((PyObject*)__pyx_t_1));
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "EnumType":51
 * 
 * cdef dict __Pyx_globals = globals()
 * if PY_VERSION_HEX >= 0x03040000:             # <<<<<<<<<<<<<<
 * 
 *     TD_CALLBACK_TYPE = __Pyx_EnumBase('TD_CALLBACK_TYPE', __Pyx_OrderedDict([
 */
  __pyx_t_4 = ((PY_VERSION_HEX >= 0x03040000) != 0);
  if (__pyx_t_4) {

    /* "EnumType":54
 * 
 *     TD_CALLBACK_TYPE = __Pyx_EnumBase('TD_CALLBACK_TYPE', __Pyx_OrderedDict([
 *         ('TD_FRONT_CONNECTED', TD_FRONT_CONNECTED),             # <<<<<<<<<<<<<<
 *         ('TD_FRONT_DISCONNECTED', TD_FRONT_DISCONNECTED),
 *         ('TD_HEART_BEAT_WARN', TD_HEART_BEAT_WARN),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_FRONT_CONNECTED); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 54, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 54, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_n_s_TD_FRONT_CONNECTED);
    __Pyx_GIVEREF(__pyx_n_s_TD_FRONT_CONNECTED);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_n_s_TD_FRONT_CONNECTED);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":55
 *     TD_CALLBACK_TYPE = __Pyx_EnumBase('TD_CALLBACK_TYPE', __Pyx_OrderedDict([
 *         ('TD_FRONT_CONNECTED', TD_FRONT_CONNECTED),
 *         ('TD_FRONT_DISCONNECTED', TD_FRONT_DISCONNECTED),             # <<<<<<<<<<<<<<
 *         ('TD_HEART_BEAT_WARN', TD_HEART_BEAT_WARN),
 *         ('TD_RSP_AUTH', TD_RSP_AUTH),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_FRONT_DISCONNECTED); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 55, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 55, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_n_s_TD_FRONT_DISCONNECTED);
    __Pyx_GIVEREF(__pyx_n_s_TD_FRONT_DISCONNECTED);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_n_s_TD_FRONT_DISCONNECTED);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":56
 *         ('TD_FRONT_CONNECTED', TD_FRONT_CONNECTED),
 *         ('TD_FRONT_DISCONNECTED', TD_FRONT_DISCONNECTED),
 *         ('TD_HEART_BEAT_WARN', TD_HEART_BEAT_WARN),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_AUTH', TD_RSP_AUTH),
 *         ('TD_RSP_USER_LOGIN', TD_RSP_USER_LOGIN),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_HEART_BEAT_WARN); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 56, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 56, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_n_s_TD_HEART_BEAT_WARN);
    __Pyx_GIVEREF(__pyx_n_s_TD_HEART_BEAT_WARN);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_n_s_TD_HEART_BEAT_WARN);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":57
 *         ('TD_FRONT_DISCONNECTED', TD_FRONT_DISCONNECTED),
 *         ('TD_HEART_BEAT_WARN', TD_HEART_BEAT_WARN),
 *         ('TD_RSP_AUTH', TD_RSP_AUTH),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_USER_LOGIN', TD_RSP_USER_LOGIN),
 *         ('TD_RSP_USER_LOGOUT', TD_RSP_USER_LOGOUT),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_AUTH); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 57, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 57, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_AUTH);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_AUTH);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_n_s_TD_RSP_AUTH);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":58
 *         ('TD_HEART_BEAT_WARN', TD_HEART_BEAT_WARN),
 *         ('TD_RSP_AUTH', TD_RSP_AUTH),
 *         ('TD_RSP_USER_LOGIN', TD_RSP_USER_LOGIN),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_USER_LOGOUT', TD_RSP_USER_LOGOUT),
 *         ('TD_RSP_PWD_UPDATE', TD_RSP_PWD_UPDATE),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_USER_LOGIN); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 58, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 58, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_USER_LOGIN);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_USER_LOGIN);
    PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_n_s_TD_RSP_USER_LOGIN);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":59
 *         ('TD_RSP_AUTH', TD_RSP_AUTH),
 *         ('TD_RSP_USER_LOGIN', TD_RSP_USER_LOGIN),
 *         ('TD_RSP_USER_LOGOUT', TD_RSP_USER_LOGOUT),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_PWD_UPDATE', TD_RSP_PWD_UPDATE),
 *         ('TD_RSP_TRADING_PWD_UPDATE', TD_RSP_TRADING_PWD_UPDATE),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_USER_LOGOUT); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 59, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 59, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_USER_LOGOUT);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_USER_LOGOUT);
    PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_n_s_TD_RSP_USER_LOGOUT);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":60
 *         ('TD_RSP_USER_LOGIN', TD_RSP_USER_LOGIN),
 *         ('TD_RSP_USER_LOGOUT', TD_RSP_USER_LOGOUT),
 *         ('TD_RSP_PWD_UPDATE', TD_RSP_PWD_UPDATE),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_TRADING_PWD_UPDATE', TD_RSP_TRADING_PWD_UPDATE),
 *         ('TD_RSP_ORDER_INSERT', TD_RSP_ORDER_INSERT),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_PWD_UPDATE); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 60, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 60, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_PWD_UPDATE);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_PWD_UPDATE);
    PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_n_s_TD_RSP_PWD_UPDATE);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":61
 *         ('TD_RSP_USER_LOGOUT', TD_RSP_USER_LOGOUT),
 *         ('TD_RSP_PWD_UPDATE', TD_RSP_PWD_UPDATE),
 *         ('TD_RSP_TRADING_PWD_UPDATE', TD_RSP_TRADING_PWD_UPDATE),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_ORDER_INSERT', TD_RSP_ORDER_INSERT),
 *         ('TD_RSP_PACK_ORDER_INSERT', TD_RSP_PACK_ORDER_INSERT),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_TRADING_PWD_UPDATE); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_12 = PyTuple_New(2); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_TRADING_PWD_UPDATE);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_TRADING_PWD_UPDATE);
    PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_n_s_TD_RSP_TRADING_PWD_UPDATE);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":62
 *         ('TD_RSP_PWD_UPDATE', TD_RSP_PWD_UPDATE),
 *         ('TD_RSP_TRADING_PWD_UPDATE', TD_RSP_TRADING_PWD_UPDATE),
 *         ('TD_RSP_ORDER_INSERT', TD_RSP_ORDER_INSERT),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_PACK_ORDER_INSERT', TD_RSP_PACK_ORDER_INSERT),
 *         ('TD_RSP_PACK_ORDER_ACTION', TD_RSP_PACK_ORDER_ACTION),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_ORDER_INSERT); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 62, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_13 = PyTuple_New(2); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 62, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_ORDER_INSERT);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_ORDER_INSERT);
    PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_n_s_TD_RSP_ORDER_INSERT);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_13, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":63
 *         ('TD_RSP_TRADING_PWD_UPDATE', TD_RSP_TRADING_PWD_UPDATE),
 *         ('TD_RSP_ORDER_INSERT', TD_RSP_ORDER_INSERT),
 *         ('TD_RSP_PACK_ORDER_INSERT', TD_RSP_PACK_ORDER_INSERT),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_PACK_ORDER_ACTION', TD_RSP_PACK_ORDER_ACTION),
 *         ('TD_RSP_ORDER_ACTION', TD_RSP_ORDER_ACTION),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_PACK_ORDER_INSERT); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 63, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_14 = PyTuple_New(2); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 63, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_PACK_ORDER_INSERT);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_PACK_ORDER_INSERT);
    PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_n_s_TD_RSP_PACK_ORDER_INSERT);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_14, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":64
 *         ('TD_RSP_ORDER_INSERT', TD_RSP_ORDER_INSERT),
 *         ('TD_RSP_PACK_ORDER_INSERT', TD_RSP_PACK_ORDER_INSERT),
 *         ('TD_RSP_PACK_ORDER_ACTION', TD_RSP_PACK_ORDER_ACTION),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_ORDER_ACTION', TD_RSP_ORDER_ACTION),
 *         ('TD_RSP_QRY_MAX_ORDER_VOLUME', TD_RSP_QRY_MAX_ORDER_VOLUME),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_PACK_ORDER_ACTION); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 64, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_15 = PyTuple_New(2); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 64, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_PACK_ORDER_ACTION);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_PACK_ORDER_ACTION);
    PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_n_s_TD_RSP_PACK_ORDER_ACTION);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_15, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":65
 *         ('TD_RSP_PACK_ORDER_INSERT', TD_RSP_PACK_ORDER_INSERT),
 *         ('TD_RSP_PACK_ORDER_ACTION', TD_RSP_PACK_ORDER_ACTION),
 *         ('TD_RSP_ORDER_ACTION', TD_RSP_ORDER_ACTION),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_QRY_MAX_ORDER_VOLUME', TD_RSP_QRY_MAX_ORDER_VOLUME),
 *         ('TD_RSP_SETTLE_INFO_CONFIRM', TD_RSP_SETTLE_INFO_CONFIRM),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_ORDER_ACTION); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 65, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_16 = PyTuple_New(2); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 65, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_ORDER_ACTION);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_ORDER_ACTION);
    PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_n_s_TD_RSP_ORDER_ACTION);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_16, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":66
 *         ('TD_RSP_PACK_ORDER_ACTION', TD_RSP_PACK_ORDER_ACTION),
 *         ('TD_RSP_ORDER_ACTION', TD_RSP_ORDER_ACTION),
 *         ('TD_RSP_QRY_MAX_ORDER_VOLUME', TD_RSP_QRY_MAX_ORDER_VOLUME),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_SETTLE_INFO_CONFIRM', TD_RSP_SETTLE_INFO_CONFIRM),
 *         ('TD_RSP_REMOVE_PACK', TD_RSP_REMOVE_PACK),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_MAX_ORDER_VOLUME); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 66, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_17 = PyTuple_New(2); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 66, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_MAX_ORDER_VOLUME);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_MAX_ORDER_VOLUME);
    PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_n_s_TD_RSP_QRY_MAX_ORDER_VOLUME);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_17, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":67
 *         ('TD_RSP_ORDER_ACTION', TD_RSP_ORDER_ACTION),
 *         ('TD_RSP_QRY_MAX_ORDER_VOLUME', TD_RSP_QRY_MAX_ORDER_VOLUME),
 *         ('TD_RSP_SETTLE_INFO_CONFIRM', TD_RSP_SETTLE_INFO_CONFIRM),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_REMOVE_PACK', TD_RSP_REMOVE_PACK),
 *         ('TD_RSP_REMOVE_PACK_ACTION', TD_RSP_REMOVE_PACK_ACTION),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_SETTLE_INFO_CONFIRM); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 67, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_18 = PyTuple_New(2); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 67, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_SETTLE_INFO_CONFIRM);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_SETTLE_INFO_CONFIRM);
    PyTuple_SET_ITEM(__pyx_t_18, 0, __pyx_n_s_TD_RSP_SETTLE_INFO_CONFIRM);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_18, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":68
 *         ('TD_RSP_QRY_MAX_ORDER_VOLUME', TD_RSP_QRY_MAX_ORDER_VOLUME),
 *         ('TD_RSP_SETTLE_INFO_CONFIRM', TD_RSP_SETTLE_INFO_CONFIRM),
 *         ('TD_RSP_REMOVE_PACK', TD_RSP_REMOVE_PACK),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_REMOVE_PACK_ACTION', TD_RSP_REMOVE_PACK_ACTION),
 *         ('TD_RSP_EXEC_ORDER_INSERT', TD_RSP_EXEC_ORDER_INSERT),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_REMOVE_PACK); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 68, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_19 = PyTuple_New(2); if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 68, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_REMOVE_PACK);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_REMOVE_PACK);
    PyTuple_SET_ITEM(__pyx_t_19, 0, __pyx_n_s_TD_RSP_REMOVE_PACK);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_19, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":69
 *         ('TD_RSP_SETTLE_INFO_CONFIRM', TD_RSP_SETTLE_INFO_CONFIRM),
 *         ('TD_RSP_REMOVE_PACK', TD_RSP_REMOVE_PACK),
 *         ('TD_RSP_REMOVE_PACK_ACTION', TD_RSP_REMOVE_PACK_ACTION),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_EXEC_ORDER_INSERT', TD_RSP_EXEC_ORDER_INSERT),
 *         ('TD_RSP_EXEC_ORDER_ACTION', TD_RSP_EXEC_ORDER_ACTION),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_REMOVE_PACK_ACTION); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 69, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_20 = PyTuple_New(2); if (unlikely(!__pyx_t_20)) __PYX_ERR(1, 69, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_REMOVE_PACK_ACTION);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_REMOVE_PACK_ACTION);
    PyTuple_SET_ITEM(__pyx_t_20, 0, __pyx_n_s_TD_RSP_REMOVE_PACK_ACTION);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_20, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":70
 *         ('TD_RSP_REMOVE_PACK', TD_RSP_REMOVE_PACK),
 *         ('TD_RSP_REMOVE_PACK_ACTION', TD_RSP_REMOVE_PACK_ACTION),
 *         ('TD_RSP_EXEC_ORDER_INSERT', TD_RSP_EXEC_ORDER_INSERT),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_EXEC_ORDER_ACTION', TD_RSP_EXEC_ORDER_ACTION),
 *         ('TD_RSP_FOR_QUOTE_INSERT', TD_RSP_FOR_QUOTE_INSERT),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_EXEC_ORDER_INSERT); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 70, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_21 = PyTuple_New(2); if (unlikely(!__pyx_t_21)) __PYX_ERR(1, 70, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_21);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_EXEC_ORDER_INSERT);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_EXEC_ORDER_INSERT);
    PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_n_s_TD_RSP_EXEC_ORDER_INSERT);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_21, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":71
 *         ('TD_RSP_REMOVE_PACK_ACTION', TD_RSP_REMOVE_PACK_ACTION),
 *         ('TD_RSP_EXEC_ORDER_INSERT', TD_RSP_EXEC_ORDER_INSERT),
 *         ('TD_RSP_EXEC_ORDER_ACTION', TD_RSP_EXEC_ORDER_ACTION),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_FOR_QUOTE_INSERT', TD_RSP_FOR_QUOTE_INSERT),
 *         ('TD_RSP_QUOTE_INSERT', TD_RSP_QUOTE_INSERT),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_EXEC_ORDER_ACTION); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 71, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_22 = PyTuple_New(2); if (unlikely(!__pyx_t_22)) __PYX_ERR(1, 71, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_22);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_EXEC_ORDER_ACTION);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_EXEC_ORDER_ACTION);
    PyTuple_SET_ITEM(__pyx_t_22, 0, __pyx_n_s_TD_RSP_EXEC_ORDER_ACTION);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_22, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":72
 *         ('TD_RSP_EXEC_ORDER_INSERT', TD_RSP_EXEC_ORDER_INSERT),
 *         ('TD_RSP_EXEC_ORDER_ACTION', TD_RSP_EXEC_ORDER_ACTION),
 *         ('TD_RSP_FOR_QUOTE_INSERT', TD_RSP_FOR_QUOTE_INSERT),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_QUOTE_INSERT', TD_RSP_QUOTE_INSERT),
 *         ('TD_RSP_QUOTE_ACTION', TD_RSP_QUOTE_ACTION),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_FOR_QUOTE_INSERT); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 72, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_23 = PyTuple_New(2); if (unlikely(!__pyx_t_23)) __PYX_ERR(1, 72, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_23);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_FOR_QUOTE_INSERT);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_FOR_QUOTE_INSERT);
    PyTuple_SET_ITEM(__pyx_t_23, 0, __pyx_n_s_TD_RSP_FOR_QUOTE_INSERT);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_23, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":73
 *         ('TD_RSP_EXEC_ORDER_ACTION', TD_RSP_EXEC_ORDER_ACTION),
 *         ('TD_RSP_FOR_QUOTE_INSERT', TD_RSP_FOR_QUOTE_INSERT),
 *         ('TD_RSP_QUOTE_INSERT', TD_RSP_QUOTE_INSERT),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_QUOTE_ACTION', TD_RSP_QUOTE_ACTION),
 *         ('TD_RSP_BATCH_ORDER_ACTION', TD_RSP_BATCH_ORDER_ACTION),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QUOTE_INSERT); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 73, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_24 = PyTuple_New(2); if (unlikely(!__pyx_t_24)) __PYX_ERR(1, 73, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_24);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_QUOTE_INSERT);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QUOTE_INSERT);
    PyTuple_SET_ITEM(__pyx_t_24, 0, __pyx_n_s_TD_RSP_QUOTE_INSERT);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_24, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":74
 *         ('TD_RSP_FOR_QUOTE_INSERT', TD_RSP_FOR_QUOTE_INSERT),
 *         ('TD_RSP_QUOTE_INSERT', TD_RSP_QUOTE_INSERT),
 *         ('TD_RSP_QUOTE_ACTION', TD_RSP_QUOTE_ACTION),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_BATCH_ORDER_ACTION', TD_RSP_BATCH_ORDER_ACTION),
 *         ('TD_RSP_COMB_ACTION_INSERT', TD_RSP_COMB_ACTION_INSERT),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QUOTE_ACTION); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 74, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_25 = PyTuple_New(2); if (unlikely(!__pyx_t_25)) __PYX_ERR(1, 74, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_25);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_QUOTE_ACTION);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QUOTE_ACTION);
    PyTuple_SET_ITEM(__pyx_t_25, 0, __pyx_n_s_TD_RSP_QUOTE_ACTION);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_25, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":75
 *         ('TD_RSP_QUOTE_INSERT', TD_RSP_QUOTE_INSERT),
 *         ('TD_RSP_QUOTE_ACTION', TD_RSP_QUOTE_ACTION),
 *         ('TD_RSP_BATCH_ORDER_ACTION', TD_RSP_BATCH_ORDER_ACTION),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_COMB_ACTION_INSERT', TD_RSP_COMB_ACTION_INSERT),
 *         ('TD_RSP_QRY_ORDER', TD_RSP_QRY_ORDER),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_BATCH_ORDER_ACTION); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_26 = PyTuple_New(2); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_26);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_BATCH_ORDER_ACTION);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_BATCH_ORDER_ACTION);
    PyTuple_SET_ITEM(__pyx_t_26, 0, __pyx_n_s_TD_RSP_BATCH_ORDER_ACTION);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_26, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":76
 *         ('TD_RSP_QUOTE_ACTION', TD_RSP_QUOTE_ACTION),
 *         ('TD_RSP_BATCH_ORDER_ACTION', TD_RSP_BATCH_ORDER_ACTION),
 *         ('TD_RSP_COMB_ACTION_INSERT', TD_RSP_COMB_ACTION_INSERT),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_QRY_ORDER', TD_RSP_QRY_ORDER),
 *         ('TD_RSP_QRY_TRADE', TD_RSP_QRY_TRADE),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_COMB_ACTION_INSERT); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 76, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_27 = PyTuple_New(2); if (unlikely(!__pyx_t_27)) __PYX_ERR(1, 76, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_27);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_COMB_ACTION_INSERT);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_COMB_ACTION_INSERT);
    PyTuple_SET_ITEM(__pyx_t_27, 0, __pyx_n_s_TD_RSP_COMB_ACTION_INSERT);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_27, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":77
 *         ('TD_RSP_BATCH_ORDER_ACTION', TD_RSP_BATCH_ORDER_ACTION),
 *         ('TD_RSP_COMB_ACTION_INSERT', TD_RSP_COMB_ACTION_INSERT),
 *         ('TD_RSP_QRY_ORDER', TD_RSP_QRY_ORDER),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_QRY_TRADE', TD_RSP_QRY_TRADE),
 *         ('TD_RSP_QRY_INVESTOR_POS', TD_RSP_QRY_INVESTOR_POS),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_ORDER); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_28 = PyTuple_New(2); if (unlikely(!__pyx_t_28)) __PYX_ERR(1, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_28);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_ORDER);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_ORDER);
    PyTuple_SET_ITEM(__pyx_t_28, 0, __pyx_n_s_TD_RSP_QRY_ORDER);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_28, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":78
 *         ('TD_RSP_COMB_ACTION_INSERT', TD_RSP_COMB_ACTION_INSERT),
 *         ('TD_RSP_QRY_ORDER', TD_RSP_QRY_ORDER),
 *         ('TD_RSP_QRY_TRADE', TD_RSP_QRY_TRADE),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_QRY_INVESTOR_POS', TD_RSP_QRY_INVESTOR_POS),
 *         ('TD_RSP_QRY_TRADING_ACCOUNT', TD_RSP_QRY_TRADING_ACCOUNT),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_TRADE); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 78, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_29 = PyTuple_New(2); if (unlikely(!__pyx_t_29)) __PYX_ERR(1, 78, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_29);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_TRADE);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_TRADE);
    PyTuple_SET_ITEM(__pyx_t_29, 0, __pyx_n_s_TD_RSP_QRY_TRADE);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_29, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":79
 *         ('TD_RSP_QRY_ORDER', TD_RSP_QRY_ORDER),
 *         ('TD_RSP_QRY_TRADE', TD_RSP_QRY_TRADE),
 *         ('TD_RSP_QRY_INVESTOR_POS', TD_RSP_QRY_INVESTOR_POS),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_QRY_TRADING_ACCOUNT', TD_RSP_QRY_TRADING_ACCOUNT),
 *         ('TD_RSP_QRY_INVESTOR', TD_RSP_QRY_INVESTOR),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_INVESTOR_POS); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_30 = PyTuple_New(2); if (unlikely(!__pyx_t_30)) __PYX_ERR(1, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_30);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_INVESTOR_POS);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_INVESTOR_POS);
    PyTuple_SET_ITEM(__pyx_t_30, 0, __pyx_n_s_TD_RSP_QRY_INVESTOR_POS);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_30, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":80
 *         ('TD_RSP_QRY_TRADE', TD_RSP_QRY_TRADE),
 *         ('TD_RSP_QRY_INVESTOR_POS', TD_RSP_QRY_INVESTOR_POS),
 *         ('TD_RSP_QRY_TRADING_ACCOUNT', TD_RSP_QRY_TRADING_ACCOUNT),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_QRY_INVESTOR', TD_RSP_QRY_INVESTOR),
 *         ('TD_RSP_QRY_TRADING_CODE', TD_RSP_QRY_TRADING_CODE),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_TRADING_ACCOUNT); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 80, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_31 = PyTuple_New(2); if (unlikely(!__pyx_t_31)) __PYX_ERR(1, 80, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_31);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_TRADING_ACCOUNT);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_TRADING_ACCOUNT);
    PyTuple_SET_ITEM(__pyx_t_31, 0, __pyx_n_s_TD_RSP_QRY_TRADING_ACCOUNT);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_31, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":81
 *         ('TD_RSP_QRY_INVESTOR_POS', TD_RSP_QRY_INVESTOR_POS),
 *         ('TD_RSP_QRY_TRADING_ACCOUNT', TD_RSP_QRY_TRADING_ACCOUNT),
 *         ('TD_RSP_QRY_INVESTOR', TD_RSP_QRY_INVESTOR),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_QRY_TRADING_CODE', TD_RSP_QRY_TRADING_CODE),
 *         ('TD_RSP_QRY_INSTRUMENT_MARGIN_RATE', TD_RSP_QRY_INSTRUMENT_MARGIN_RATE),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_INVESTOR); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 81, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_32 = PyTuple_New(2); if (unlikely(!__pyx_t_32)) __PYX_ERR(1, 81, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_32);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_INVESTOR);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_INVESTOR);
    PyTuple_SET_ITEM(__pyx_t_32, 0, __pyx_n_s_TD_RSP_QRY_INVESTOR);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_32, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":82
 *         ('TD_RSP_QRY_TRADING_ACCOUNT', TD_RSP_QRY_TRADING_ACCOUNT),
 *         ('TD_RSP_QRY_INVESTOR', TD_RSP_QRY_INVESTOR),
 *         ('TD_RSP_QRY_TRADING_CODE', TD_RSP_QRY_TRADING_CODE),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_QRY_INSTRUMENT_MARGIN_RATE', TD_RSP_QRY_INSTRUMENT_MARGIN_RATE),
 *         ('TD_RSP_QRY_INSTRUMENT_COMMISSION_RATE', TD_RSP_QRY_INSTRUMENT_COMMISSION_RATE),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_TRADING_CODE); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_33 = PyTuple_New(2); if (unlikely(!__pyx_t_33)) __PYX_ERR(1, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_33);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_TRADING_CODE);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_TRADING_CODE);
    PyTuple_SET_ITEM(__pyx_t_33, 0, __pyx_n_s_TD_RSP_QRY_TRADING_CODE);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_33, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":83
 *         ('TD_RSP_QRY_INVESTOR', TD_RSP_QRY_INVESTOR),
 *         ('TD_RSP_QRY_TRADING_CODE', TD_RSP_QRY_TRADING_CODE),
 *         ('TD_RSP_QRY_INSTRUMENT_MARGIN_RATE', TD_RSP_QRY_INSTRUMENT_MARGIN_RATE),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_QRY_INSTRUMENT_COMMISSION_RATE', TD_RSP_QRY_INSTRUMENT_COMMISSION_RATE),
 *         ('TD_RSP_QRY_EXCHANGE', TD_RSP_QRY_EXCHANGE),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_INSTRUMENT_MARGIN_RATE); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 83, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_34 = PyTuple_New(2); if (unlikely(!__pyx_t_34)) __PYX_ERR(1, 83, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_34);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_INSTRUMENT_MARGIN_RAT);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_INSTRUMENT_MARGIN_RAT);
    PyTuple_SET_ITEM(__pyx_t_34, 0, __pyx_n_s_TD_RSP_QRY_INSTRUMENT_MARGIN_RAT);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_34, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":84
 *         ('TD_RSP_QRY_TRADING_CODE', TD_RSP_QRY_TRADING_CODE),
 *         ('TD_RSP_QRY_INSTRUMENT_MARGIN_RATE', TD_RSP_QRY_INSTRUMENT_MARGIN_RATE),
 *         ('TD_RSP_QRY_INSTRUMENT_COMMISSION_RATE', TD_RSP_QRY_INSTRUMENT_COMMISSION_RATE),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_QRY_EXCHANGE', TD_RSP_QRY_EXCHANGE),
 *         ('TD_RSP_QRY_PRODUCT', TD_RSP_QRY_PRODUCT),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_INSTRUMENT_COMMISSION_RATE); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_35 = PyTuple_New(2); if (unlikely(!__pyx_t_35)) __PYX_ERR(1, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_35);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_INSTRUMENT_COMMISSION);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_INSTRUMENT_COMMISSION);
    PyTuple_SET_ITEM(__pyx_t_35, 0, __pyx_n_s_TD_RSP_QRY_INSTRUMENT_COMMISSION);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_35, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":85
 *         ('TD_RSP_QRY_INSTRUMENT_MARGIN_RATE', TD_RSP_QRY_INSTRUMENT_MARGIN_RATE),
 *         ('TD_RSP_QRY_INSTRUMENT_COMMISSION_RATE', TD_RSP_QRY_INSTRUMENT_COMMISSION_RATE),
 *         ('TD_RSP_QRY_EXCHANGE', TD_RSP_QRY_EXCHANGE),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_QRY_PRODUCT', TD_RSP_QRY_PRODUCT),
 *         ('TD_RSP_QRY_INSTRUMENT', TD_RSP_QRY_INSTRUMENT),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_EXCHANGE); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 85, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_36 = PyTuple_New(2); if (unlikely(!__pyx_t_36)) __PYX_ERR(1, 85, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_36);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_EXCHANGE);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_EXCHANGE);
    PyTuple_SET_ITEM(__pyx_t_36, 0, __pyx_n_s_TD_RSP_QRY_EXCHANGE);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_36, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":86
 *         ('TD_RSP_QRY_INSTRUMENT_COMMISSION_RATE', TD_RSP_QRY_INSTRUMENT_COMMISSION_RATE),
 *         ('TD_RSP_QRY_EXCHANGE', TD_RSP_QRY_EXCHANGE),
 *         ('TD_RSP_QRY_PRODUCT', TD_RSP_QRY_PRODUCT),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_QRY_INSTRUMENT', TD_RSP_QRY_INSTRUMENT),
 *         ('TD_RSP_QRY_DEPTH_MARKET_DATA', TD_RSP_QRY_DEPTH_MARKET_DATA),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_PRODUCT); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 86, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_37 = PyTuple_New(2); if (unlikely(!__pyx_t_37)) __PYX_ERR(1, 86, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_37);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_PRODUCT);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_PRODUCT);
    PyTuple_SET_ITEM(__pyx_t_37, 0, __pyx_n_s_TD_RSP_QRY_PRODUCT);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_37, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":87
 *         ('TD_RSP_QRY_EXCHANGE', TD_RSP_QRY_EXCHANGE),
 *         ('TD_RSP_QRY_PRODUCT', TD_RSP_QRY_PRODUCT),
 *         ('TD_RSP_QRY_INSTRUMENT', TD_RSP_QRY_INSTRUMENT),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_QRY_DEPTH_MARKET_DATA', TD_RSP_QRY_DEPTH_MARKET_DATA),
 *         ('TD_RSP_QRY_SETTLE_INFO', TD_RSP_QRY_SETTLE_INFO),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_INSTRUMENT); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 87, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_38 = PyTuple_New(2); if (unlikely(!__pyx_t_38)) __PYX_ERR(1, 87, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_38);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_INSTRUMENT);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_INSTRUMENT);
    PyTuple_SET_ITEM(__pyx_t_38, 0, __pyx_n_s_TD_RSP_QRY_INSTRUMENT);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_38, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":88
 *         ('TD_RSP_QRY_PRODUCT', TD_RSP_QRY_PRODUCT),
 *         ('TD_RSP_QRY_INSTRUMENT', TD_RSP_QRY_INSTRUMENT),
 *         ('TD_RSP_QRY_DEPTH_MARKET_DATA', TD_RSP_QRY_DEPTH_MARKET_DATA),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_QRY_SETTLE_INFO', TD_RSP_QRY_SETTLE_INFO),
 *         ('TD_RSP_QRY_TRANSFER_BANK', TD_RSP_QRY_TRANSFER_BANK),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_DEPTH_MARKET_DATA); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_39 = PyTuple_New(2); if (unlikely(!__pyx_t_39)) __PYX_ERR(1, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_39);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_DEPTH_MARKET_DATA);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_DEPTH_MARKET_DATA);
    PyTuple_SET_ITEM(__pyx_t_39, 0, __pyx_n_s_TD_RSP_QRY_DEPTH_MARKET_DATA);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_39, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":89
 *         ('TD_RSP_QRY_INSTRUMENT', TD_RSP_QRY_INSTRUMENT),
 *         ('TD_RSP_QRY_DEPTH_MARKET_DATA', TD_RSP_QRY_DEPTH_MARKET_DATA),
 *         ('TD_RSP_QRY_SETTLE_INFO', TD_RSP_QRY_SETTLE_INFO),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_QRY_TRANSFER_BANK', TD_RSP_QRY_TRANSFER_BANK),
 *         ('TD_RSP_QRY_INVESTOR_POS_DETAIL', TD_RSP_QRY_INVESTOR_POS_DETAIL),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_SETTLE_INFO); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_40 = PyTuple_New(2); if (unlikely(!__pyx_t_40)) __PYX_ERR(1, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_40);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_SETTLE_INFO);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_SETTLE_INFO);
    PyTuple_SET_ITEM(__pyx_t_40, 0, __pyx_n_s_TD_RSP_QRY_SETTLE_INFO);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_40, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":90
 *         ('TD_RSP_QRY_DEPTH_MARKET_DATA', TD_RSP_QRY_DEPTH_MARKET_DATA),
 *         ('TD_RSP_QRY_SETTLE_INFO', TD_RSP_QRY_SETTLE_INFO),
 *         ('TD_RSP_QRY_TRANSFER_BANK', TD_RSP_QRY_TRANSFER_BANK),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_QRY_INVESTOR_POS_DETAIL', TD_RSP_QRY_INVESTOR_POS_DETAIL),
 *         ('TD_RSP_QRY_NOTICE', TD_RSP_QRY_NOTICE),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_TRANSFER_BANK); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 90, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_41 = PyTuple_New(2); if (unlikely(!__pyx_t_41)) __PYX_ERR(1, 90, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_41);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_TRANSFER_BANK);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_TRANSFER_BANK);
    PyTuple_SET_ITEM(__pyx_t_41, 0, __pyx_n_s_TD_RSP_QRY_TRANSFER_BANK);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_41, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":91
 *         ('TD_RSP_QRY_SETTLE_INFO', TD_RSP_QRY_SETTLE_INFO),
 *         ('TD_RSP_QRY_TRANSFER_BANK', TD_RSP_QRY_TRANSFER_BANK),
 *         ('TD_RSP_QRY_INVESTOR_POS_DETAIL', TD_RSP_QRY_INVESTOR_POS_DETAIL),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_QRY_NOTICE', TD_RSP_QRY_NOTICE),
 *         ('TD_RSP_QRY_SETTLE_INFO_CONFIRM', TD_RSP_QRY_SETTLE_INFO_CONFIRM),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_INVESTOR_POS_DETAIL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 91, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_42 = PyTuple_New(2); if (unlikely(!__pyx_t_42)) __PYX_ERR(1, 91, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_42);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_INVESTOR_POS_DETAIL);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_INVESTOR_POS_DETAIL);
    PyTuple_SET_ITEM(__pyx_t_42, 0, __pyx_n_s_TD_RSP_QRY_INVESTOR_POS_DETAIL);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_42, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":92
 *         ('TD_RSP_QRY_TRANSFER_BANK', TD_RSP_QRY_TRANSFER_BANK),
 *         ('TD_RSP_QRY_INVESTOR_POS_DETAIL', TD_RSP_QRY_INVESTOR_POS_DETAIL),
 *         ('TD_RSP_QRY_NOTICE', TD_RSP_QRY_NOTICE),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_QRY_SETTLE_INFO_CONFIRM', TD_RSP_QRY_SETTLE_INFO_CONFIRM),
 *         ('TD_RSP_QRY_INVESTOR_POS_COMB_DETAIL', TD_RSP_QRY_INVESTOR_POS_COMB_DETAIL),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_NOTICE); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 92, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_43 = PyTuple_New(2); if (unlikely(!__pyx_t_43)) __PYX_ERR(1, 92, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_43);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_NOTICE);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_NOTICE);
    PyTuple_SET_ITEM(__pyx_t_43, 0, __pyx_n_s_TD_RSP_QRY_NOTICE);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_43, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":93
 *         ('TD_RSP_QRY_INVESTOR_POS_DETAIL', TD_RSP_QRY_INVESTOR_POS_DETAIL),
 *         ('TD_RSP_QRY_NOTICE', TD_RSP_QRY_NOTICE),
 *         ('TD_RSP_QRY_SETTLE_INFO_CONFIRM', TD_RSP_QRY_SETTLE_INFO_CONFIRM),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_QRY_INVESTOR_POS_COMB_DETAIL', TD_RSP_QRY_INVESTOR_POS_COMB_DETAIL),
 *         ('TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_KEY', TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_KEY),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_SETTLE_INFO_CONFIRM); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 93, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_44 = PyTuple_New(2); if (unlikely(!__pyx_t_44)) __PYX_ERR(1, 93, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_44);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_SETTLE_INFO_CONFIRM);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_SETTLE_INFO_CONFIRM);
    PyTuple_SET_ITEM(__pyx_t_44, 0, __pyx_n_s_TD_RSP_QRY_SETTLE_INFO_CONFIRM);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_44, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":94
 *         ('TD_RSP_QRY_NOTICE', TD_RSP_QRY_NOTICE),
 *         ('TD_RSP_QRY_SETTLE_INFO_CONFIRM', TD_RSP_QRY_SETTLE_INFO_CONFIRM),
 *         ('TD_RSP_QRY_INVESTOR_POS_COMB_DETAIL', TD_RSP_QRY_INVESTOR_POS_COMB_DETAIL),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_KEY', TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_KEY),
 *         ('TD_RSP_QRY_EWARRANT_OFFSET', TD_RSP_QRY_EWARRANT_OFFSET),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_INVESTOR_POS_COMB_DETAIL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 94, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_45 = PyTuple_New(2); if (unlikely(!__pyx_t_45)) __PYX_ERR(1, 94, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_45);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_INVESTOR_POS_COMB_DET);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_INVESTOR_POS_COMB_DET);
    PyTuple_SET_ITEM(__pyx_t_45, 0, __pyx_n_s_TD_RSP_QRY_INVESTOR_POS_COMB_DET);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_45, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":95
 *         ('TD_RSP_QRY_SETTLE_INFO_CONFIRM', TD_RSP_QRY_SETTLE_INFO_CONFIRM),
 *         ('TD_RSP_QRY_INVESTOR_POS_COMB_DETAIL', TD_RSP_QRY_INVESTOR_POS_COMB_DETAIL),
 *         ('TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_KEY', TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_KEY),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_QRY_EWARRANT_OFFSET', TD_RSP_QRY_EWARRANT_OFFSET),
 *         ('TD_RSP_QRY_INVESTOR_PRODUCT_GROUP_MARGIN', TD_RSP_QRY_INVESTOR_PRODUCT_GROUP_MARGIN),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_KEY); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 95, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_46 = PyTuple_New(2); if (unlikely(!__pyx_t_46)) __PYX_ERR(1, 95, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_46);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_CFMMC_TRADING_ACCOUNT);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_CFMMC_TRADING_ACCOUNT);
    PyTuple_SET_ITEM(__pyx_t_46, 0, __pyx_n_s_TD_RSP_QRY_CFMMC_TRADING_ACCOUNT);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_46, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":96
 *         ('TD_RSP_QRY_INVESTOR_POS_COMB_DETAIL', TD_RSP_QRY_INVESTOR_POS_COMB_DETAIL),
 *         ('TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_KEY', TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_KEY),
 *         ('TD_RSP_QRY_EWARRANT_OFFSET', TD_RSP_QRY_EWARRANT_OFFSET),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_QRY_INVESTOR_PRODUCT_GROUP_MARGIN', TD_RSP_QRY_INVESTOR_PRODUCT_GROUP_MARGIN),
 *         ('TD_RSP_QRY_EXCHANGE_MARGIN_RATE', TD_RSP_QRY_EXCHANGE_MARGIN_RATE),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_EWARRANT_OFFSET); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 96, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_47 = PyTuple_New(2); if (unlikely(!__pyx_t_47)) __PYX_ERR(1, 96, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_47);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_EWARRANT_OFFSET);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_EWARRANT_OFFSET);
    PyTuple_SET_ITEM(__pyx_t_47, 0, __pyx_n_s_TD_RSP_QRY_EWARRANT_OFFSET);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_47, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":97
 *         ('TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_KEY', TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_KEY),
 *         ('TD_RSP_QRY_EWARRANT_OFFSET', TD_RSP_QRY_EWARRANT_OFFSET),
 *         ('TD_RSP_QRY_INVESTOR_PRODUCT_GROUP_MARGIN', TD_RSP_QRY_INVESTOR_PRODUCT_GROUP_MARGIN),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_QRY_EXCHANGE_MARGIN_RATE', TD_RSP_QRY_EXCHANGE_MARGIN_RATE),
 *         ('TD_RSP_QRY_EXCHANGE_MARGIN_RATE_ADJUST', TD_RSP_QRY_EXCHANGE_MARGIN_RATE_ADJUST),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_INVESTOR_PRODUCT_GROUP_MARGIN); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 97, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_48 = PyTuple_New(2); if (unlikely(!__pyx_t_48)) __PYX_ERR(1, 97, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_48);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_INVESTOR_PRODUCT_GROU);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_INVESTOR_PRODUCT_GROU);
    PyTuple_SET_ITEM(__pyx_t_48, 0, __pyx_n_s_TD_RSP_QRY_INVESTOR_PRODUCT_GROU);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_48, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":98
 *         ('TD_RSP_QRY_EWARRANT_OFFSET', TD_RSP_QRY_EWARRANT_OFFSET),
 *         ('TD_RSP_QRY_INVESTOR_PRODUCT_GROUP_MARGIN', TD_RSP_QRY_INVESTOR_PRODUCT_GROUP_MARGIN),
 *         ('TD_RSP_QRY_EXCHANGE_MARGIN_RATE', TD_RSP_QRY_EXCHANGE_MARGIN_RATE),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_QRY_EXCHANGE_MARGIN_RATE_ADJUST', TD_RSP_QRY_EXCHANGE_MARGIN_RATE_ADJUST),
 *         ('TD_RSP_QRY_EXCHANGE_RATE', TD_RSP_QRY_EXCHANGE_RATE),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_EXCHANGE_MARGIN_RATE); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 98, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_49 = PyTuple_New(2); if (unlikely(!__pyx_t_49)) __PYX_ERR(1, 98, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_49);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_EXCHANGE_MARGIN_RATE);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_EXCHANGE_MARGIN_RATE);
    PyTuple_SET_ITEM(__pyx_t_49, 0, __pyx_n_s_TD_RSP_QRY_EXCHANGE_MARGIN_RATE);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_49, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":99
 *         ('TD_RSP_QRY_INVESTOR_PRODUCT_GROUP_MARGIN', TD_RSP_QRY_INVESTOR_PRODUCT_GROUP_MARGIN),
 *         ('TD_RSP_QRY_EXCHANGE_MARGIN_RATE', TD_RSP_QRY_EXCHANGE_MARGIN_RATE),
 *         ('TD_RSP_QRY_EXCHANGE_MARGIN_RATE_ADJUST', TD_RSP_QRY_EXCHANGE_MARGIN_RATE_ADJUST),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_QRY_EXCHANGE_RATE', TD_RSP_QRY_EXCHANGE_RATE),
 *         ('TD_RSP_QRY_SEC_AGENT_ACID_MAP', TD_RSP_QRY_SEC_AGENT_ACID_MAP),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_EXCHANGE_MARGIN_RATE_ADJUST); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 99, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_50 = PyTuple_New(2); if (unlikely(!__pyx_t_50)) __PYX_ERR(1, 99, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_50);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_EXCHANGE_MARGIN_RATE_2);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_EXCHANGE_MARGIN_RATE_2);
    PyTuple_SET_ITEM(__pyx_t_50, 0, __pyx_n_s_TD_RSP_QRY_EXCHANGE_MARGIN_RATE_2);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_50, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":100
 *         ('TD_RSP_QRY_EXCHANGE_MARGIN_RATE', TD_RSP_QRY_EXCHANGE_MARGIN_RATE),
 *         ('TD_RSP_QRY_EXCHANGE_MARGIN_RATE_ADJUST', TD_RSP_QRY_EXCHANGE_MARGIN_RATE_ADJUST),
 *         ('TD_RSP_QRY_EXCHANGE_RATE', TD_RSP_QRY_EXCHANGE_RATE),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_QRY_SEC_AGENT_ACID_MAP', TD_RSP_QRY_SEC_AGENT_ACID_MAP),
 *         ('TD_RSP_QRY_PRODUCT_EXCH_RATE', TD_RSP_QRY_PRODUCT_EXCH_RATE),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_EXCHANGE_RATE); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 100, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_51 = PyTuple_New(2); if (unlikely(!__pyx_t_51)) __PYX_ERR(1, 100, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_51);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_EXCHANGE_RATE);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_EXCHANGE_RATE);
    PyTuple_SET_ITEM(__pyx_t_51, 0, __pyx_n_s_TD_RSP_QRY_EXCHANGE_RATE);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_51, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":101
 *         ('TD_RSP_QRY_EXCHANGE_MARGIN_RATE_ADJUST', TD_RSP_QRY_EXCHANGE_MARGIN_RATE_ADJUST),
 *         ('TD_RSP_QRY_EXCHANGE_RATE', TD_RSP_QRY_EXCHANGE_RATE),
 *         ('TD_RSP_QRY_SEC_AGENT_ACID_MAP', TD_RSP_QRY_SEC_AGENT_ACID_MAP),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_QRY_PRODUCT_EXCH_RATE', TD_RSP_QRY_PRODUCT_EXCH_RATE),
 *         ('TD_RSP_QRY_PRODUCT_GROUP', TD_RSP_QRY_PRODUCT_GROUP),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_SEC_AGENT_ACID_MAP); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 101, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_52 = PyTuple_New(2); if (unlikely(!__pyx_t_52)) __PYX_ERR(1, 101, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_52);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_SEC_AGENT_ACID_MAP);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_SEC_AGENT_ACID_MAP);
    PyTuple_SET_ITEM(__pyx_t_52, 0, __pyx_n_s_TD_RSP_QRY_SEC_AGENT_ACID_MAP);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_52, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":102
 *         ('TD_RSP_QRY_EXCHANGE_RATE', TD_RSP_QRY_EXCHANGE_RATE),
 *         ('TD_RSP_QRY_SEC_AGENT_ACID_MAP', TD_RSP_QRY_SEC_AGENT_ACID_MAP),
 *         ('TD_RSP_QRY_PRODUCT_EXCH_RATE', TD_RSP_QRY_PRODUCT_EXCH_RATE),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_QRY_PRODUCT_GROUP', TD_RSP_QRY_PRODUCT_GROUP),
 *         ('TD_RSP_QRY_MM_INSTRUMENT_COMMISSION_RATE', TD_RSP_QRY_MM_INSTRUMENT_COMMISSION_RATE),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_PRODUCT_EXCH_RATE); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_53 = PyTuple_New(2); if (unlikely(!__pyx_t_53)) __PYX_ERR(1, 102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_53);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_PRODUCT_EXCH_RATE);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_PRODUCT_EXCH_RATE);
    PyTuple_SET_ITEM(__pyx_t_53, 0, __pyx_n_s_TD_RSP_QRY_PRODUCT_EXCH_RATE);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_53, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":103
 *         ('TD_RSP_QRY_SEC_AGENT_ACID_MAP', TD_RSP_QRY_SEC_AGENT_ACID_MAP),
 *         ('TD_RSP_QRY_PRODUCT_EXCH_RATE', TD_RSP_QRY_PRODUCT_EXCH_RATE),
 *         ('TD_RSP_QRY_PRODUCT_GROUP', TD_RSP_QRY_PRODUCT_GROUP),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_QRY_MM_INSTRUMENT_COMMISSION_RATE', TD_RSP_QRY_MM_INSTRUMENT_COMMISSION_RATE),
 *         ('TD_RSP_QRY_MM_OPTION_INSTR_COMM_RATE', TD_RSP_QRY_MM_OPTION_INSTR_COMM_RATE),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_PRODUCT_GROUP); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_54 = PyTuple_New(2); if (unlikely(!__pyx_t_54)) __PYX_ERR(1, 103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_54);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_PRODUCT_GROUP);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_PRODUCT_GROUP);
    PyTuple_SET_ITEM(__pyx_t_54, 0, __pyx_n_s_TD_RSP_QRY_PRODUCT_GROUP);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_54, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":104
 *         ('TD_RSP_QRY_PRODUCT_EXCH_RATE', TD_RSP_QRY_PRODUCT_EXCH_RATE),
 *         ('TD_RSP_QRY_PRODUCT_GROUP', TD_RSP_QRY_PRODUCT_GROUP),
 *         ('TD_RSP_QRY_MM_INSTRUMENT_COMMISSION_RATE', TD_RSP_QRY_MM_INSTRUMENT_COMMISSION_RATE),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_QRY_MM_OPTION_INSTR_COMM_RATE', TD_RSP_QRY_MM_OPTION_INSTR_COMM_RATE),
 *         ('TD_RSP_QRY_INSTRUMENT_ORDER_COMM_RATE', TD_RSP_QRY_INSTRUMENT_ORDER_COMM_RATE),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_MM_INSTRUMENT_COMMISSION_RATE); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 104, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_55 = PyTuple_New(2); if (unlikely(!__pyx_t_55)) __PYX_ERR(1, 104, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_55);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_MM_INSTRUMENT_COMMISS);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_MM_INSTRUMENT_COMMISS);
    PyTuple_SET_ITEM(__pyx_t_55, 0, __pyx_n_s_TD_RSP_QRY_MM_INSTRUMENT_COMMISS);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_55, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":105
 *         ('TD_RSP_QRY_PRODUCT_GROUP', TD_RSP_QRY_PRODUCT_GROUP),
 *         ('TD_RSP_QRY_MM_INSTRUMENT_COMMISSION_RATE', TD_RSP_QRY_MM_INSTRUMENT_COMMISSION_RATE),
 *         ('TD_RSP_QRY_MM_OPTION_INSTR_COMM_RATE', TD_RSP_QRY_MM_OPTION_INSTR_COMM_RATE),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_QRY_INSTRUMENT_ORDER_COMM_RATE', TD_RSP_QRY_INSTRUMENT_ORDER_COMM_RATE),
 *         ('TD_RSP_QRY_OPTION_INSTR_TRADE_COST', TD_RSP_QRY_OPTION_INSTR_TRADE_COST),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_MM_OPTION_INSTR_COMM_RATE); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 105, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_56 = PyTuple_New(2); if (unlikely(!__pyx_t_56)) __PYX_ERR(1, 105, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_56);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_MM_OPTION_INSTR_COMM);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_MM_OPTION_INSTR_COMM);
    PyTuple_SET_ITEM(__pyx_t_56, 0, __pyx_n_s_TD_RSP_QRY_MM_OPTION_INSTR_COMM);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_56, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":106
 *         ('TD_RSP_QRY_MM_INSTRUMENT_COMMISSION_RATE', TD_RSP_QRY_MM_INSTRUMENT_COMMISSION_RATE),
 *         ('TD_RSP_QRY_MM_OPTION_INSTR_COMM_RATE', TD_RSP_QRY_MM_OPTION_INSTR_COMM_RATE),
 *         ('TD_RSP_QRY_INSTRUMENT_ORDER_COMM_RATE', TD_RSP_QRY_INSTRUMENT_ORDER_COMM_RATE),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_QRY_OPTION_INSTR_TRADE_COST', TD_RSP_QRY_OPTION_INSTR_TRADE_COST),
 *         ('TD_RSP_QRY_OPTION_INSTR_COMM_RATE', TD_RSP_QRY_OPTION_INSTR_COMM_RATE),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_INSTRUMENT_ORDER_COMM_RATE); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 106, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_57 = PyTuple_New(2); if (unlikely(!__pyx_t_57)) __PYX_ERR(1, 106, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_57);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_INSTRUMENT_ORDER_COMM);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_INSTRUMENT_ORDER_COMM);
    PyTuple_SET_ITEM(__pyx_t_57, 0, __pyx_n_s_TD_RSP_QRY_INSTRUMENT_ORDER_COMM);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_57, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":107
 *         ('TD_RSP_QRY_MM_OPTION_INSTR_COMM_RATE', TD_RSP_QRY_MM_OPTION_INSTR_COMM_RATE),
 *         ('TD_RSP_QRY_INSTRUMENT_ORDER_COMM_RATE', TD_RSP_QRY_INSTRUMENT_ORDER_COMM_RATE),
 *         ('TD_RSP_QRY_OPTION_INSTR_TRADE_COST', TD_RSP_QRY_OPTION_INSTR_TRADE_COST),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_QRY_OPTION_INSTR_COMM_RATE', TD_RSP_QRY_OPTION_INSTR_COMM_RATE),
 *         ('TD_RSP_QRY_EXEC_ORDER', TD_RSP_QRY_EXEC_ORDER),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_OPTION_INSTR_TRADE_COST); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_58 = PyTuple_New(2); if (unlikely(!__pyx_t_58)) __PYX_ERR(1, 107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_58);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_OPTION_INSTR_TRADE_CO);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_OPTION_INSTR_TRADE_CO);
    PyTuple_SET_ITEM(__pyx_t_58, 0, __pyx_n_s_TD_RSP_QRY_OPTION_INSTR_TRADE_CO);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_58, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":108
 *         ('TD_RSP_QRY_INSTRUMENT_ORDER_COMM_RATE', TD_RSP_QRY_INSTRUMENT_ORDER_COMM_RATE),
 *         ('TD_RSP_QRY_OPTION_INSTR_TRADE_COST', TD_RSP_QRY_OPTION_INSTR_TRADE_COST),
 *         ('TD_RSP_QRY_OPTION_INSTR_COMM_RATE', TD_RSP_QRY_OPTION_INSTR_COMM_RATE),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_QRY_EXEC_ORDER', TD_RSP_QRY_EXEC_ORDER),
 *         ('TD_RSP_QRY_FOR_QUOTE', TD_RSP_QRY_FOR_QUOTE),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_OPTION_INSTR_COMM_RATE); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 108, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_59 = PyTuple_New(2); if (unlikely(!__pyx_t_59)) __PYX_ERR(1, 108, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_59);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_OPTION_INSTR_COMM_RAT);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_OPTION_INSTR_COMM_RAT);
    PyTuple_SET_ITEM(__pyx_t_59, 0, __pyx_n_s_TD_RSP_QRY_OPTION_INSTR_COMM_RAT);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_59, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":109
 *         ('TD_RSP_QRY_OPTION_INSTR_TRADE_COST', TD_RSP_QRY_OPTION_INSTR_TRADE_COST),
 *         ('TD_RSP_QRY_OPTION_INSTR_COMM_RATE', TD_RSP_QRY_OPTION_INSTR_COMM_RATE),
 *         ('TD_RSP_QRY_EXEC_ORDER', TD_RSP_QRY_EXEC_ORDER),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_QRY_FOR_QUOTE', TD_RSP_QRY_FOR_QUOTE),
 *         ('TD_RSP_QRY_QUOTE', TD_RSP_QRY_QUOTE),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_EXEC_ORDER); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 109, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_60 = PyTuple_New(2); if (unlikely(!__pyx_t_60)) __PYX_ERR(1, 109, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_60);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_EXEC_ORDER);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_EXEC_ORDER);
    PyTuple_SET_ITEM(__pyx_t_60, 0, __pyx_n_s_TD_RSP_QRY_EXEC_ORDER);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_60, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":110
 *         ('TD_RSP_QRY_OPTION_INSTR_COMM_RATE', TD_RSP_QRY_OPTION_INSTR_COMM_RATE),
 *         ('TD_RSP_QRY_EXEC_ORDER', TD_RSP_QRY_EXEC_ORDER),
 *         ('TD_RSP_QRY_FOR_QUOTE', TD_RSP_QRY_FOR_QUOTE),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_QRY_QUOTE', TD_RSP_QRY_QUOTE),
 *         ('TD_RSP_QRY_COMB_INSTRUMENT_GUARD', TD_RSP_QRY_COMB_INSTRUMENT_GUARD),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_FOR_QUOTE); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 110, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_61 = PyTuple_New(2); if (unlikely(!__pyx_t_61)) __PYX_ERR(1, 110, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_61);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_FOR_QUOTE);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_FOR_QUOTE);
    PyTuple_SET_ITEM(__pyx_t_61, 0, __pyx_n_s_TD_RSP_QRY_FOR_QUOTE);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_61, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":111
 *         ('TD_RSP_QRY_EXEC_ORDER', TD_RSP_QRY_EXEC_ORDER),
 *         ('TD_RSP_QRY_FOR_QUOTE', TD_RSP_QRY_FOR_QUOTE),
 *         ('TD_RSP_QRY_QUOTE', TD_RSP_QRY_QUOTE),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_QRY_COMB_INSTRUMENT_GUARD', TD_RSP_QRY_COMB_INSTRUMENT_GUARD),
 *         ('TD_RSP_QRY_COMB_ACTION', TD_RSP_QRY_COMB_ACTION),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_QUOTE); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_62 = PyTuple_New(2); if (unlikely(!__pyx_t_62)) __PYX_ERR(1, 111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_62);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_QUOTE);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_QUOTE);
    PyTuple_SET_ITEM(__pyx_t_62, 0, __pyx_n_s_TD_RSP_QRY_QUOTE);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_62, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":112
 *         ('TD_RSP_QRY_FOR_QUOTE', TD_RSP_QRY_FOR_QUOTE),
 *         ('TD_RSP_QRY_QUOTE', TD_RSP_QRY_QUOTE),
 *         ('TD_RSP_QRY_COMB_INSTRUMENT_GUARD', TD_RSP_QRY_COMB_INSTRUMENT_GUARD),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_QRY_COMB_ACTION', TD_RSP_QRY_COMB_ACTION),
 *         ('TD_RSP_QRY_TRANSFER_SERIAL', TD_RSP_QRY_TRANSFER_SERIAL),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_COMB_INSTRUMENT_GUARD); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_63 = PyTuple_New(2); if (unlikely(!__pyx_t_63)) __PYX_ERR(1, 112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_63);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_COMB_INSTRUMENT_GUARD);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_COMB_INSTRUMENT_GUARD);
    PyTuple_SET_ITEM(__pyx_t_63, 0, __pyx_n_s_TD_RSP_QRY_COMB_INSTRUMENT_GUARD);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_63, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":113
 *         ('TD_RSP_QRY_QUOTE', TD_RSP_QRY_QUOTE),
 *         ('TD_RSP_QRY_COMB_INSTRUMENT_GUARD', TD_RSP_QRY_COMB_INSTRUMENT_GUARD),
 *         ('TD_RSP_QRY_COMB_ACTION', TD_RSP_QRY_COMB_ACTION),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_QRY_TRANSFER_SERIAL', TD_RSP_QRY_TRANSFER_SERIAL),
 *         ('TD_RSP_QRY_ACCOUNT_REGISTER', TD_RSP_QRY_ACCOUNT_REGISTER),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_COMB_ACTION); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 113, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_64 = PyTuple_New(2); if (unlikely(!__pyx_t_64)) __PYX_ERR(1, 113, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_64);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_COMB_ACTION);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_COMB_ACTION);
    PyTuple_SET_ITEM(__pyx_t_64, 0, __pyx_n_s_TD_RSP_QRY_COMB_ACTION);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_64, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":114
 *         ('TD_RSP_QRY_COMB_INSTRUMENT_GUARD', TD_RSP_QRY_COMB_INSTRUMENT_GUARD),
 *         ('TD_RSP_QRY_COMB_ACTION', TD_RSP_QRY_COMB_ACTION),
 *         ('TD_RSP_QRY_TRANSFER_SERIAL', TD_RSP_QRY_TRANSFER_SERIAL),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_QRY_ACCOUNT_REGISTER', TD_RSP_QRY_ACCOUNT_REGISTER),
 *         ('TD_RSP_ERROR', TD_RSP_ERROR),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_TRANSFER_SERIAL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_65 = PyTuple_New(2); if (unlikely(!__pyx_t_65)) __PYX_ERR(1, 114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_65);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_TRANSFER_SERIAL);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_TRANSFER_SERIAL);
    PyTuple_SET_ITEM(__pyx_t_65, 0, __pyx_n_s_TD_RSP_QRY_TRANSFER_SERIAL);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_65, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":115
 *         ('TD_RSP_QRY_COMB_ACTION', TD_RSP_QRY_COMB_ACTION),
 *         ('TD_RSP_QRY_TRANSFER_SERIAL', TD_RSP_QRY_TRANSFER_SERIAL),
 *         ('TD_RSP_QRY_ACCOUNT_REGISTER', TD_RSP_QRY_ACCOUNT_REGISTER),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_ERROR', TD_RSP_ERROR),
 *         ('TD_RTN_ORDER', TD_RTN_ORDER),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_ACCOUNT_REGISTER); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 115, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_66 = PyTuple_New(2); if (unlikely(!__pyx_t_66)) __PYX_ERR(1, 115, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_66);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_ACCOUNT_REGISTER);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_ACCOUNT_REGISTER);
    PyTuple_SET_ITEM(__pyx_t_66, 0, __pyx_n_s_TD_RSP_QRY_ACCOUNT_REGISTER);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_66, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":116
 *         ('TD_RSP_QRY_TRANSFER_SERIAL', TD_RSP_QRY_TRANSFER_SERIAL),
 *         ('TD_RSP_QRY_ACCOUNT_REGISTER', TD_RSP_QRY_ACCOUNT_REGISTER),
 *         ('TD_RSP_ERROR', TD_RSP_ERROR),             # <<<<<<<<<<<<<<
 *         ('TD_RTN_ORDER', TD_RTN_ORDER),
 *         ('TD_RTN_TRADE', TD_RTN_TRADE),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_ERROR); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 116, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_67 = PyTuple_New(2); if (unlikely(!__pyx_t_67)) __PYX_ERR(1, 116, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_67);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_ERROR);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_ERROR);
    PyTuple_SET_ITEM(__pyx_t_67, 0, __pyx_n_s_TD_RSP_ERROR);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_67, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":117
 *         ('TD_RSP_QRY_ACCOUNT_REGISTER', TD_RSP_QRY_ACCOUNT_REGISTER),
 *         ('TD_RSP_ERROR', TD_RSP_ERROR),
 *         ('TD_RTN_ORDER', TD_RTN_ORDER),             # <<<<<<<<<<<<<<
 *         ('TD_RTN_TRADE', TD_RTN_TRADE),
 *         ('TD_ERR_RTN_ORDER_INSERT', TD_ERR_RTN_ORDER_INSERT),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RTN_ORDER); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 117, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_68 = PyTuple_New(2); if (unlikely(!__pyx_t_68)) __PYX_ERR(1, 117, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_68);
    __Pyx_INCREF(__pyx_n_s_TD_RTN_ORDER);
    __Pyx_GIVEREF(__pyx_n_s_TD_RTN_ORDER);
    PyTuple_SET_ITEM(__pyx_t_68, 0, __pyx_n_s_TD_RTN_ORDER);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_68, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":118
 *         ('TD_RSP_ERROR', TD_RSP_ERROR),
 *         ('TD_RTN_ORDER', TD_RTN_ORDER),
 *         ('TD_RTN_TRADE', TD_RTN_TRADE),             # <<<<<<<<<<<<<<
 *         ('TD_ERR_RTN_ORDER_INSERT', TD_ERR_RTN_ORDER_INSERT),
 *         ('TD_ERR_RTN_ORDER_ACTION', TD_ERR_RTN_ORDER_ACTION),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RTN_TRADE); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 118, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_69 = PyTuple_New(2); if (unlikely(!__pyx_t_69)) __PYX_ERR(1, 118, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_69);
    __Pyx_INCREF(__pyx_n_s_TD_RTN_TRADE);
    __Pyx_GIVEREF(__pyx_n_s_TD_RTN_TRADE);
    PyTuple_SET_ITEM(__pyx_t_69, 0, __pyx_n_s_TD_RTN_TRADE);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_69, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":119
 *         ('TD_RTN_ORDER', TD_RTN_ORDER),
 *         ('TD_RTN_TRADE', TD_RTN_TRADE),
 *         ('TD_ERR_RTN_ORDER_INSERT', TD_ERR_RTN_ORDER_INSERT),             # <<<<<<<<<<<<<<
 *         ('TD_ERR_RTN_ORDER_ACTION', TD_ERR_RTN_ORDER_ACTION),
 *         ('TD_RTN_INSTRUMENT_STATUS', TD_RTN_INSTRUMENT_STATUS),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_ERR_RTN_ORDER_INSERT); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 119, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_70 = PyTuple_New(2); if (unlikely(!__pyx_t_70)) __PYX_ERR(1, 119, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_70);
    __Pyx_INCREF(__pyx_n_s_TD_ERR_RTN_ORDER_INSERT);
    __Pyx_GIVEREF(__pyx_n_s_TD_ERR_RTN_ORDER_INSERT);
    PyTuple_SET_ITEM(__pyx_t_70, 0, __pyx_n_s_TD_ERR_RTN_ORDER_INSERT);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_70, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":120
 *         ('TD_RTN_TRADE', TD_RTN_TRADE),
 *         ('TD_ERR_RTN_ORDER_INSERT', TD_ERR_RTN_ORDER_INSERT),
 *         ('TD_ERR_RTN_ORDER_ACTION', TD_ERR_RTN_ORDER_ACTION),             # <<<<<<<<<<<<<<
 *         ('TD_RTN_INSTRUMENT_STATUS', TD_RTN_INSTRUMENT_STATUS),
 *         ('TD_RTN_BULLETIN', TD_RTN_BULLETIN),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_ERR_RTN_ORDER_ACTION); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 120, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_71 = PyTuple_New(2); if (unlikely(!__pyx_t_71)) __PYX_ERR(1, 120, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_71);
    __Pyx_INCREF(__pyx_n_s_TD_ERR_RTN_ORDER_ACTION);
    __Pyx_GIVEREF(__pyx_n_s_TD_ERR_RTN_ORDER_ACTION);
    PyTuple_SET_ITEM(__pyx_t_71, 0, __pyx_n_s_TD_ERR_RTN_ORDER_ACTION);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_71, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":121
 *         ('TD_ERR_RTN_ORDER_INSERT', TD_ERR_RTN_ORDER_INSERT),
 *         ('TD_ERR_RTN_ORDER_ACTION', TD_ERR_RTN_ORDER_ACTION),
 *         ('TD_RTN_INSTRUMENT_STATUS', TD_RTN_INSTRUMENT_STATUS),             # <<<<<<<<<<<<<<
 *         ('TD_RTN_BULLETIN', TD_RTN_BULLETIN),
 *         ('TD_RTN_TRADING_NOTICE', TD_RTN_TRADING_NOTICE),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RTN_INSTRUMENT_STATUS); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 121, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_72 = PyTuple_New(2); if (unlikely(!__pyx_t_72)) __PYX_ERR(1, 121, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_72);
    __Pyx_INCREF(__pyx_n_s_TD_RTN_INSTRUMENT_STATUS);
    __Pyx_GIVEREF(__pyx_n_s_TD_RTN_INSTRUMENT_STATUS);
    PyTuple_SET_ITEM(__pyx_t_72, 0, __pyx_n_s_TD_RTN_INSTRUMENT_STATUS);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_72, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":122
 *         ('TD_ERR_RTN_ORDER_ACTION', TD_ERR_RTN_ORDER_ACTION),
 *         ('TD_RTN_INSTRUMENT_STATUS', TD_RTN_INSTRUMENT_STATUS),
 *         ('TD_RTN_BULLETIN', TD_RTN_BULLETIN),             # <<<<<<<<<<<<<<
 *         ('TD_RTN_TRADING_NOTICE', TD_RTN_TRADING_NOTICE),
 *         ('TD_RTN_ERROR_CONDITIONAL_ORDER', TD_RTN_ERROR_CONDITIONAL_ORDER),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RTN_BULLETIN); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 122, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_73 = PyTuple_New(2); if (unlikely(!__pyx_t_73)) __PYX_ERR(1, 122, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_73);
    __Pyx_INCREF(__pyx_n_s_TD_RTN_BULLETIN);
    __Pyx_GIVEREF(__pyx_n_s_TD_RTN_BULLETIN);
    PyTuple_SET_ITEM(__pyx_t_73, 0, __pyx_n_s_TD_RTN_BULLETIN);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_73, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":123
 *         ('TD_RTN_INSTRUMENT_STATUS', TD_RTN_INSTRUMENT_STATUS),
 *         ('TD_RTN_BULLETIN', TD_RTN_BULLETIN),
 *         ('TD_RTN_TRADING_NOTICE', TD_RTN_TRADING_NOTICE),             # <<<<<<<<<<<<<<
 *         ('TD_RTN_ERROR_CONDITIONAL_ORDER', TD_RTN_ERROR_CONDITIONAL_ORDER),
 *         ('TD_RTN_EXEC_ORDER', TD_RTN_EXEC_ORDER),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RTN_TRADING_NOTICE); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 123, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_74 = PyTuple_New(2); if (unlikely(!__pyx_t_74)) __PYX_ERR(1, 123, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_74);
    __Pyx_INCREF(__pyx_n_s_TD_RTN_TRADING_NOTICE);
    __Pyx_GIVEREF(__pyx_n_s_TD_RTN_TRADING_NOTICE);
    PyTuple_SET_ITEM(__pyx_t_74, 0, __pyx_n_s_TD_RTN_TRADING_NOTICE);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_74, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":124
 *         ('TD_RTN_BULLETIN', TD_RTN_BULLETIN),
 *         ('TD_RTN_TRADING_NOTICE', TD_RTN_TRADING_NOTICE),
 *         ('TD_RTN_ERROR_CONDITIONAL_ORDER', TD_RTN_ERROR_CONDITIONAL_ORDER),             # <<<<<<<<<<<<<<
 *         ('TD_RTN_EXEC_ORDER', TD_RTN_EXEC_ORDER),
 *         ('TD_ERR_RTN_EXEC_ORDER_INSERT', TD_ERR_RTN_EXEC_ORDER_INSERT),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RTN_ERROR_CONDITIONAL_ORDER); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 124, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_75 = PyTuple_New(2); if (unlikely(!__pyx_t_75)) __PYX_ERR(1, 124, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_75);
    __Pyx_INCREF(__pyx_n_s_TD_RTN_ERROR_CONDITIONAL_ORDER);
    __Pyx_GIVEREF(__pyx_n_s_TD_RTN_ERROR_CONDITIONAL_ORDER);
    PyTuple_SET_ITEM(__pyx_t_75, 0, __pyx_n_s_TD_RTN_ERROR_CONDITIONAL_ORDER);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_75, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":125
 *         ('TD_RTN_TRADING_NOTICE', TD_RTN_TRADING_NOTICE),
 *         ('TD_RTN_ERROR_CONDITIONAL_ORDER', TD_RTN_ERROR_CONDITIONAL_ORDER),
 *         ('TD_RTN_EXEC_ORDER', TD_RTN_EXEC_ORDER),             # <<<<<<<<<<<<<<
 *         ('TD_ERR_RTN_EXEC_ORDER_INSERT', TD_ERR_RTN_EXEC_ORDER_INSERT),
 *         ('TD_ERR_RTN_EXEC_ORDER_ACTION', TD_ERR_RTN_EXEC_ORDER_ACTION),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RTN_EXEC_ORDER); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_76 = PyTuple_New(2); if (unlikely(!__pyx_t_76)) __PYX_ERR(1, 125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_76);
    __Pyx_INCREF(__pyx_n_s_TD_RTN_EXEC_ORDER);
    __Pyx_GIVEREF(__pyx_n_s_TD_RTN_EXEC_ORDER);
    PyTuple_SET_ITEM(__pyx_t_76, 0, __pyx_n_s_TD_RTN_EXEC_ORDER);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_76, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":126
 *         ('TD_RTN_ERROR_CONDITIONAL_ORDER', TD_RTN_ERROR_CONDITIONAL_ORDER),
 *         ('TD_RTN_EXEC_ORDER', TD_RTN_EXEC_ORDER),
 *         ('TD_ERR_RTN_EXEC_ORDER_INSERT', TD_ERR_RTN_EXEC_ORDER_INSERT),             # <<<<<<<<<<<<<<
 *         ('TD_ERR_RTN_EXEC_ORDER_ACTION', TD_ERR_RTN_EXEC_ORDER_ACTION),
 *         ('TD_ERR_RTN_FOR_QUOTE_INSERT', TD_ERR_RTN_FOR_QUOTE_INSERT),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_ERR_RTN_EXEC_ORDER_INSERT); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 126, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_77 = PyTuple_New(2); if (unlikely(!__pyx_t_77)) __PYX_ERR(1, 126, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_77);
    __Pyx_INCREF(__pyx_n_s_TD_ERR_RTN_EXEC_ORDER_INSERT);
    __Pyx_GIVEREF(__pyx_n_s_TD_ERR_RTN_EXEC_ORDER_INSERT);
    PyTuple_SET_ITEM(__pyx_t_77, 0, __pyx_n_s_TD_ERR_RTN_EXEC_ORDER_INSERT);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_77, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":127
 *         ('TD_RTN_EXEC_ORDER', TD_RTN_EXEC_ORDER),
 *         ('TD_ERR_RTN_EXEC_ORDER_INSERT', TD_ERR_RTN_EXEC_ORDER_INSERT),
 *         ('TD_ERR_RTN_EXEC_ORDER_ACTION', TD_ERR_RTN_EXEC_ORDER_ACTION),             # <<<<<<<<<<<<<<
 *         ('TD_ERR_RTN_FOR_QUOTE_INSERT', TD_ERR_RTN_FOR_QUOTE_INSERT),
 *         ('TD_RTN_QUOTE', TD_RTN_QUOTE),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_ERR_RTN_EXEC_ORDER_ACTION); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 127, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_78 = PyTuple_New(2); if (unlikely(!__pyx_t_78)) __PYX_ERR(1, 127, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_78);
    __Pyx_INCREF(__pyx_n_s_TD_ERR_RTN_EXEC_ORDER_ACTION);
    __Pyx_GIVEREF(__pyx_n_s_TD_ERR_RTN_EXEC_ORDER_ACTION);
    PyTuple_SET_ITEM(__pyx_t_78, 0, __pyx_n_s_TD_ERR_RTN_EXEC_ORDER_ACTION);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_78, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":128
 *         ('TD_ERR_RTN_EXEC_ORDER_INSERT', TD_ERR_RTN_EXEC_ORDER_INSERT),
 *         ('TD_ERR_RTN_EXEC_ORDER_ACTION', TD_ERR_RTN_EXEC_ORDER_ACTION),
 *         ('TD_ERR_RTN_FOR_QUOTE_INSERT', TD_ERR_RTN_FOR_QUOTE_INSERT),             # <<<<<<<<<<<<<<
 *         ('TD_RTN_QUOTE', TD_RTN_QUOTE),
 *         ('TD_ERR_RTN_QUOTE_INSERT', TD_ERR_RTN_QUOTE_INSERT),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_ERR_RTN_FOR_QUOTE_INSERT); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 128, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_79 = PyTuple_New(2); if (unlikely(!__pyx_t_79)) __PYX_ERR(1, 128, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_79);
    __Pyx_INCREF(__pyx_n_s_TD_ERR_RTN_FOR_QUOTE_INSERT);
    __Pyx_GIVEREF(__pyx_n_s_TD_ERR_RTN_FOR_QUOTE_INSERT);
    PyTuple_SET_ITEM(__pyx_t_79, 0, __pyx_n_s_TD_ERR_RTN_FOR_QUOTE_INSERT);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_79, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":129
 *         ('TD_ERR_RTN_EXEC_ORDER_ACTION', TD_ERR_RTN_EXEC_ORDER_ACTION),
 *         ('TD_ERR_RTN_FOR_QUOTE_INSERT', TD_ERR_RTN_FOR_QUOTE_INSERT),
 *         ('TD_RTN_QUOTE', TD_RTN_QUOTE),             # <<<<<<<<<<<<<<
 *         ('TD_ERR_RTN_QUOTE_INSERT', TD_ERR_RTN_QUOTE_INSERT),
 *         ('TD_ERR_RTN_QUOTE_ACTION', TD_ERR_RTN_QUOTE_ACTION),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RTN_QUOTE); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_80 = PyTuple_New(2); if (unlikely(!__pyx_t_80)) __PYX_ERR(1, 129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_80);
    __Pyx_INCREF(__pyx_n_s_TD_RTN_QUOTE);
    __Pyx_GIVEREF(__pyx_n_s_TD_RTN_QUOTE);
    PyTuple_SET_ITEM(__pyx_t_80, 0, __pyx_n_s_TD_RTN_QUOTE);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_80, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":130
 *         ('TD_ERR_RTN_FOR_QUOTE_INSERT', TD_ERR_RTN_FOR_QUOTE_INSERT),
 *         ('TD_RTN_QUOTE', TD_RTN_QUOTE),
 *         ('TD_ERR_RTN_QUOTE_INSERT', TD_ERR_RTN_QUOTE_INSERT),             # <<<<<<<<<<<<<<
 *         ('TD_ERR_RTN_QUOTE_ACTION', TD_ERR_RTN_QUOTE_ACTION),
 *         ('TD_RTN_FOR_QUOTE_RSP', TD_RTN_FOR_QUOTE_RSP),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_ERR_RTN_QUOTE_INSERT); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_81 = PyTuple_New(2); if (unlikely(!__pyx_t_81)) __PYX_ERR(1, 130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_81);
    __Pyx_INCREF(__pyx_n_s_TD_ERR_RTN_QUOTE_INSERT);
    __Pyx_GIVEREF(__pyx_n_s_TD_ERR_RTN_QUOTE_INSERT);
    PyTuple_SET_ITEM(__pyx_t_81, 0, __pyx_n_s_TD_ERR_RTN_QUOTE_INSERT);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_81, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":131
 *         ('TD_RTN_QUOTE', TD_RTN_QUOTE),
 *         ('TD_ERR_RTN_QUOTE_INSERT', TD_ERR_RTN_QUOTE_INSERT),
 *         ('TD_ERR_RTN_QUOTE_ACTION', TD_ERR_RTN_QUOTE_ACTION),             # <<<<<<<<<<<<<<
 *         ('TD_RTN_FOR_QUOTE_RSP', TD_RTN_FOR_QUOTE_RSP),
 *         ('TD_RTN_CFMMC_TRADING_ACCOUNT_TOKEN', TD_RTN_CFMMC_TRADING_ACCOUNT_TOKEN),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_ERR_RTN_QUOTE_ACTION); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_82 = PyTuple_New(2); if (unlikely(!__pyx_t_82)) __PYX_ERR(1, 131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_82);
    __Pyx_INCREF(__pyx_n_s_TD_ERR_RTN_QUOTE_ACTION);
    __Pyx_GIVEREF(__pyx_n_s_TD_ERR_RTN_QUOTE_ACTION);
    PyTuple_SET_ITEM(__pyx_t_82, 0, __pyx_n_s_TD_ERR_RTN_QUOTE_ACTION);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_82, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":132
 *         ('TD_ERR_RTN_QUOTE_INSERT', TD_ERR_RTN_QUOTE_INSERT),
 *         ('TD_ERR_RTN_QUOTE_ACTION', TD_ERR_RTN_QUOTE_ACTION),
 *         ('TD_RTN_FOR_QUOTE_RSP', TD_RTN_FOR_QUOTE_RSP),             # <<<<<<<<<<<<<<
 *         ('TD_RTN_CFMMC_TRADING_ACCOUNT_TOKEN', TD_RTN_CFMMC_TRADING_ACCOUNT_TOKEN),
 *         ('TD_ERR_RTN_BATCH_ORDER_ACTION', TD_ERR_RTN_BATCH_ORDER_ACTION),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RTN_FOR_QUOTE_RSP); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 132, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_83 = PyTuple_New(2); if (unlikely(!__pyx_t_83)) __PYX_ERR(1, 132, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_83);
    __Pyx_INCREF(__pyx_n_s_TD_RTN_FOR_QUOTE_RSP);
    __Pyx_GIVEREF(__pyx_n_s_TD_RTN_FOR_QUOTE_RSP);
    PyTuple_SET_ITEM(__pyx_t_83, 0, __pyx_n_s_TD_RTN_FOR_QUOTE_RSP);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_83, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":133
 *         ('TD_ERR_RTN_QUOTE_ACTION', TD_ERR_RTN_QUOTE_ACTION),
 *         ('TD_RTN_FOR_QUOTE_RSP', TD_RTN_FOR_QUOTE_RSP),
 *         ('TD_RTN_CFMMC_TRADING_ACCOUNT_TOKEN', TD_RTN_CFMMC_TRADING_ACCOUNT_TOKEN),             # <<<<<<<<<<<<<<
 *         ('TD_ERR_RTN_BATCH_ORDER_ACTION', TD_ERR_RTN_BATCH_ORDER_ACTION),
 *         ('TD_RTN_COMB_ACTION', TD_RTN_COMB_ACTION),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RTN_CFMMC_TRADING_ACCOUNT_TOKEN); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 133, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_84 = PyTuple_New(2); if (unlikely(!__pyx_t_84)) __PYX_ERR(1, 133, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_84);
    __Pyx_INCREF(__pyx_n_s_TD_RTN_CFMMC_TRADING_ACCOUNT_TOK);
    __Pyx_GIVEREF(__pyx_n_s_TD_RTN_CFMMC_TRADING_ACCOUNT_TOK);
    PyTuple_SET_ITEM(__pyx_t_84, 0, __pyx_n_s_TD_RTN_CFMMC_TRADING_ACCOUNT_TOK);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_84, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":134
 *         ('TD_RTN_FOR_QUOTE_RSP', TD_RTN_FOR_QUOTE_RSP),
 *         ('TD_RTN_CFMMC_TRADING_ACCOUNT_TOKEN', TD_RTN_CFMMC_TRADING_ACCOUNT_TOKEN),
 *         ('TD_ERR_RTN_BATCH_ORDER_ACTION', TD_ERR_RTN_BATCH_ORDER_ACTION),             # <<<<<<<<<<<<<<
 *         ('TD_RTN_COMB_ACTION', TD_RTN_COMB_ACTION),
 *         ('TD_ERR_RTN_COMB_ACTION_INSERT', TD_ERR_RTN_COMB_ACTION_INSERT),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_ERR_RTN_BATCH_ORDER_ACTION); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 134, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_85 = PyTuple_New(2); if (unlikely(!__pyx_t_85)) __PYX_ERR(1, 134, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_85);
    __Pyx_INCREF(__pyx_n_s_TD_ERR_RTN_BATCH_ORDER_ACTION);
    __Pyx_GIVEREF(__pyx_n_s_TD_ERR_RTN_BATCH_ORDER_ACTION);
    PyTuple_SET_ITEM(__pyx_t_85, 0, __pyx_n_s_TD_ERR_RTN_BATCH_ORDER_ACTION);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_85, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":135
 *         ('TD_RTN_CFMMC_TRADING_ACCOUNT_TOKEN', TD_RTN_CFMMC_TRADING_ACCOUNT_TOKEN),
 *         ('TD_ERR_RTN_BATCH_ORDER_ACTION', TD_ERR_RTN_BATCH_ORDER_ACTION),
 *         ('TD_RTN_COMB_ACTION', TD_RTN_COMB_ACTION),             # <<<<<<<<<<<<<<
 *         ('TD_ERR_RTN_COMB_ACTION_INSERT', TD_ERR_RTN_COMB_ACTION_INSERT),
 *         ('TD_RSP_QRY_CONTRACT_BANK', TD_RSP_QRY_CONTRACT_BANK),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RTN_COMB_ACTION); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_86 = PyTuple_New(2); if (unlikely(!__pyx_t_86)) __PYX_ERR(1, 135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_86);
    __Pyx_INCREF(__pyx_n_s_TD_RTN_COMB_ACTION);
    __Pyx_GIVEREF(__pyx_n_s_TD_RTN_COMB_ACTION);
    PyTuple_SET_ITEM(__pyx_t_86, 0, __pyx_n_s_TD_RTN_COMB_ACTION);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_86, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":136
 *         ('TD_ERR_RTN_BATCH_ORDER_ACTION', TD_ERR_RTN_BATCH_ORDER_ACTION),
 *         ('TD_RTN_COMB_ACTION', TD_RTN_COMB_ACTION),
 *         ('TD_ERR_RTN_COMB_ACTION_INSERT', TD_ERR_RTN_COMB_ACTION_INSERT),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_QRY_CONTRACT_BANK', TD_RSP_QRY_CONTRACT_BANK),
 *         ('TD_RSP_QRY_PACK_ORDER', TD_RSP_QRY_PACK_ORDER),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_ERR_RTN_COMB_ACTION_INSERT); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 136, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_87 = PyTuple_New(2); if (unlikely(!__pyx_t_87)) __PYX_ERR(1, 136, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_87);
    __Pyx_INCREF(__pyx_n_s_TD_ERR_RTN_COMB_ACTION_INSERT);
    __Pyx_GIVEREF(__pyx_n_s_TD_ERR_RTN_COMB_ACTION_INSERT);
    PyTuple_SET_ITEM(__pyx_t_87, 0, __pyx_n_s_TD_ERR_RTN_COMB_ACTION_INSERT);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_87, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":137
 *         ('TD_RTN_COMB_ACTION', TD_RTN_COMB_ACTION),
 *         ('TD_ERR_RTN_COMB_ACTION_INSERT', TD_ERR_RTN_COMB_ACTION_INSERT),
 *         ('TD_RSP_QRY_CONTRACT_BANK', TD_RSP_QRY_CONTRACT_BANK),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_QRY_PACK_ORDER', TD_RSP_QRY_PACK_ORDER),
 *         ('TD_RSP_QRY_PACK_ORDER_ACTION', TD_RSP_QRY_PACK_ORDER_ACTION),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_CONTRACT_BANK); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_88 = PyTuple_New(2); if (unlikely(!__pyx_t_88)) __PYX_ERR(1, 137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_88);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_CONTRACT_BANK);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_CONTRACT_BANK);
    PyTuple_SET_ITEM(__pyx_t_88, 0, __pyx_n_s_TD_RSP_QRY_CONTRACT_BANK);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_88, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":138
 *         ('TD_ERR_RTN_COMB_ACTION_INSERT', TD_ERR_RTN_COMB_ACTION_INSERT),
 *         ('TD_RSP_QRY_CONTRACT_BANK', TD_RSP_QRY_CONTRACT_BANK),
 *         ('TD_RSP_QRY_PACK_ORDER', TD_RSP_QRY_PACK_ORDER),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_QRY_PACK_ORDER_ACTION', TD_RSP_QRY_PACK_ORDER_ACTION),
 *         ('TD_RSP_QRY_TRADING_NOTICE', TD_RSP_QRY_TRADING_NOTICE),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_PACK_ORDER); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 138, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_89 = PyTuple_New(2); if (unlikely(!__pyx_t_89)) __PYX_ERR(1, 138, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_89);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_PACK_ORDER);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_PACK_ORDER);
    PyTuple_SET_ITEM(__pyx_t_89, 0, __pyx_n_s_TD_RSP_QRY_PACK_ORDER);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_89, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":139
 *         ('TD_RSP_QRY_CONTRACT_BANK', TD_RSP_QRY_CONTRACT_BANK),
 *         ('TD_RSP_QRY_PACK_ORDER', TD_RSP_QRY_PACK_ORDER),
 *         ('TD_RSP_QRY_PACK_ORDER_ACTION', TD_RSP_QRY_PACK_ORDER_ACTION),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_QRY_TRADING_NOTICE', TD_RSP_QRY_TRADING_NOTICE),
 *         ('TD_RSP_QRY_BROKER_TRADING_PARAMS', TD_RSP_QRY_BROKER_TRADING_PARAMS),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_PACK_ORDER_ACTION); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_90 = PyTuple_New(2); if (unlikely(!__pyx_t_90)) __PYX_ERR(1, 139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_90);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_PACK_ORDER_ACTION);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_PACK_ORDER_ACTION);
    PyTuple_SET_ITEM(__pyx_t_90, 0, __pyx_n_s_TD_RSP_QRY_PACK_ORDER_ACTION);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_90, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":140
 *         ('TD_RSP_QRY_PACK_ORDER', TD_RSP_QRY_PACK_ORDER),
 *         ('TD_RSP_QRY_PACK_ORDER_ACTION', TD_RSP_QRY_PACK_ORDER_ACTION),
 *         ('TD_RSP_QRY_TRADING_NOTICE', TD_RSP_QRY_TRADING_NOTICE),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_QRY_BROKER_TRADING_PARAMS', TD_RSP_QRY_BROKER_TRADING_PARAMS),
 *         ('TD_RSP_QRY_BROKER_TRADING_ALGOS', TD_RSP_QRY_BROKER_TRADING_ALGOS),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_TRADING_NOTICE); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_91 = PyTuple_New(2); if (unlikely(!__pyx_t_91)) __PYX_ERR(1, 140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_91);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_TRADING_NOTICE);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_TRADING_NOTICE);
    PyTuple_SET_ITEM(__pyx_t_91, 0, __pyx_n_s_TD_RSP_QRY_TRADING_NOTICE);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_91, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":141
 *         ('TD_RSP_QRY_PACK_ORDER_ACTION', TD_RSP_QRY_PACK_ORDER_ACTION),
 *         ('TD_RSP_QRY_TRADING_NOTICE', TD_RSP_QRY_TRADING_NOTICE),
 *         ('TD_RSP_QRY_BROKER_TRADING_PARAMS', TD_RSP_QRY_BROKER_TRADING_PARAMS),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_QRY_BROKER_TRADING_ALGOS', TD_RSP_QRY_BROKER_TRADING_ALGOS),
 *         ('TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_TOKEN', TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_TOKEN),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_BROKER_TRADING_PARAMS); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 141, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_92 = PyTuple_New(2); if (unlikely(!__pyx_t_92)) __PYX_ERR(1, 141, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_92);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_BROKER_TRADING_PARAMS);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_BROKER_TRADING_PARAMS);
    PyTuple_SET_ITEM(__pyx_t_92, 0, __pyx_n_s_TD_RSP_QRY_BROKER_TRADING_PARAMS);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_92, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":142
 *         ('TD_RSP_QRY_TRADING_NOTICE', TD_RSP_QRY_TRADING_NOTICE),
 *         ('TD_RSP_QRY_BROKER_TRADING_PARAMS', TD_RSP_QRY_BROKER_TRADING_PARAMS),
 *         ('TD_RSP_QRY_BROKER_TRADING_ALGOS', TD_RSP_QRY_BROKER_TRADING_ALGOS),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_TOKEN', TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_TOKEN),
 *         ('TD_RTN_FROM_BANK_TO_FUTURE_BY_BANK', TD_RTN_FROM_BANK_TO_FUTURE_BY_BANK),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_BROKER_TRADING_ALGOS); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 142, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_93 = PyTuple_New(2); if (unlikely(!__pyx_t_93)) __PYX_ERR(1, 142, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_93);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_BROKER_TRADING_ALGOS);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_BROKER_TRADING_ALGOS);
    PyTuple_SET_ITEM(__pyx_t_93, 0, __pyx_n_s_TD_RSP_QRY_BROKER_TRADING_ALGOS);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_93, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":143
 *         ('TD_RSP_QRY_BROKER_TRADING_PARAMS', TD_RSP_QRY_BROKER_TRADING_PARAMS),
 *         ('TD_RSP_QRY_BROKER_TRADING_ALGOS', TD_RSP_QRY_BROKER_TRADING_ALGOS),
 *         ('TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_TOKEN', TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_TOKEN),             # <<<<<<<<<<<<<<
 *         ('TD_RTN_FROM_BANK_TO_FUTURE_BY_BANK', TD_RTN_FROM_BANK_TO_FUTURE_BY_BANK),
 *         ('TD_RTN_FROM_FUTURE_TO_BANK_BY_BANK', TD_RTN_FROM_FUTURE_TO_BANK_BY_BANK),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_TOKEN); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 143, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_94 = PyTuple_New(2); if (unlikely(!__pyx_t_94)) __PYX_ERR(1, 143, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_94);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_2);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_2);
    PyTuple_SET_ITEM(__pyx_t_94, 0, __pyx_n_s_TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_2);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_94, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":144
 *         ('TD_RSP_QRY_BROKER_TRADING_ALGOS', TD_RSP_QRY_BROKER_TRADING_ALGOS),
 *         ('TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_TOKEN', TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_TOKEN),
 *         ('TD_RTN_FROM_BANK_TO_FUTURE_BY_BANK', TD_RTN_FROM_BANK_TO_FUTURE_BY_BANK),             # <<<<<<<<<<<<<<
 *         ('TD_RTN_FROM_FUTURE_TO_BANK_BY_BANK', TD_RTN_FROM_FUTURE_TO_BANK_BY_BANK),
 *         ('TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_BANK', TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_BANK),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RTN_FROM_BANK_TO_FUTURE_BY_BANK); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 144, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_95 = PyTuple_New(2); if (unlikely(!__pyx_t_95)) __PYX_ERR(1, 144, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_95);
    __Pyx_INCREF(__pyx_n_s_TD_RTN_FROM_BANK_TO_FUTURE_BY_BA);
    __Pyx_GIVEREF(__pyx_n_s_TD_RTN_FROM_BANK_TO_FUTURE_BY_BA);
    PyTuple_SET_ITEM(__pyx_t_95, 0, __pyx_n_s_TD_RTN_FROM_BANK_TO_FUTURE_BY_BA);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_95, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":145
 *         ('TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_TOKEN', TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_TOKEN),
 *         ('TD_RTN_FROM_BANK_TO_FUTURE_BY_BANK', TD_RTN_FROM_BANK_TO_FUTURE_BY_BANK),
 *         ('TD_RTN_FROM_FUTURE_TO_BANK_BY_BANK', TD_RTN_FROM_FUTURE_TO_BANK_BY_BANK),             # <<<<<<<<<<<<<<
 *         ('TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_BANK', TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_BANK),
 *         ('TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_BANK', TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_BANK),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RTN_FROM_FUTURE_TO_BANK_BY_BANK); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 145, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_96 = PyTuple_New(2); if (unlikely(!__pyx_t_96)) __PYX_ERR(1, 145, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_96);
    __Pyx_INCREF(__pyx_n_s_TD_RTN_FROM_FUTURE_TO_BANK_BY_BA);
    __Pyx_GIVEREF(__pyx_n_s_TD_RTN_FROM_FUTURE_TO_BANK_BY_BA);
    PyTuple_SET_ITEM(__pyx_t_96, 0, __pyx_n_s_TD_RTN_FROM_FUTURE_TO_BANK_BY_BA);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_96, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":146
 *         ('TD_RTN_FROM_BANK_TO_FUTURE_BY_BANK', TD_RTN_FROM_BANK_TO_FUTURE_BY_BANK),
 *         ('TD_RTN_FROM_FUTURE_TO_BANK_BY_BANK', TD_RTN_FROM_FUTURE_TO_BANK_BY_BANK),
 *         ('TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_BANK', TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_BANK),             # <<<<<<<<<<<<<<
 *         ('TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_BANK', TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_BANK),
 *         ('TD_RTN_FROM_BANK_TO_FUTURE_BY_FUTURE', TD_RTN_FROM_BANK_TO_FUTURE_BY_FUTURE),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_BANK); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_97 = PyTuple_New(2); if (unlikely(!__pyx_t_97)) __PYX_ERR(1, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_97);
    __Pyx_INCREF(__pyx_n_s_TD_RTN_REPEAL_FROM_BANK_TO_FUTUR);
    __Pyx_GIVEREF(__pyx_n_s_TD_RTN_REPEAL_FROM_BANK_TO_FUTUR);
    PyTuple_SET_ITEM(__pyx_t_97, 0, __pyx_n_s_TD_RTN_REPEAL_FROM_BANK_TO_FUTUR);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_97, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":147
 *         ('TD_RTN_FROM_FUTURE_TO_BANK_BY_BANK', TD_RTN_FROM_FUTURE_TO_BANK_BY_BANK),
 *         ('TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_BANK', TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_BANK),
 *         ('TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_BANK', TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_BANK),             # <<<<<<<<<<<<<<
 *         ('TD_RTN_FROM_BANK_TO_FUTURE_BY_FUTURE', TD_RTN_FROM_BANK_TO_FUTURE_BY_FUTURE),
 *         ('TD_RTN_FROM_FUTURE_TO_BANK_BY_FUTURE', TD_RTN_FROM_FUTURE_TO_BANK_BY_FUTURE),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_BANK); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_98 = PyTuple_New(2); if (unlikely(!__pyx_t_98)) __PYX_ERR(1, 147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_98);
    __Pyx_INCREF(__pyx_n_s_TD_RTN_REPEAL_FROM_FUTURE_TO_BAN);
    __Pyx_GIVEREF(__pyx_n_s_TD_RTN_REPEAL_FROM_FUTURE_TO_BAN);
    PyTuple_SET_ITEM(__pyx_t_98, 0, __pyx_n_s_TD_RTN_REPEAL_FROM_FUTURE_TO_BAN);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_98, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":148
 *         ('TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_BANK', TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_BANK),
 *         ('TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_BANK', TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_BANK),
 *         ('TD_RTN_FROM_BANK_TO_FUTURE_BY_FUTURE', TD_RTN_FROM_BANK_TO_FUTURE_BY_FUTURE),             # <<<<<<<<<<<<<<
 *         ('TD_RTN_FROM_FUTURE_TO_BANK_BY_FUTURE', TD_RTN_FROM_FUTURE_TO_BANK_BY_FUTURE),
 *         ('TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE_MANUAL', TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE_MANUAL),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RTN_FROM_BANK_TO_FUTURE_BY_FUTURE); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_99 = PyTuple_New(2); if (unlikely(!__pyx_t_99)) __PYX_ERR(1, 148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_99);
    __Pyx_INCREF(__pyx_n_s_TD_RTN_FROM_BANK_TO_FUTURE_BY_FU);
    __Pyx_GIVEREF(__pyx_n_s_TD_RTN_FROM_BANK_TO_FUTURE_BY_FU);
    PyTuple_SET_ITEM(__pyx_t_99, 0, __pyx_n_s_TD_RTN_FROM_BANK_TO_FUTURE_BY_FU);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_99, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":149
 *         ('TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_BANK', TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_BANK),
 *         ('TD_RTN_FROM_BANK_TO_FUTURE_BY_FUTURE', TD_RTN_FROM_BANK_TO_FUTURE_BY_FUTURE),
 *         ('TD_RTN_FROM_FUTURE_TO_BANK_BY_FUTURE', TD_RTN_FROM_FUTURE_TO_BANK_BY_FUTURE),             # <<<<<<<<<<<<<<
 *         ('TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE_MANUAL', TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE_MANUAL),
 *         ('TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE_MANUAL', TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE_MANUAL),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RTN_FROM_FUTURE_TO_BANK_BY_FUTURE); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_100 = PyTuple_New(2); if (unlikely(!__pyx_t_100)) __PYX_ERR(1, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_100);
    __Pyx_INCREF(__pyx_n_s_TD_RTN_FROM_FUTURE_TO_BANK_BY_FU);
    __Pyx_GIVEREF(__pyx_n_s_TD_RTN_FROM_FUTURE_TO_BANK_BY_FU);
    PyTuple_SET_ITEM(__pyx_t_100, 0, __pyx_n_s_TD_RTN_FROM_FUTURE_TO_BANK_BY_FU);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_100, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":150
 *         ('TD_RTN_FROM_BANK_TO_FUTURE_BY_FUTURE', TD_RTN_FROM_BANK_TO_FUTURE_BY_FUTURE),
 *         ('TD_RTN_FROM_FUTURE_TO_BANK_BY_FUTURE', TD_RTN_FROM_FUTURE_TO_BANK_BY_FUTURE),
 *         ('TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE_MANUAL', TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE_MANUAL),             # <<<<<<<<<<<<<<
 *         ('TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE_MANUAL', TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE_MANUAL),
 *         ('TD_RTN_QUERY_BANK_BALANCE_BY_FUTURE', TD_RTN_QUERY_BANK_BALANCE_BY_FUTURE),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE_MANUAL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 150, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_101 = PyTuple_New(2); if (unlikely(!__pyx_t_101)) __PYX_ERR(1, 150, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_101);
    __Pyx_INCREF(__pyx_n_s_TD_RTN_REPEAL_FROM_BANK_TO_FUTUR_2);
    __Pyx_GIVEREF(__pyx_n_s_TD_RTN_REPEAL_FROM_BANK_TO_FUTUR_2);
    PyTuple_SET_ITEM(__pyx_t_101, 0, __pyx_n_s_TD_RTN_REPEAL_FROM_BANK_TO_FUTUR_2);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_101, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":151
 *         ('TD_RTN_FROM_FUTURE_TO_BANK_BY_FUTURE', TD_RTN_FROM_FUTURE_TO_BANK_BY_FUTURE),
 *         ('TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE_MANUAL', TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE_MANUAL),
 *         ('TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE_MANUAL', TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE_MANUAL),             # <<<<<<<<<<<<<<
 *         ('TD_RTN_QUERY_BANK_BALANCE_BY_FUTURE', TD_RTN_QUERY_BANK_BALANCE_BY_FUTURE),
 *         ('TD_ERR_RTN_BANK_TO_FUTURE_BY_FUTURE', TD_ERR_RTN_BANK_TO_FUTURE_BY_FUTURE),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE_MANUAL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 151, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_102 = PyTuple_New(2); if (unlikely(!__pyx_t_102)) __PYX_ERR(1, 151, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_102);
    __Pyx_INCREF(__pyx_n_s_TD_RTN_REPEAL_FROM_FUTURE_TO_BAN_2);
    __Pyx_GIVEREF(__pyx_n_s_TD_RTN_REPEAL_FROM_FUTURE_TO_BAN_2);
    PyTuple_SET_ITEM(__pyx_t_102, 0, __pyx_n_s_TD_RTN_REPEAL_FROM_FUTURE_TO_BAN_2);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_102, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":152
 *         ('TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE_MANUAL', TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE_MANUAL),
 *         ('TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE_MANUAL', TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE_MANUAL),
 *         ('TD_RTN_QUERY_BANK_BALANCE_BY_FUTURE', TD_RTN_QUERY_BANK_BALANCE_BY_FUTURE),             # <<<<<<<<<<<<<<
 *         ('TD_ERR_RTN_BANK_TO_FUTURE_BY_FUTURE', TD_ERR_RTN_BANK_TO_FUTURE_BY_FUTURE),
 *         ('TD_ERR_RTN_FUTURE_TO_BANK_BY_FUTURE', TD_ERR_RTN_FUTURE_TO_BANK_BY_FUTURE),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RTN_QUERY_BANK_BALANCE_BY_FUTURE); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 152, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_103 = PyTuple_New(2); if (unlikely(!__pyx_t_103)) __PYX_ERR(1, 152, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_103);
    __Pyx_INCREF(__pyx_n_s_TD_RTN_QUERY_BANK_BALANCE_BY_FUT);
    __Pyx_GIVEREF(__pyx_n_s_TD_RTN_QUERY_BANK_BALANCE_BY_FUT);
    PyTuple_SET_ITEM(__pyx_t_103, 0, __pyx_n_s_TD_RTN_QUERY_BANK_BALANCE_BY_FUT);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_103, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":153
 *         ('TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE_MANUAL', TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE_MANUAL),
 *         ('TD_RTN_QUERY_BANK_BALANCE_BY_FUTURE', TD_RTN_QUERY_BANK_BALANCE_BY_FUTURE),
 *         ('TD_ERR_RTN_BANK_TO_FUTURE_BY_FUTURE', TD_ERR_RTN_BANK_TO_FUTURE_BY_FUTURE),             # <<<<<<<<<<<<<<
 *         ('TD_ERR_RTN_FUTURE_TO_BANK_BY_FUTURE', TD_ERR_RTN_FUTURE_TO_BANK_BY_FUTURE),
 *         ('TD_ERR_RTN_REPEAL_BANK_TO_FUTURE_BY_FUTURE_MANUAL', TD_ERR_RTN_REPEAL_BANK_TO_FUTURE_BY_FUTURE_MANUAL),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_ERR_RTN_BANK_TO_FUTURE_BY_FUTURE); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 153, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_104 = PyTuple_New(2); if (unlikely(!__pyx_t_104)) __PYX_ERR(1, 153, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_104);
    __Pyx_INCREF(__pyx_n_s_TD_ERR_RTN_BANK_TO_FUTURE_BY_FUT);
    __Pyx_GIVEREF(__pyx_n_s_TD_ERR_RTN_BANK_TO_FUTURE_BY_FUT);
    PyTuple_SET_ITEM(__pyx_t_104, 0, __pyx_n_s_TD_ERR_RTN_BANK_TO_FUTURE_BY_FUT);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_104, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":154
 *         ('TD_RTN_QUERY_BANK_BALANCE_BY_FUTURE', TD_RTN_QUERY_BANK_BALANCE_BY_FUTURE),
 *         ('TD_ERR_RTN_BANK_TO_FUTURE_BY_FUTURE', TD_ERR_RTN_BANK_TO_FUTURE_BY_FUTURE),
 *         ('TD_ERR_RTN_FUTURE_TO_BANK_BY_FUTURE', TD_ERR_RTN_FUTURE_TO_BANK_BY_FUTURE),             # <<<<<<<<<<<<<<
 *         ('TD_ERR_RTN_REPEAL_BANK_TO_FUTURE_BY_FUTURE_MANUAL', TD_ERR_RTN_REPEAL_BANK_TO_FUTURE_BY_FUTURE_MANUAL),
 *         ('TD_ERR_RTN_REPEAL_FUTURE_TO_BANK_BY_FUTURE_MANUAL', TD_ERR_RTN_REPEAL_FUTURE_TO_BANK_BY_FUTURE_MANUAL),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_ERR_RTN_FUTURE_TO_BANK_BY_FUTURE); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 154, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_105 = PyTuple_New(2); if (unlikely(!__pyx_t_105)) __PYX_ERR(1, 154, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_105);
    __Pyx_INCREF(__pyx_n_s_TD_ERR_RTN_FUTURE_TO_BANK_BY_FUT);
    __Pyx_GIVEREF(__pyx_n_s_TD_ERR_RTN_FUTURE_TO_BANK_BY_FUT);
    PyTuple_SET_ITEM(__pyx_t_105, 0, __pyx_n_s_TD_ERR_RTN_FUTURE_TO_BANK_BY_FUT);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_105, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":155
 *         ('TD_ERR_RTN_BANK_TO_FUTURE_BY_FUTURE', TD_ERR_RTN_BANK_TO_FUTURE_BY_FUTURE),
 *         ('TD_ERR_RTN_FUTURE_TO_BANK_BY_FUTURE', TD_ERR_RTN_FUTURE_TO_BANK_BY_FUTURE),
 *         ('TD_ERR_RTN_REPEAL_BANK_TO_FUTURE_BY_FUTURE_MANUAL', TD_ERR_RTN_REPEAL_BANK_TO_FUTURE_BY_FUTURE_MANUAL),             # <<<<<<<<<<<<<<
 *         ('TD_ERR_RTN_REPEAL_FUTURE_TO_BANK_BY_FUTURE_MANUAL', TD_ERR_RTN_REPEAL_FUTURE_TO_BANK_BY_FUTURE_MANUAL),
 *         ('TD_ERR_RTN_QRY_BANK_BALANCE_BY_FUTURE', TD_ERR_RTN_QRY_BANK_BALANCE_BY_FUTURE),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_ERR_RTN_REPEAL_BANK_TO_FUTURE_BY_FUTURE_MANUAL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 155, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_106 = PyTuple_New(2); if (unlikely(!__pyx_t_106)) __PYX_ERR(1, 155, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_106);
    __Pyx_INCREF(__pyx_n_s_TD_ERR_RTN_REPEAL_BANK_TO_FUTURE);
    __Pyx_GIVEREF(__pyx_n_s_TD_ERR_RTN_REPEAL_BANK_TO_FUTURE);
    PyTuple_SET_ITEM(__pyx_t_106, 0, __pyx_n_s_TD_ERR_RTN_REPEAL_BANK_TO_FUTURE);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_106, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":156
 *         ('TD_ERR_RTN_FUTURE_TO_BANK_BY_FUTURE', TD_ERR_RTN_FUTURE_TO_BANK_BY_FUTURE),
 *         ('TD_ERR_RTN_REPEAL_BANK_TO_FUTURE_BY_FUTURE_MANUAL', TD_ERR_RTN_REPEAL_BANK_TO_FUTURE_BY_FUTURE_MANUAL),
 *         ('TD_ERR_RTN_REPEAL_FUTURE_TO_BANK_BY_FUTURE_MANUAL', TD_ERR_RTN_REPEAL_FUTURE_TO_BANK_BY_FUTURE_MANUAL),             # <<<<<<<<<<<<<<
 *         ('TD_ERR_RTN_QRY_BANK_BALANCE_BY_FUTURE', TD_ERR_RTN_QRY_BANK_BALANCE_BY_FUTURE),
 *         ('TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE', TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_ERR_RTN_REPEAL_FUTURE_TO_BANK_BY_FUTURE_MANUAL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 156, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_107 = PyTuple_New(2); if (unlikely(!__pyx_t_107)) __PYX_ERR(1, 156, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_107);
    __Pyx_INCREF(__pyx_n_s_TD_ERR_RTN_REPEAL_FUTURE_TO_BANK);
    __Pyx_GIVEREF(__pyx_n_s_TD_ERR_RTN_REPEAL_FUTURE_TO_BANK);
    PyTuple_SET_ITEM(__pyx_t_107, 0, __pyx_n_s_TD_ERR_RTN_REPEAL_FUTURE_TO_BANK);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_107, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":157
 *         ('TD_ERR_RTN_REPEAL_BANK_TO_FUTURE_BY_FUTURE_MANUAL', TD_ERR_RTN_REPEAL_BANK_TO_FUTURE_BY_FUTURE_MANUAL),
 *         ('TD_ERR_RTN_REPEAL_FUTURE_TO_BANK_BY_FUTURE_MANUAL', TD_ERR_RTN_REPEAL_FUTURE_TO_BANK_BY_FUTURE_MANUAL),
 *         ('TD_ERR_RTN_QRY_BANK_BALANCE_BY_FUTURE', TD_ERR_RTN_QRY_BANK_BALANCE_BY_FUTURE),             # <<<<<<<<<<<<<<
 *         ('TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE', TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE),
 *         ('TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE', TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_ERR_RTN_QRY_BANK_BALANCE_BY_FUTURE); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_108 = PyTuple_New(2); if (unlikely(!__pyx_t_108)) __PYX_ERR(1, 157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_108);
    __Pyx_INCREF(__pyx_n_s_TD_ERR_RTN_QRY_BANK_BALANCE_BY_F);
    __Pyx_GIVEREF(__pyx_n_s_TD_ERR_RTN_QRY_BANK_BALANCE_BY_F);
    PyTuple_SET_ITEM(__pyx_t_108, 0, __pyx_n_s_TD_ERR_RTN_QRY_BANK_BALANCE_BY_F);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_108, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":158
 *         ('TD_ERR_RTN_REPEAL_FUTURE_TO_BANK_BY_FUTURE_MANUAL', TD_ERR_RTN_REPEAL_FUTURE_TO_BANK_BY_FUTURE_MANUAL),
 *         ('TD_ERR_RTN_QRY_BANK_BALANCE_BY_FUTURE', TD_ERR_RTN_QRY_BANK_BALANCE_BY_FUTURE),
 *         ('TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE', TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE),             # <<<<<<<<<<<<<<
 *         ('TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE', TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE),
 *         ('TD_RSP_FROM_BANK_TO_FUTURE_BY_FUTURE', TD_RSP_FROM_BANK_TO_FUTURE_BY_FUTURE),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 158, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_109 = PyTuple_New(2); if (unlikely(!__pyx_t_109)) __PYX_ERR(1, 158, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_109);
    __Pyx_INCREF(__pyx_n_s_TD_RTN_REPEAL_FROM_BANK_TO_FUTUR_3);
    __Pyx_GIVEREF(__pyx_n_s_TD_RTN_REPEAL_FROM_BANK_TO_FUTUR_3);
    PyTuple_SET_ITEM(__pyx_t_109, 0, __pyx_n_s_TD_RTN_REPEAL_FROM_BANK_TO_FUTUR_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_109, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":159
 *         ('TD_ERR_RTN_QRY_BANK_BALANCE_BY_FUTURE', TD_ERR_RTN_QRY_BANK_BALANCE_BY_FUTURE),
 *         ('TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE', TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE),
 *         ('TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE', TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_FROM_BANK_TO_FUTURE_BY_FUTURE', TD_RSP_FROM_BANK_TO_FUTURE_BY_FUTURE),
 *         ('TD_RSP_FROM_FUTURE_TO_BANK_BY_FUTURE', TD_RSP_FROM_FUTURE_TO_BANK_BY_FUTURE),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 159, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_110 = PyTuple_New(2); if (unlikely(!__pyx_t_110)) __PYX_ERR(1, 159, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_110);
    __Pyx_INCREF(__pyx_n_s_TD_RTN_REPEAL_FROM_FUTURE_TO_BAN_3);
    __Pyx_GIVEREF(__pyx_n_s_TD_RTN_REPEAL_FROM_FUTURE_TO_BAN_3);
    PyTuple_SET_ITEM(__pyx_t_110, 0, __pyx_n_s_TD_RTN_REPEAL_FROM_FUTURE_TO_BAN_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_110, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":160
 *         ('TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE', TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE),
 *         ('TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE', TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE),
 *         ('TD_RSP_FROM_BANK_TO_FUTURE_BY_FUTURE', TD_RSP_FROM_BANK_TO_FUTURE_BY_FUTURE),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_FROM_FUTURE_TO_BANK_BY_FUTURE', TD_RSP_FROM_FUTURE_TO_BANK_BY_FUTURE),
 *         ('TD_RSP_QRY_BANK_ACCOUNT_MONEY_BY_FUTURE', TD_RSP_QRY_BANK_ACCOUNT_MONEY_BY_FUTURE),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_FROM_BANK_TO_FUTURE_BY_FUTURE); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 160, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_111 = PyTuple_New(2); if (unlikely(!__pyx_t_111)) __PYX_ERR(1, 160, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_111);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_FROM_BANK_TO_FUTURE_BY_FU);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_FROM_BANK_TO_FUTURE_BY_FU);
    PyTuple_SET_ITEM(__pyx_t_111, 0, __pyx_n_s_TD_RSP_FROM_BANK_TO_FUTURE_BY_FU);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_111, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":161
 *         ('TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE', TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE),
 *         ('TD_RSP_FROM_BANK_TO_FUTURE_BY_FUTURE', TD_RSP_FROM_BANK_TO_FUTURE_BY_FUTURE),
 *         ('TD_RSP_FROM_FUTURE_TO_BANK_BY_FUTURE', TD_RSP_FROM_FUTURE_TO_BANK_BY_FUTURE),             # <<<<<<<<<<<<<<
 *         ('TD_RSP_QRY_BANK_ACCOUNT_MONEY_BY_FUTURE', TD_RSP_QRY_BANK_ACCOUNT_MONEY_BY_FUTURE),
 *         ('TD_RTN_OPEN_ACCOUNT_BY_BANK', TD_RTN_OPEN_ACCOUNT_BY_BANK),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_FROM_FUTURE_TO_BANK_BY_FUTURE); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 161, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_112 = PyTuple_New(2); if (unlikely(!__pyx_t_112)) __PYX_ERR(1, 161, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_112);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_FROM_FUTURE_TO_BANK_BY_FU);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_FROM_FUTURE_TO_BANK_BY_FU);
    PyTuple_SET_ITEM(__pyx_t_112, 0, __pyx_n_s_TD_RSP_FROM_FUTURE_TO_BANK_BY_FU);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_112, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":162
 *         ('TD_RSP_FROM_BANK_TO_FUTURE_BY_FUTURE', TD_RSP_FROM_BANK_TO_FUTURE_BY_FUTURE),
 *         ('TD_RSP_FROM_FUTURE_TO_BANK_BY_FUTURE', TD_RSP_FROM_FUTURE_TO_BANK_BY_FUTURE),
 *         ('TD_RSP_QRY_BANK_ACCOUNT_MONEY_BY_FUTURE', TD_RSP_QRY_BANK_ACCOUNT_MONEY_BY_FUTURE),             # <<<<<<<<<<<<<<
 *         ('TD_RTN_OPEN_ACCOUNT_BY_BANK', TD_RTN_OPEN_ACCOUNT_BY_BANK),
 *         ('TD_RTN_CANCEL_ACCOUNT_BY_BANK', TD_RTN_CANCEL_ACCOUNT_BY_BANK),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_BANK_ACCOUNT_MONEY_BY_FUTURE); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_113 = PyTuple_New(2); if (unlikely(!__pyx_t_113)) __PYX_ERR(1, 162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_113);
    __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_BANK_ACCOUNT_MONEY_BY);
    __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_BANK_ACCOUNT_MONEY_BY);
    PyTuple_SET_ITEM(__pyx_t_113, 0, __pyx_n_s_TD_RSP_QRY_BANK_ACCOUNT_MONEY_BY);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_113, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":163
 *         ('TD_RSP_FROM_FUTURE_TO_BANK_BY_FUTURE', TD_RSP_FROM_FUTURE_TO_BANK_BY_FUTURE),
 *         ('TD_RSP_QRY_BANK_ACCOUNT_MONEY_BY_FUTURE', TD_RSP_QRY_BANK_ACCOUNT_MONEY_BY_FUTURE),
 *         ('TD_RTN_OPEN_ACCOUNT_BY_BANK', TD_RTN_OPEN_ACCOUNT_BY_BANK),             # <<<<<<<<<<<<<<
 *         ('TD_RTN_CANCEL_ACCOUNT_BY_BANK', TD_RTN_CANCEL_ACCOUNT_BY_BANK),
 *         ('TD_RTN_CHANGE_ACCOUNT_BY_BANK', TD_RTN_CHANGE_ACCOUNT_BY_BANK),
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RTN_OPEN_ACCOUNT_BY_BANK); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 163, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_114 = PyTuple_New(2); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 163, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_114);
    __Pyx_INCREF(__pyx_n_s_TD_RTN_OPEN_ACCOUNT_BY_BANK);
    __Pyx_GIVEREF(__pyx_n_s_TD_RTN_OPEN_ACCOUNT_BY_BANK);
    PyTuple_SET_ITEM(__pyx_t_114, 0, __pyx_n_s_TD_RTN_OPEN_ACCOUNT_BY_BANK);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_114, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":164
 *         ('TD_RSP_QRY_BANK_ACCOUNT_MONEY_BY_FUTURE', TD_RSP_QRY_BANK_ACCOUNT_MONEY_BY_FUTURE),
 *         ('TD_RTN_OPEN_ACCOUNT_BY_BANK', TD_RTN_OPEN_ACCOUNT_BY_BANK),
 *         ('TD_RTN_CANCEL_ACCOUNT_BY_BANK', TD_RTN_CANCEL_ACCOUNT_BY_BANK),             # <<<<<<<<<<<<<<
 *         ('TD_RTN_CHANGE_ACCOUNT_BY_BANK', TD_RTN_CHANGE_ACCOUNT_BY_BANK),
 *     ]))
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RTN_CANCEL_ACCOUNT_BY_BANK); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 164, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_115 = PyTuple_New(2); if (unlikely(!__pyx_t_115)) __PYX_ERR(1, 164, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_115);
    __Pyx_INCREF(__pyx_n_s_TD_RTN_CANCEL_ACCOUNT_BY_BANK);
    __Pyx_GIVEREF(__pyx_n_s_TD_RTN_CANCEL_ACCOUNT_BY_BANK);
    PyTuple_SET_ITEM(__pyx_t_115, 0, __pyx_n_s_TD_RTN_CANCEL_ACCOUNT_BY_BANK);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_115, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":165
 *         ('TD_RTN_OPEN_ACCOUNT_BY_BANK', TD_RTN_OPEN_ACCOUNT_BY_BANK),
 *         ('TD_RTN_CANCEL_ACCOUNT_BY_BANK', TD_RTN_CANCEL_ACCOUNT_BY_BANK),
 *         ('TD_RTN_CHANGE_ACCOUNT_BY_BANK', TD_RTN_CHANGE_ACCOUNT_BY_BANK),             # <<<<<<<<<<<<<<
 *     ]))
 *     __Pyx_globals['TD_FRONT_CONNECTED'] = TD_CALLBACK_TYPE.TD_FRONT_CONNECTED
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RTN_CHANGE_ACCOUNT_BY_BANK); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 165, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_116 = PyTuple_New(2); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 165, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __Pyx_INCREF(__pyx_n_s_TD_RTN_CHANGE_ACCOUNT_BY_BANK);
    __Pyx_GIVEREF(__pyx_n_s_TD_RTN_CHANGE_ACCOUNT_BY_BANK);
    PyTuple_SET_ITEM(__pyx_t_116, 0, __pyx_n_s_TD_RTN_CHANGE_ACCOUNT_BY_BANK);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_116, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "EnumType":53
 * if PY_VERSION_HEX >= 0x03040000:
 * 
 *     TD_CALLBACK_TYPE = __Pyx_EnumBase('TD_CALLBACK_TYPE', __Pyx_OrderedDict([             # <<<<<<<<<<<<<<
 *         ('TD_FRONT_CONNECTED', TD_FRONT_CONNECTED),
 *         ('TD_FRONT_DISCONNECTED', TD_FRONT_DISCONNECTED),
 */
    __pyx_t_2 = PyList_New(112); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 53, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_5);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyList_SET_ITEM(__pyx_t_2, 1, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_7);
    PyList_SET_ITEM(__pyx_t_2, 2, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_8);
    PyList_SET_ITEM(__pyx_t_2, 3, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_9);
    PyList_SET_ITEM(__pyx_t_2, 4, __pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_10);
    PyList_SET_ITEM(__pyx_t_2, 5, __pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_11);
    PyList_SET_ITEM(__pyx_t_2, 6, __pyx_t_11);
    __Pyx_GIVEREF(__pyx_t_12);
    PyList_SET_ITEM(__pyx_t_2, 7, __pyx_t_12);
    __Pyx_GIVEREF(__pyx_t_13);
    PyList_SET_ITEM(__pyx_t_2, 8, __pyx_t_13);
    __Pyx_GIVEREF(__pyx_t_14);
    PyList_SET_ITEM(__pyx_t_2, 9, __pyx_t_14);
    __Pyx_GIVEREF(__pyx_t_15);
    PyList_SET_ITEM(__pyx_t_2, 10, __pyx_t_15);
    __Pyx_GIVEREF(__pyx_t_16);
    PyList_SET_ITEM(__pyx_t_2, 11, __pyx_t_16);
    __Pyx_GIVEREF(__pyx_t_17);
    PyList_SET_ITEM(__pyx_t_2, 12, __pyx_t_17);
    __Pyx_GIVEREF(__pyx_t_18);
    PyList_SET_ITEM(__pyx_t_2, 13, __pyx_t_18);
    __Pyx_GIVEREF(__pyx_t_19);
    PyList_SET_ITEM(__pyx_t_2, 14, __pyx_t_19);
    __Pyx_GIVEREF(__pyx_t_20);
    PyList_SET_ITEM(__pyx_t_2, 15, __pyx_t_20);
    __Pyx_GIVEREF(__pyx_t_21);
    PyList_SET_ITEM(__pyx_t_2, 16, __pyx_t_21);
    __Pyx_GIVEREF(__pyx_t_22);
    PyList_SET_ITEM(__pyx_t_2, 17, __pyx_t_22);
    __Pyx_GIVEREF(__pyx_t_23);
    PyList_SET_ITEM(__pyx_t_2, 18, __pyx_t_23);
    __Pyx_GIVEREF(__pyx_t_24);
    PyList_SET_ITEM(__pyx_t_2, 19, __pyx_t_24);
    __Pyx_GIVEREF(__pyx_t_25);
    PyList_SET_ITEM(__pyx_t_2, 20, __pyx_t_25);
    __Pyx_GIVEREF(__pyx_t_26);
    PyList_SET_ITEM(__pyx_t_2, 21, __pyx_t_26);
    __Pyx_GIVEREF(__pyx_t_27);
    PyList_SET_ITEM(__pyx_t_2, 22, __pyx_t_27);
    __Pyx_GIVEREF(__pyx_t_28);
    PyList_SET_ITEM(__pyx_t_2, 23, __pyx_t_28);
    __Pyx_GIVEREF(__pyx_t_29);
    PyList_SET_ITEM(__pyx_t_2, 24, __pyx_t_29);
    __Pyx_GIVEREF(__pyx_t_30);
    PyList_SET_ITEM(__pyx_t_2, 25, __pyx_t_30);
    __Pyx_GIVEREF(__pyx_t_31);
    PyList_SET_ITEM(__pyx_t_2, 26, __pyx_t_31);
    __Pyx_GIVEREF(__pyx_t_32);
    PyList_SET_ITEM(__pyx_t_2, 27, __pyx_t_32);
    __Pyx_GIVEREF(__pyx_t_33);
    PyList_SET_ITEM(__pyx_t_2, 28, __pyx_t_33);
    __Pyx_GIVEREF(__pyx_t_34);
    PyList_SET_ITEM(__pyx_t_2, 29, __pyx_t_34);
    __Pyx_GIVEREF(__pyx_t_35);
    PyList_SET_ITEM(__pyx_t_2, 30, __pyx_t_35);
    __Pyx_GIVEREF(__pyx_t_36);
    PyList_SET_ITEM(__pyx_t_2, 31, __pyx_t_36);
    __Pyx_GIVEREF(__pyx_t_37);
    PyList_SET_ITEM(__pyx_t_2, 32, __pyx_t_37);
    __Pyx_GIVEREF(__pyx_t_38);
    PyList_SET_ITEM(__pyx_t_2, 33, __pyx_t_38);
    __Pyx_GIVEREF(__pyx_t_39);
    PyList_SET_ITEM(__pyx_t_2, 34, __pyx_t_39);
    __Pyx_GIVEREF(__pyx_t_40);
    PyList_SET_ITEM(__pyx_t_2, 35, __pyx_t_40);
    __Pyx_GIVEREF(__pyx_t_41);
    PyList_SET_ITEM(__pyx_t_2, 36, __pyx_t_41);
    __Pyx_GIVEREF(__pyx_t_42);
    PyList_SET_ITEM(__pyx_t_2, 37, __pyx_t_42);
    __Pyx_GIVEREF(__pyx_t_43);
    PyList_SET_ITEM(__pyx_t_2, 38, __pyx_t_43);
    __Pyx_GIVEREF(__pyx_t_44);
    PyList_SET_ITEM(__pyx_t_2, 39, __pyx_t_44);
    __Pyx_GIVEREF(__pyx_t_45);
    PyList_SET_ITEM(__pyx_t_2, 40, __pyx_t_45);
    __Pyx_GIVEREF(__pyx_t_46);
    PyList_SET_ITEM(__pyx_t_2, 41, __pyx_t_46);
    __Pyx_GIVEREF(__pyx_t_47);
    PyList_SET_ITEM(__pyx_t_2, 42, __pyx_t_47);
    __Pyx_GIVEREF(__pyx_t_48);
    PyList_SET_ITEM(__pyx_t_2, 43, __pyx_t_48);
    __Pyx_GIVEREF(__pyx_t_49);
    PyList_SET_ITEM(__pyx_t_2, 44, __pyx_t_49);
    __Pyx_GIVEREF(__pyx_t_50);
    PyList_SET_ITEM(__pyx_t_2, 45, __pyx_t_50);
    __Pyx_GIVEREF(__pyx_t_51);
    PyList_SET_ITEM(__pyx_t_2, 46, __pyx_t_51);
    __Pyx_GIVEREF(__pyx_t_52);
    PyList_SET_ITEM(__pyx_t_2, 47, __pyx_t_52);
    __Pyx_GIVEREF(__pyx_t_53);
    PyList_SET_ITEM(__pyx_t_2, 48, __pyx_t_53);
    __Pyx_GIVEREF(__pyx_t_54);
    PyList_SET_ITEM(__pyx_t_2, 49, __pyx_t_54);
    __Pyx_GIVEREF(__pyx_t_55);
    PyList_SET_ITEM(__pyx_t_2, 50, __pyx_t_55);
    __Pyx_GIVEREF(__pyx_t_56);
    PyList_SET_ITEM(__pyx_t_2, 51, __pyx_t_56);
    __Pyx_GIVEREF(__pyx_t_57);
    PyList_SET_ITEM(__pyx_t_2, 52, __pyx_t_57);
    __Pyx_GIVEREF(__pyx_t_58);
    PyList_SET_ITEM(__pyx_t_2, 53, __pyx_t_58);
    __Pyx_GIVEREF(__pyx_t_59);
    PyList_SET_ITEM(__pyx_t_2, 54, __pyx_t_59);
    __Pyx_GIVEREF(__pyx_t_60);
    PyList_SET_ITEM(__pyx_t_2, 55, __pyx_t_60);
    __Pyx_GIVEREF(__pyx_t_61);
    PyList_SET_ITEM(__pyx_t_2, 56, __pyx_t_61);
    __Pyx_GIVEREF(__pyx_t_62);
    PyList_SET_ITEM(__pyx_t_2, 57, __pyx_t_62);
    __Pyx_GIVEREF(__pyx_t_63);
    PyList_SET_ITEM(__pyx_t_2, 58, __pyx_t_63);
    __Pyx_GIVEREF(__pyx_t_64);
    PyList_SET_ITEM(__pyx_t_2, 59, __pyx_t_64);
    __Pyx_GIVEREF(__pyx_t_65);
    PyList_SET_ITEM(__pyx_t_2, 60, __pyx_t_65);
    __Pyx_GIVEREF(__pyx_t_66);
    PyList_SET_ITEM(__pyx_t_2, 61, __pyx_t_66);
    __Pyx_GIVEREF(__pyx_t_67);
    PyList_SET_ITEM(__pyx_t_2, 62, __pyx_t_67);
    __Pyx_GIVEREF(__pyx_t_68);
    PyList_SET_ITEM(__pyx_t_2, 63, __pyx_t_68);
    __Pyx_GIVEREF(__pyx_t_69);
    PyList_SET_ITEM(__pyx_t_2, 64, __pyx_t_69);
    __Pyx_GIVEREF(__pyx_t_70);
    PyList_SET_ITEM(__pyx_t_2, 65, __pyx_t_70);
    __Pyx_GIVEREF(__pyx_t_71);
    PyList_SET_ITEM(__pyx_t_2, 66, __pyx_t_71);
    __Pyx_GIVEREF(__pyx_t_72);
    PyList_SET_ITEM(__pyx_t_2, 67, __pyx_t_72);
    __Pyx_GIVEREF(__pyx_t_73);
    PyList_SET_ITEM(__pyx_t_2, 68, __pyx_t_73);
    __Pyx_GIVEREF(__pyx_t_74);
    PyList_SET_ITEM(__pyx_t_2, 69, __pyx_t_74);
    __Pyx_GIVEREF(__pyx_t_75);
    PyList_SET_ITEM(__pyx_t_2, 70, __pyx_t_75);
    __Pyx_GIVEREF(__pyx_t_76);
    PyList_SET_ITEM(__pyx_t_2, 71, __pyx_t_76);
    __Pyx_GIVEREF(__pyx_t_77);
    PyList_SET_ITEM(__pyx_t_2, 72, __pyx_t_77);
    __Pyx_GIVEREF(__pyx_t_78);
    PyList_SET_ITEM(__pyx_t_2, 73, __pyx_t_78);
    __Pyx_GIVEREF(__pyx_t_79);
    PyList_SET_ITEM(__pyx_t_2, 74, __pyx_t_79);
    __Pyx_GIVEREF(__pyx_t_80);
    PyList_SET_ITEM(__pyx_t_2, 75, __pyx_t_80);
    __Pyx_GIVEREF(__pyx_t_81);
    PyList_SET_ITEM(__pyx_t_2, 76, __pyx_t_81);
    __Pyx_GIVEREF(__pyx_t_82);
    PyList_SET_ITEM(__pyx_t_2, 77, __pyx_t_82);
    __Pyx_GIVEREF(__pyx_t_83);
    PyList_SET_ITEM(__pyx_t_2, 78, __pyx_t_83);
    __Pyx_GIVEREF(__pyx_t_84);
    PyList_SET_ITEM(__pyx_t_2, 79, __pyx_t_84);
    __Pyx_GIVEREF(__pyx_t_85);
    PyList_SET_ITEM(__pyx_t_2, 80, __pyx_t_85);
    __Pyx_GIVEREF(__pyx_t_86);
    PyList_SET_ITEM(__pyx_t_2, 81, __pyx_t_86);
    __Pyx_GIVEREF(__pyx_t_87);
    PyList_SET_ITEM(__pyx_t_2, 82, __pyx_t_87);
    __Pyx_GIVEREF(__pyx_t_88);
    PyList_SET_ITEM(__pyx_t_2, 83, __pyx_t_88);
    __Pyx_GIVEREF(__pyx_t_89);
    PyList_SET_ITEM(__pyx_t_2, 84, __pyx_t_89);
    __Pyx_GIVEREF(__pyx_t_90);
    PyList_SET_ITEM(__pyx_t_2, 85, __pyx_t_90);
    __Pyx_GIVEREF(__pyx_t_91);
    PyList_SET_ITEM(__pyx_t_2, 86, __pyx_t_91);
    __Pyx_GIVEREF(__pyx_t_92);
    PyList_SET_ITEM(__pyx_t_2, 87, __pyx_t_92);
    __Pyx_GIVEREF(__pyx_t_93);
    PyList_SET_ITEM(__pyx_t_2, 88, __pyx_t_93);
    __Pyx_GIVEREF(__pyx_t_94);
    PyList_SET_ITEM(__pyx_t_2, 89, __pyx_t_94);
    __Pyx_GIVEREF(__pyx_t_95);
    PyList_SET_ITEM(__pyx_t_2, 90, __pyx_t_95);
    __Pyx_GIVEREF(__pyx_t_96);
    PyList_SET_ITEM(__pyx_t_2, 91, __pyx_t_96);
    __Pyx_GIVEREF(__pyx_t_97);
    PyList_SET_ITEM(__pyx_t_2, 92, __pyx_t_97);
    __Pyx_GIVEREF(__pyx_t_98);
    PyList_SET_ITEM(__pyx_t_2, 93, __pyx_t_98);
    __Pyx_GIVEREF(__pyx_t_99);
    PyList_SET_ITEM(__pyx_t_2, 94, __pyx_t_99);
    __Pyx_GIVEREF(__pyx_t_100);
    PyList_SET_ITEM(__pyx_t_2, 95, __pyx_t_100);
    __Pyx_GIVEREF(__pyx_t_101);
    PyList_SET_ITEM(__pyx_t_2, 96, __pyx_t_101);
    __Pyx_GIVEREF(__pyx_t_102);
    PyList_SET_ITEM(__pyx_t_2, 97, __pyx_t_102);
    __Pyx_GIVEREF(__pyx_t_103);
    PyList_SET_ITEM(__pyx_t_2, 98, __pyx_t_103);
    __Pyx_GIVEREF(__pyx_t_104);
    PyList_SET_ITEM(__pyx_t_2, 99, __pyx_t_104);
    __Pyx_GIVEREF(__pyx_t_105);
    PyList_SET_ITEM(__pyx_t_2, 100, __pyx_t_105);
    __Pyx_GIVEREF(__pyx_t_106);
    PyList_SET_ITEM(__pyx_t_2, 101, __pyx_t_106);
    __Pyx_GIVEREF(__pyx_t_107);
    PyList_SET_ITEM(__pyx_t_2, 102, __pyx_t_107);
    __Pyx_GIVEREF(__pyx_t_108);
    PyList_SET_ITEM(__pyx_t_2, 103, __pyx_t_108);
    __Pyx_GIVEREF(__pyx_t_109);
    PyList_SET_ITEM(__pyx_t_2, 104, __pyx_t_109);
    __Pyx_GIVEREF(__pyx_t_110);
    PyList_SET_ITEM(__pyx_t_2, 105, __pyx_t_110);
    __Pyx_GIVEREF(__pyx_t_111);
    PyList_SET_ITEM(__pyx_t_2, 106, __pyx_t_111);
    __Pyx_GIVEREF(__pyx_t_112);
    PyList_SET_ITEM(__pyx_t_2, 107, __pyx_t_112);
    __Pyx_GIVEREF(__pyx_t_113);
    PyList_SET_ITEM(__pyx_t_2, 108, __pyx_t_113);
    __Pyx_GIVEREF(__pyx_t_114);
    PyList_SET_ITEM(__pyx_t_2, 109, __pyx_t_114);
    __Pyx_GIVEREF(__pyx_t_115);
    PyList_SET_ITEM(__pyx_t_2, 110, __pyx_t_115);
    __Pyx_GIVEREF(__pyx_t_116);
    PyList_SET_ITEM(__pyx_t_2, 111, __pyx_t_116);
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    __pyx_t_7 = 0;
    __pyx_t_8 = 0;
    __pyx_t_9 = 0;
    __pyx_t_10 = 0;
    __pyx_t_11 = 0;
    __pyx_t_12 = 0;
    __pyx_t_13 = 0;
    __pyx_t_14 = 0;
    __pyx_t_15 = 0;
    __pyx_t_16 = 0;
    __pyx_t_17 = 0;
    __pyx_t_18 = 0;
    __pyx_t_19 = 0;
    __pyx_t_20 = 0;
    __pyx_t_21 = 0;
    __pyx_t_22 = 0;
    __pyx_t_23 = 0;
    __pyx_t_24 = 0;
    __pyx_t_25 = 0;
    __pyx_t_26 = 0;
    __pyx_t_27 = 0;
    __pyx_t_28 = 0;
    __pyx_t_29 = 0;
    __pyx_t_30 = 0;
    __pyx_t_31 = 0;
    __pyx_t_32 = 0;
    __pyx_t_33 = 0;
    __pyx_t_34 = 0;
    __pyx_t_35 = 0;
    __pyx_t_36 = 0;
    __pyx_t_37 = 0;
    __pyx_t_38 = 0;
    __pyx_t_39 = 0;
    __pyx_t_40 = 0;
    __pyx_t_41 = 0;
    __pyx_t_42 = 0;
    __pyx_t_43 = 0;
    __pyx_t_44 = 0;
    __pyx_t_45 = 0;
    __pyx_t_46 = 0;
    __pyx_t_47 = 0;
    __pyx_t_48 = 0;
    __pyx_t_49 = 0;
    __pyx_t_50 = 0;
    __pyx_t_51 = 0;
    __pyx_t_52 = 0;
    __pyx_t_53 = 0;
    __pyx_t_54 = 0;
    __pyx_t_55 = 0;
    __pyx_t_56 = 0;
    __pyx_t_57 = 0;
    __pyx_t_58 = 0;
    __pyx_t_59 = 0;
    __pyx_t_60 = 0;
    __pyx_t_61 = 0;
    __pyx_t_62 = 0;
    __pyx_t_63 = 0;
    __pyx_t_64 = 0;
    __pyx_t_65 = 0;
    __pyx_t_66 = 0;
    __pyx_t_67 = 0;
    __pyx_t_68 = 0;
    __pyx_t_69 = 0;
    __pyx_t_70 = 0;
    __pyx_t_71 = 0;
    __pyx_t_72 = 0;
    __pyx_t_73 = 0;
    __pyx_t_74 = 0;
    __pyx_t_75 = 0;
    __pyx_t_76 = 0;
    __pyx_t_77 = 0;
    __pyx_t_78 = 0;
    __pyx_t_79 = 0;
    __pyx_t_80 = 0;
    __pyx_t_81 = 0;
    __pyx_t_82 = 0;
    __pyx_t_83 = 0;
    __pyx_t_84 = 0;
    __pyx_t_85 = 0;
    __pyx_t_86 = 0;
    __pyx_t_87 = 0;
    __pyx_t_88 = 0;
    __pyx_t_89 = 0;
    __pyx_t_90 = 0;
    __pyx_t_91 = 0;
    __pyx_t_92 = 0;
    __pyx_t_93 = 0;
    __pyx_t_94 = 0;
    __pyx_t_95 = 0;
    __pyx_t_96 = 0;
    __pyx_t_97 = 0;
    __pyx_t_98 = 0;
    __pyx_t_99 = 0;
    __pyx_t_100 = 0;
    __pyx_t_101 = 0;
    __pyx_t_102 = 0;
    __pyx_t_103 = 0;
    __pyx_t_104 = 0;
    __pyx_t_105 = 0;
    __pyx_t_106 = 0;
    __pyx_t_107 = 0;
    __pyx_t_108 = 0;
    __pyx_t_109 = 0;
    __pyx_t_110 = 0;
    __pyx_t_111 = 0;
    __pyx_t_112 = 0;
    __pyx_t_113 = 0;
    __pyx_t_114 = 0;
    __pyx_t_115 = 0;
    __pyx_t_116 = 0;
    __Pyx_INCREF(__Pyx_OrderedDict);
    __pyx_t_116 = __Pyx_OrderedDict; __pyx_t_115 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_115 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_115)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_115);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
      }
    }
    if (!__pyx_t_115) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_116, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 53, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_116)) {
        PyObject *__pyx_temp[2] = {__pyx_t_115, __pyx_t_2};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 53, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_115); __pyx_t_115 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
        PyObject *__pyx_temp[2] = {__pyx_t_115, __pyx_t_2};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 53, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_115); __pyx_t_115 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else
      #endif
      {
        __pyx_t_114 = PyTuple_New(1+1); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 53, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_114);
        __Pyx_GIVEREF(__pyx_t_115); PyTuple_SET_ITEM(__pyx_t_114, 0, __pyx_t_115); __pyx_t_115 = NULL;
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_114, 0+1, __pyx_t_2);
        __pyx_t_2 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_114, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 53, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    __Pyx_INCREF(__Pyx_EnumBase);
    __pyx_t_116 = __Pyx_EnumBase; __pyx_t_114 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_114 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_114)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_114);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_n_s_TD_CALLBACK_TYPE, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 53, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_n_s_TD_CALLBACK_TYPE, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 53, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 53, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_114) {
        __Pyx_GIVEREF(__pyx_t_114); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_114); __pyx_t_114 = NULL;
      }
      __Pyx_INCREF(__pyx_n_s_TD_CALLBACK_TYPE);
      __Pyx_GIVEREF(__pyx_n_s_TD_CALLBACK_TYPE);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_117, __pyx_n_s_TD_CALLBACK_TYPE);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_117, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 53, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_TD_CALLBACK_TYPE, __pyx_t_1) < 0) __PYX_ERR(1, 53, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":167
 *         ('TD_RTN_CHANGE_ACCOUNT_BY_BANK', TD_RTN_CHANGE_ACCOUNT_BY_BANK),
 *     ]))
 *     __Pyx_globals['TD_FRONT_CONNECTED'] = TD_CALLBACK_TYPE.TD_FRONT_CONNECTED             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_FRONT_DISCONNECTED'] = TD_CALLBACK_TYPE.TD_FRONT_DISCONNECTED
 *     __Pyx_globals['TD_HEART_BEAT_WARN'] = TD_CALLBACK_TYPE.TD_HEART_BEAT_WARN
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 167, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_116 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TD_FRONT_CONNECTED); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 167, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 167, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_FRONT_CONNECTED, __pyx_t_116) < 0)) __PYX_ERR(1, 167, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;

    /* "EnumType":168
 *     ]))
 *     __Pyx_globals['TD_FRONT_CONNECTED'] = TD_CALLBACK_TYPE.TD_FRONT_CONNECTED
 *     __Pyx_globals['TD_FRONT_DISCONNECTED'] = TD_CALLBACK_TYPE.TD_FRONT_DISCONNECTED             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_HEART_BEAT_WARN'] = TD_CALLBACK_TYPE.TD_HEART_BEAT_WARN
 *     __Pyx_globals['TD_RSP_AUTH'] = TD_CALLBACK_TYPE.TD_RSP_AUTH
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 168, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_116, __pyx_n_s_TD_FRONT_DISCONNECTED); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 168, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 168, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_FRONT_DISCONNECTED, __pyx_t_1) < 0)) __PYX_ERR(1, 168, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":169
 *     __Pyx_globals['TD_FRONT_CONNECTED'] = TD_CALLBACK_TYPE.TD_FRONT_CONNECTED
 *     __Pyx_globals['TD_FRONT_DISCONNECTED'] = TD_CALLBACK_TYPE.TD_FRONT_DISCONNECTED
 *     __Pyx_globals['TD_HEART_BEAT_WARN'] = TD_CALLBACK_TYPE.TD_HEART_BEAT_WARN             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_AUTH'] = TD_CALLBACK_TYPE.TD_RSP_AUTH
 *     __Pyx_globals['TD_RSP_USER_LOGIN'] = TD_CALLBACK_TYPE.TD_RSP_USER_LOGIN
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 169, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_116 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TD_HEART_BEAT_WARN); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 169, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 169, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_HEART_BEAT_WARN, __pyx_t_116) < 0)) __PYX_ERR(1, 169, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;

    /* "EnumType":170
 *     __Pyx_globals['TD_FRONT_DISCONNECTED'] = TD_CALLBACK_TYPE.TD_FRONT_DISCONNECTED
 *     __Pyx_globals['TD_HEART_BEAT_WARN'] = TD_CALLBACK_TYPE.TD_HEART_BEAT_WARN
 *     __Pyx_globals['TD_RSP_AUTH'] = TD_CALLBACK_TYPE.TD_RSP_AUTH             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_USER_LOGIN'] = TD_CALLBACK_TYPE.TD_RSP_USER_LOGIN
 *     __Pyx_globals['TD_RSP_USER_LOGOUT'] = TD_CALLBACK_TYPE.TD_RSP_USER_LOGOUT
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 170, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_116, __pyx_n_s_TD_RSP_AUTH); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 170, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 170, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_AUTH, __pyx_t_1) < 0)) __PYX_ERR(1, 170, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":171
 *     __Pyx_globals['TD_HEART_BEAT_WARN'] = TD_CALLBACK_TYPE.TD_HEART_BEAT_WARN
 *     __Pyx_globals['TD_RSP_AUTH'] = TD_CALLBACK_TYPE.TD_RSP_AUTH
 *     __Pyx_globals['TD_RSP_USER_LOGIN'] = TD_CALLBACK_TYPE.TD_RSP_USER_LOGIN             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_USER_LOGOUT'] = TD_CALLBACK_TYPE.TD_RSP_USER_LOGOUT
 *     __Pyx_globals['TD_RSP_PWD_UPDATE'] = TD_CALLBACK_TYPE.TD_RSP_PWD_UPDATE
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 171, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_116 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TD_RSP_USER_LOGIN); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 171, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 171, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_USER_LOGIN, __pyx_t_116) < 0)) __PYX_ERR(1, 171, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;

    /* "EnumType":172
 *     __Pyx_globals['TD_RSP_AUTH'] = TD_CALLBACK_TYPE.TD_RSP_AUTH
 *     __Pyx_globals['TD_RSP_USER_LOGIN'] = TD_CALLBACK_TYPE.TD_RSP_USER_LOGIN
 *     __Pyx_globals['TD_RSP_USER_LOGOUT'] = TD_CALLBACK_TYPE.TD_RSP_USER_LOGOUT             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_PWD_UPDATE'] = TD_CALLBACK_TYPE.TD_RSP_PWD_UPDATE
 *     __Pyx_globals['TD_RSP_TRADING_PWD_UPDATE'] = TD_CALLBACK_TYPE.TD_RSP_TRADING_PWD_UPDATE
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_116, __pyx_n_s_TD_RSP_USER_LOGOUT); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 172, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_USER_LOGOUT, __pyx_t_1) < 0)) __PYX_ERR(1, 172, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":173
 *     __Pyx_globals['TD_RSP_USER_LOGIN'] = TD_CALLBACK_TYPE.TD_RSP_USER_LOGIN
 *     __Pyx_globals['TD_RSP_USER_LOGOUT'] = TD_CALLBACK_TYPE.TD_RSP_USER_LOGOUT
 *     __Pyx_globals['TD_RSP_PWD_UPDATE'] = TD_CALLBACK_TYPE.TD_RSP_PWD_UPDATE             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_TRADING_PWD_UPDATE'] = TD_CALLBACK_TYPE.TD_RSP_TRADING_PWD_UPDATE
 *     __Pyx_globals['TD_RSP_ORDER_INSERT'] = TD_CALLBACK_TYPE.TD_RSP_ORDER_INSERT
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 173, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_116 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TD_RSP_PWD_UPDATE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 173, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 173, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_PWD_UPDATE, __pyx_t_116) < 0)) __PYX_ERR(1, 173, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;

    /* "EnumType":174
 *     __Pyx_globals['TD_RSP_USER_LOGOUT'] = TD_CALLBACK_TYPE.TD_RSP_USER_LOGOUT
 *     __Pyx_globals['TD_RSP_PWD_UPDATE'] = TD_CALLBACK_TYPE.TD_RSP_PWD_UPDATE
 *     __Pyx_globals['TD_RSP_TRADING_PWD_UPDATE'] = TD_CALLBACK_TYPE.TD_RSP_TRADING_PWD_UPDATE             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_ORDER_INSERT'] = TD_CALLBACK_TYPE.TD_RSP_ORDER_INSERT
 *     __Pyx_globals['TD_RSP_PACK_ORDER_INSERT'] = TD_CALLBACK_TYPE.TD_RSP_PACK_ORDER_INSERT
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_116, __pyx_n_s_TD_RSP_TRADING_PWD_UPDATE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 174, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_TRADING_PWD_UPDATE, __pyx_t_1) < 0)) __PYX_ERR(1, 174, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":175
 *     __Pyx_globals['TD_RSP_PWD_UPDATE'] = TD_CALLBACK_TYPE.TD_RSP_PWD_UPDATE
 *     __Pyx_globals['TD_RSP_TRADING_PWD_UPDATE'] = TD_CALLBACK_TYPE.TD_RSP_TRADING_PWD_UPDATE
 *     __Pyx_globals['TD_RSP_ORDER_INSERT'] = TD_CALLBACK_TYPE.TD_RSP_ORDER_INSERT             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_PACK_ORDER_INSERT'] = TD_CALLBACK_TYPE.TD_RSP_PACK_ORDER_INSERT
 *     __Pyx_globals['TD_RSP_PACK_ORDER_ACTION'] = TD_CALLBACK_TYPE.TD_RSP_PACK_ORDER_ACTION
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 175, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_116 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TD_RSP_ORDER_INSERT); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 175, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 175, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_ORDER_INSERT, __pyx_t_116) < 0)) __PYX_ERR(1, 175, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;

    /* "EnumType":176
 *     __Pyx_globals['TD_RSP_TRADING_PWD_UPDATE'] = TD_CALLBACK_TYPE.TD_RSP_TRADING_PWD_UPDATE
 *     __Pyx_globals['TD_RSP_ORDER_INSERT'] = TD_CALLBACK_TYPE.TD_RSP_ORDER_INSERT
 *     __Pyx_globals['TD_RSP_PACK_ORDER_INSERT'] = TD_CALLBACK_TYPE.TD_RSP_PACK_ORDER_INSERT             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_PACK_ORDER_ACTION'] = TD_CALLBACK_TYPE.TD_RSP_PACK_ORDER_ACTION
 *     __Pyx_globals['TD_RSP_ORDER_ACTION'] = TD_CALLBACK_TYPE.TD_RSP_ORDER_ACTION
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 176, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_116, __pyx_n_s_TD_RSP_PACK_ORDER_INSERT); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 176, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 176, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_PACK_ORDER_INSERT, __pyx_t_1) < 0)) __PYX_ERR(1, 176, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":177
 *     __Pyx_globals['TD_RSP_ORDER_INSERT'] = TD_CALLBACK_TYPE.TD_RSP_ORDER_INSERT
 *     __Pyx_globals['TD_RSP_PACK_ORDER_INSERT'] = TD_CALLBACK_TYPE.TD_RSP_PACK_ORDER_INSERT
 *     __Pyx_globals['TD_RSP_PACK_ORDER_ACTION'] = TD_CALLBACK_TYPE.TD_RSP_PACK_ORDER_ACTION             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_ORDER_ACTION'] = TD_CALLBACK_TYPE.TD_RSP_ORDER_ACTION
 *     __Pyx_globals['TD_RSP_QRY_MAX_ORDER_VOLUME'] = TD_CALLBACK_TYPE.TD_RSP_QRY_MAX_ORDER_VOLUME
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 177, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_116 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TD_RSP_PACK_ORDER_ACTION); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 177, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 177, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_PACK_ORDER_ACTION, __pyx_t_116) < 0)) __PYX_ERR(1, 177, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;

    /* "EnumType":178
 *     __Pyx_globals['TD_RSP_PACK_ORDER_INSERT'] = TD_CALLBACK_TYPE.TD_RSP_PACK_ORDER_INSERT
 *     __Pyx_globals['TD_RSP_PACK_ORDER_ACTION'] = TD_CALLBACK_TYPE.TD_RSP_PACK_ORDER_ACTION
 *     __Pyx_globals['TD_RSP_ORDER_ACTION'] = TD_CALLBACK_TYPE.TD_RSP_ORDER_ACTION             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_MAX_ORDER_VOLUME'] = TD_CALLBACK_TYPE.TD_RSP_QRY_MAX_ORDER_VOLUME
 *     __Pyx_globals['TD_RSP_SETTLE_INFO_CONFIRM'] = TD_CALLBACK_TYPE.TD_RSP_SETTLE_INFO_CONFIRM
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_116, __pyx_n_s_TD_RSP_ORDER_ACTION); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 178, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_ORDER_ACTION, __pyx_t_1) < 0)) __PYX_ERR(1, 178, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":179
 *     __Pyx_globals['TD_RSP_PACK_ORDER_ACTION'] = TD_CALLBACK_TYPE.TD_RSP_PACK_ORDER_ACTION
 *     __Pyx_globals['TD_RSP_ORDER_ACTION'] = TD_CALLBACK_TYPE.TD_RSP_ORDER_ACTION
 *     __Pyx_globals['TD_RSP_QRY_MAX_ORDER_VOLUME'] = TD_CALLBACK_TYPE.TD_RSP_QRY_MAX_ORDER_VOLUME             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_SETTLE_INFO_CONFIRM'] = TD_CALLBACK_TYPE.TD_RSP_SETTLE_INFO_CONFIRM
 *     __Pyx_globals['TD_RSP_REMOVE_PACK'] = TD_CALLBACK_TYPE.TD_RSP_REMOVE_PACK
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_116 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TD_RSP_QRY_MAX_ORDER_VOLUME); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 179, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_MAX_ORDER_VOLUME, __pyx_t_116) < 0)) __PYX_ERR(1, 179, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;

    /* "EnumType":180
 *     __Pyx_globals['TD_RSP_ORDER_ACTION'] = TD_CALLBACK_TYPE.TD_RSP_ORDER_ACTION
 *     __Pyx_globals['TD_RSP_QRY_MAX_ORDER_VOLUME'] = TD_CALLBACK_TYPE.TD_RSP_QRY_MAX_ORDER_VOLUME
 *     __Pyx_globals['TD_RSP_SETTLE_INFO_CONFIRM'] = TD_CALLBACK_TYPE.TD_RSP_SETTLE_INFO_CONFIRM             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_REMOVE_PACK'] = TD_CALLBACK_TYPE.TD_RSP_REMOVE_PACK
 *     __Pyx_globals['TD_RSP_REMOVE_PACK_ACTION'] = TD_CALLBACK_TYPE.TD_RSP_REMOVE_PACK_ACTION
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_116, __pyx_n_s_TD_RSP_SETTLE_INFO_CONFIRM); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 180, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_SETTLE_INFO_CONFIRM, __pyx_t_1) < 0)) __PYX_ERR(1, 180, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":181
 *     __Pyx_globals['TD_RSP_QRY_MAX_ORDER_VOLUME'] = TD_CALLBACK_TYPE.TD_RSP_QRY_MAX_ORDER_VOLUME
 *     __Pyx_globals['TD_RSP_SETTLE_INFO_CONFIRM'] = TD_CALLBACK_TYPE.TD_RSP_SETTLE_INFO_CONFIRM
 *     __Pyx_globals['TD_RSP_REMOVE_PACK'] = TD_CALLBACK_TYPE.TD_RSP_REMOVE_PACK             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_REMOVE_PACK_ACTION'] = TD_CALLBACK_TYPE.TD_RSP_REMOVE_PACK_ACTION
 *     __Pyx_globals['TD_RSP_EXEC_ORDER_INSERT'] = TD_CALLBACK_TYPE.TD_RSP_EXEC_ORDER_INSERT
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_116 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TD_RSP_REMOVE_PACK); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 181, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_REMOVE_PACK, __pyx_t_116) < 0)) __PYX_ERR(1, 181, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;

    /* "EnumType":182
 *     __Pyx_globals['TD_RSP_SETTLE_INFO_CONFIRM'] = TD_CALLBACK_TYPE.TD_RSP_SETTLE_INFO_CONFIRM
 *     __Pyx_globals['TD_RSP_REMOVE_PACK'] = TD_CALLBACK_TYPE.TD_RSP_REMOVE_PACK
 *     __Pyx_globals['TD_RSP_REMOVE_PACK_ACTION'] = TD_CALLBACK_TYPE.TD_RSP_REMOVE_PACK_ACTION             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_EXEC_ORDER_INSERT'] = TD_CALLBACK_TYPE.TD_RSP_EXEC_ORDER_INSERT
 *     __Pyx_globals['TD_RSP_EXEC_ORDER_ACTION'] = TD_CALLBACK_TYPE.TD_RSP_EXEC_ORDER_ACTION
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 182, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_116, __pyx_n_s_TD_RSP_REMOVE_PACK_ACTION); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 182, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 182, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_REMOVE_PACK_ACTION, __pyx_t_1) < 0)) __PYX_ERR(1, 182, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":183
 *     __Pyx_globals['TD_RSP_REMOVE_PACK'] = TD_CALLBACK_TYPE.TD_RSP_REMOVE_PACK
 *     __Pyx_globals['TD_RSP_REMOVE_PACK_ACTION'] = TD_CALLBACK_TYPE.TD_RSP_REMOVE_PACK_ACTION
 *     __Pyx_globals['TD_RSP_EXEC_ORDER_INSERT'] = TD_CALLBACK_TYPE.TD_RSP_EXEC_ORDER_INSERT             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_EXEC_ORDER_ACTION'] = TD_CALLBACK_TYPE.TD_RSP_EXEC_ORDER_ACTION
 *     __Pyx_globals['TD_RSP_FOR_QUOTE_INSERT'] = TD_CALLBACK_TYPE.TD_RSP_FOR_QUOTE_INSERT
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 183, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_116 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TD_RSP_EXEC_ORDER_INSERT); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 183, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 183, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_EXEC_ORDER_INSERT, __pyx_t_116) < 0)) __PYX_ERR(1, 183, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;

    /* "EnumType":184
 *     __Pyx_globals['TD_RSP_REMOVE_PACK_ACTION'] = TD_CALLBACK_TYPE.TD_RSP_REMOVE_PACK_ACTION
 *     __Pyx_globals['TD_RSP_EXEC_ORDER_INSERT'] = TD_CALLBACK_TYPE.TD_RSP_EXEC_ORDER_INSERT
 *     __Pyx_globals['TD_RSP_EXEC_ORDER_ACTION'] = TD_CALLBACK_TYPE.TD_RSP_EXEC_ORDER_ACTION             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_FOR_QUOTE_INSERT'] = TD_CALLBACK_TYPE.TD_RSP_FOR_QUOTE_INSERT
 *     __Pyx_globals['TD_RSP_QUOTE_INSERT'] = TD_CALLBACK_TYPE.TD_RSP_QUOTE_INSERT
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 184, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_116, __pyx_n_s_TD_RSP_EXEC_ORDER_ACTION); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 184, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 184, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_EXEC_ORDER_ACTION, __pyx_t_1) < 0)) __PYX_ERR(1, 184, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":185
 *     __Pyx_globals['TD_RSP_EXEC_ORDER_INSERT'] = TD_CALLBACK_TYPE.TD_RSP_EXEC_ORDER_INSERT
 *     __Pyx_globals['TD_RSP_EXEC_ORDER_ACTION'] = TD_CALLBACK_TYPE.TD_RSP_EXEC_ORDER_ACTION
 *     __Pyx_globals['TD_RSP_FOR_QUOTE_INSERT'] = TD_CALLBACK_TYPE.TD_RSP_FOR_QUOTE_INSERT             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QUOTE_INSERT'] = TD_CALLBACK_TYPE.TD_RSP_QUOTE_INSERT
 *     __Pyx_globals['TD_RSP_QUOTE_ACTION'] = TD_CALLBACK_TYPE.TD_RSP_QUOTE_ACTION
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_116 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TD_RSP_FOR_QUOTE_INSERT); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 185, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_FOR_QUOTE_INSERT, __pyx_t_116) < 0)) __PYX_ERR(1, 185, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;

    /* "EnumType":186
 *     __Pyx_globals['TD_RSP_EXEC_ORDER_ACTION'] = TD_CALLBACK_TYPE.TD_RSP_EXEC_ORDER_ACTION
 *     __Pyx_globals['TD_RSP_FOR_QUOTE_INSERT'] = TD_CALLBACK_TYPE.TD_RSP_FOR_QUOTE_INSERT
 *     __Pyx_globals['TD_RSP_QUOTE_INSERT'] = TD_CALLBACK_TYPE.TD_RSP_QUOTE_INSERT             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QUOTE_ACTION'] = TD_CALLBACK_TYPE.TD_RSP_QUOTE_ACTION
 *     __Pyx_globals['TD_RSP_BATCH_ORDER_ACTION'] = TD_CALLBACK_TYPE.TD_RSP_BATCH_ORDER_ACTION
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 186, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_116, __pyx_n_s_TD_RSP_QUOTE_INSERT); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 186, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 186, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QUOTE_INSERT, __pyx_t_1) < 0)) __PYX_ERR(1, 186, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":187
 *     __Pyx_globals['TD_RSP_FOR_QUOTE_INSERT'] = TD_CALLBACK_TYPE.TD_RSP_FOR_QUOTE_INSERT
 *     __Pyx_globals['TD_RSP_QUOTE_INSERT'] = TD_CALLBACK_TYPE.TD_RSP_QUOTE_INSERT
 *     __Pyx_globals['TD_RSP_QUOTE_ACTION'] = TD_CALLBACK_TYPE.TD_RSP_QUOTE_ACTION             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_BATCH_ORDER_ACTION'] = TD_CALLBACK_TYPE.TD_RSP_BATCH_ORDER_ACTION
 *     __Pyx_globals['TD_RSP_COMB_ACTION_INSERT'] = TD_CALLBACK_TYPE.TD_RSP_COMB_ACTION_INSERT
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 187, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_116 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TD_RSP_QUOTE_ACTION); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 187, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 187, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QUOTE_ACTION, __pyx_t_116) < 0)) __PYX_ERR(1, 187, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;

    /* "EnumType":188
 *     __Pyx_globals['TD_RSP_QUOTE_INSERT'] = TD_CALLBACK_TYPE.TD_RSP_QUOTE_INSERT
 *     __Pyx_globals['TD_RSP_QUOTE_ACTION'] = TD_CALLBACK_TYPE.TD_RSP_QUOTE_ACTION
 *     __Pyx_globals['TD_RSP_BATCH_ORDER_ACTION'] = TD_CALLBACK_TYPE.TD_RSP_BATCH_ORDER_ACTION             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_COMB_ACTION_INSERT'] = TD_CALLBACK_TYPE.TD_RSP_COMB_ACTION_INSERT
 *     __Pyx_globals['TD_RSP_QRY_ORDER'] = TD_CALLBACK_TYPE.TD_RSP_QRY_ORDER
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 188, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_116, __pyx_n_s_TD_RSP_BATCH_ORDER_ACTION); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 188, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 188, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_BATCH_ORDER_ACTION, __pyx_t_1) < 0)) __PYX_ERR(1, 188, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":189
 *     __Pyx_globals['TD_RSP_QUOTE_ACTION'] = TD_CALLBACK_TYPE.TD_RSP_QUOTE_ACTION
 *     __Pyx_globals['TD_RSP_BATCH_ORDER_ACTION'] = TD_CALLBACK_TYPE.TD_RSP_BATCH_ORDER_ACTION
 *     __Pyx_globals['TD_RSP_COMB_ACTION_INSERT'] = TD_CALLBACK_TYPE.TD_RSP_COMB_ACTION_INSERT             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_ORDER'] = TD_CALLBACK_TYPE.TD_RSP_QRY_ORDER
 *     __Pyx_globals['TD_RSP_QRY_TRADE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_TRADE
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 189, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_116 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TD_RSP_COMB_ACTION_INSERT); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 189, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 189, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_COMB_ACTION_INSERT, __pyx_t_116) < 0)) __PYX_ERR(1, 189, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;

    /* "EnumType":190
 *     __Pyx_globals['TD_RSP_BATCH_ORDER_ACTION'] = TD_CALLBACK_TYPE.TD_RSP_BATCH_ORDER_ACTION
 *     __Pyx_globals['TD_RSP_COMB_ACTION_INSERT'] = TD_CALLBACK_TYPE.TD_RSP_COMB_ACTION_INSERT
 *     __Pyx_globals['TD_RSP_QRY_ORDER'] = TD_CALLBACK_TYPE.TD_RSP_QRY_ORDER             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_TRADE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_TRADE
 *     __Pyx_globals['TD_RSP_QRY_INVESTOR_POS'] = TD_CALLBACK_TYPE.TD_RSP_QRY_INVESTOR_POS
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 190, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_116, __pyx_n_s_TD_RSP_QRY_ORDER); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 190, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 190, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_ORDER, __pyx_t_1) < 0)) __PYX_ERR(1, 190, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":191
 *     __Pyx_globals['TD_RSP_COMB_ACTION_INSERT'] = TD_CALLBACK_TYPE.TD_RSP_COMB_ACTION_INSERT
 *     __Pyx_globals['TD_RSP_QRY_ORDER'] = TD_CALLBACK_TYPE.TD_RSP_QRY_ORDER
 *     __Pyx_globals['TD_RSP_QRY_TRADE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_TRADE             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_INVESTOR_POS'] = TD_CALLBACK_TYPE.TD_RSP_QRY_INVESTOR_POS
 *     __Pyx_globals['TD_RSP_QRY_TRADING_ACCOUNT'] = TD_CALLBACK_TYPE.TD_RSP_QRY_TRADING_ACCOUNT
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 191, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_116 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TD_RSP_QRY_TRADE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 191, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 191, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_TRADE, __pyx_t_116) < 0)) __PYX_ERR(1, 191, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;

    /* "EnumType":192
 *     __Pyx_globals['TD_RSP_QRY_ORDER'] = TD_CALLBACK_TYPE.TD_RSP_QRY_ORDER
 *     __Pyx_globals['TD_RSP_QRY_TRADE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_TRADE
 *     __Pyx_globals['TD_RSP_QRY_INVESTOR_POS'] = TD_CALLBACK_TYPE.TD_RSP_QRY_INVESTOR_POS             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_TRADING_ACCOUNT'] = TD_CALLBACK_TYPE.TD_RSP_QRY_TRADING_ACCOUNT
 *     __Pyx_globals['TD_RSP_QRY_INVESTOR'] = TD_CALLBACK_TYPE.TD_RSP_QRY_INVESTOR
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_116, __pyx_n_s_TD_RSP_QRY_INVESTOR_POS); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 192, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_INVESTOR_POS, __pyx_t_1) < 0)) __PYX_ERR(1, 192, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":193
 *     __Pyx_globals['TD_RSP_QRY_TRADE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_TRADE
 *     __Pyx_globals['TD_RSP_QRY_INVESTOR_POS'] = TD_CALLBACK_TYPE.TD_RSP_QRY_INVESTOR_POS
 *     __Pyx_globals['TD_RSP_QRY_TRADING_ACCOUNT'] = TD_CALLBACK_TYPE.TD_RSP_QRY_TRADING_ACCOUNT             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_INVESTOR'] = TD_CALLBACK_TYPE.TD_RSP_QRY_INVESTOR
 *     __Pyx_globals['TD_RSP_QRY_TRADING_CODE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_TRADING_CODE
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_116 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TD_RSP_QRY_TRADING_ACCOUNT); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 193, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_TRADING_ACCOUNT, __pyx_t_116) < 0)) __PYX_ERR(1, 193, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;

    /* "EnumType":194
 *     __Pyx_globals['TD_RSP_QRY_INVESTOR_POS'] = TD_CALLBACK_TYPE.TD_RSP_QRY_INVESTOR_POS
 *     __Pyx_globals['TD_RSP_QRY_TRADING_ACCOUNT'] = TD_CALLBACK_TYPE.TD_RSP_QRY_TRADING_ACCOUNT
 *     __Pyx_globals['TD_RSP_QRY_INVESTOR'] = TD_CALLBACK_TYPE.TD_RSP_QRY_INVESTOR             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_TRADING_CODE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_TRADING_CODE
 *     __Pyx_globals['TD_RSP_QRY_INSTRUMENT_MARGIN_RATE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_INSTRUMENT_MARGIN_RATE
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 194, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_116, __pyx_n_s_TD_RSP_QRY_INVESTOR); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 194, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 194, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_INVESTOR, __pyx_t_1) < 0)) __PYX_ERR(1, 194, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":195
 *     __Pyx_globals['TD_RSP_QRY_TRADING_ACCOUNT'] = TD_CALLBACK_TYPE.TD_RSP_QRY_TRADING_ACCOUNT
 *     __Pyx_globals['TD_RSP_QRY_INVESTOR'] = TD_CALLBACK_TYPE.TD_RSP_QRY_INVESTOR
 *     __Pyx_globals['TD_RSP_QRY_TRADING_CODE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_TRADING_CODE             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_INSTRUMENT_MARGIN_RATE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_INSTRUMENT_MARGIN_RATE
 *     __Pyx_globals['TD_RSP_QRY_INSTRUMENT_COMMISSION_RATE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_INSTRUMENT_COMMISSION_RATE
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 195, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_116 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TD_RSP_QRY_TRADING_CODE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 195, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 195, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_TRADING_CODE, __pyx_t_116) < 0)) __PYX_ERR(1, 195, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;

    /* "EnumType":196
 *     __Pyx_globals['TD_RSP_QRY_INVESTOR'] = TD_CALLBACK_TYPE.TD_RSP_QRY_INVESTOR
 *     __Pyx_globals['TD_RSP_QRY_TRADING_CODE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_TRADING_CODE
 *     __Pyx_globals['TD_RSP_QRY_INSTRUMENT_MARGIN_RATE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_INSTRUMENT_MARGIN_RATE             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_INSTRUMENT_COMMISSION_RATE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_INSTRUMENT_COMMISSION_RATE
 *     __Pyx_globals['TD_RSP_QRY_EXCHANGE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_EXCHANGE
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 196, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_116, __pyx_n_s_TD_RSP_QRY_INSTRUMENT_MARGIN_RAT); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 196, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 196, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_INSTRUMENT_MARGIN_RAT, __pyx_t_1) < 0)) __PYX_ERR(1, 196, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":197
 *     __Pyx_globals['TD_RSP_QRY_TRADING_CODE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_TRADING_CODE
 *     __Pyx_globals['TD_RSP_QRY_INSTRUMENT_MARGIN_RATE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_INSTRUMENT_MARGIN_RATE
 *     __Pyx_globals['TD_RSP_QRY_INSTRUMENT_COMMISSION_RATE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_INSTRUMENT_COMMISSION_RATE             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_EXCHANGE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_EXCHANGE
 *     __Pyx_globals['TD_RSP_QRY_PRODUCT'] = TD_CALLBACK_TYPE.TD_RSP_QRY_PRODUCT
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_116 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TD_RSP_QRY_INSTRUMENT_COMMISSION); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 197, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_INSTRUMENT_COMMISSION, __pyx_t_116) < 0)) __PYX_ERR(1, 197, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;

    /* "EnumType":198
 *     __Pyx_globals['TD_RSP_QRY_INSTRUMENT_MARGIN_RATE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_INSTRUMENT_MARGIN_RATE
 *     __Pyx_globals['TD_RSP_QRY_INSTRUMENT_COMMISSION_RATE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_INSTRUMENT_COMMISSION_RATE
 *     __Pyx_globals['TD_RSP_QRY_EXCHANGE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_EXCHANGE             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_PRODUCT'] = TD_CALLBACK_TYPE.TD_RSP_QRY_PRODUCT
 *     __Pyx_globals['TD_RSP_QRY_INSTRUMENT'] = TD_CALLBACK_TYPE.TD_RSP_QRY_INSTRUMENT
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_116, __pyx_n_s_TD_RSP_QRY_EXCHANGE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 198, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_EXCHANGE, __pyx_t_1) < 0)) __PYX_ERR(1, 198, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":199
 *     __Pyx_globals['TD_RSP_QRY_INSTRUMENT_COMMISSION_RATE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_INSTRUMENT_COMMISSION_RATE
 *     __Pyx_globals['TD_RSP_QRY_EXCHANGE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_EXCHANGE
 *     __Pyx_globals['TD_RSP_QRY_PRODUCT'] = TD_CALLBACK_TYPE.TD_RSP_QRY_PRODUCT             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_INSTRUMENT'] = TD_CALLBACK_TYPE.TD_RSP_QRY_INSTRUMENT
 *     __Pyx_globals['TD_RSP_QRY_DEPTH_MARKET_DATA'] = TD_CALLBACK_TYPE.TD_RSP_QRY_DEPTH_MARKET_DATA
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 199, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_116 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TD_RSP_QRY_PRODUCT); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 199, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 199, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_PRODUCT, __pyx_t_116) < 0)) __PYX_ERR(1, 199, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;

    /* "EnumType":200
 *     __Pyx_globals['TD_RSP_QRY_EXCHANGE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_EXCHANGE
 *     __Pyx_globals['TD_RSP_QRY_PRODUCT'] = TD_CALLBACK_TYPE.TD_RSP_QRY_PRODUCT
 *     __Pyx_globals['TD_RSP_QRY_INSTRUMENT'] = TD_CALLBACK_TYPE.TD_RSP_QRY_INSTRUMENT             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_DEPTH_MARKET_DATA'] = TD_CALLBACK_TYPE.TD_RSP_QRY_DEPTH_MARKET_DATA
 *     __Pyx_globals['TD_RSP_QRY_SETTLE_INFO'] = TD_CALLBACK_TYPE.TD_RSP_QRY_SETTLE_INFO
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 200, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_116, __pyx_n_s_TD_RSP_QRY_INSTRUMENT); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 200, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 200, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_INSTRUMENT, __pyx_t_1) < 0)) __PYX_ERR(1, 200, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":201
 *     __Pyx_globals['TD_RSP_QRY_PRODUCT'] = TD_CALLBACK_TYPE.TD_RSP_QRY_PRODUCT
 *     __Pyx_globals['TD_RSP_QRY_INSTRUMENT'] = TD_CALLBACK_TYPE.TD_RSP_QRY_INSTRUMENT
 *     __Pyx_globals['TD_RSP_QRY_DEPTH_MARKET_DATA'] = TD_CALLBACK_TYPE.TD_RSP_QRY_DEPTH_MARKET_DATA             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_SETTLE_INFO'] = TD_CALLBACK_TYPE.TD_RSP_QRY_SETTLE_INFO
 *     __Pyx_globals['TD_RSP_QRY_TRANSFER_BANK'] = TD_CALLBACK_TYPE.TD_RSP_QRY_TRANSFER_BANK
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_116 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TD_RSP_QRY_DEPTH_MARKET_DATA); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 201, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_DEPTH_MARKET_DATA, __pyx_t_116) < 0)) __PYX_ERR(1, 201, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;

    /* "EnumType":202
 *     __Pyx_globals['TD_RSP_QRY_INSTRUMENT'] = TD_CALLBACK_TYPE.TD_RSP_QRY_INSTRUMENT
 *     __Pyx_globals['TD_RSP_QRY_DEPTH_MARKET_DATA'] = TD_CALLBACK_TYPE.TD_RSP_QRY_DEPTH_MARKET_DATA
 *     __Pyx_globals['TD_RSP_QRY_SETTLE_INFO'] = TD_CALLBACK_TYPE.TD_RSP_QRY_SETTLE_INFO             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_TRANSFER_BANK'] = TD_CALLBACK_TYPE.TD_RSP_QRY_TRANSFER_BANK
 *     __Pyx_globals['TD_RSP_QRY_INVESTOR_POS_DETAIL'] = TD_CALLBACK_TYPE.TD_RSP_QRY_INVESTOR_POS_DETAIL
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 202, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_116, __pyx_n_s_TD_RSP_QRY_SETTLE_INFO); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 202, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 202, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_SETTLE_INFO, __pyx_t_1) < 0)) __PYX_ERR(1, 202, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":203
 *     __Pyx_globals['TD_RSP_QRY_DEPTH_MARKET_DATA'] = TD_CALLBACK_TYPE.TD_RSP_QRY_DEPTH_MARKET_DATA
 *     __Pyx_globals['TD_RSP_QRY_SETTLE_INFO'] = TD_CALLBACK_TYPE.TD_RSP_QRY_SETTLE_INFO
 *     __Pyx_globals['TD_RSP_QRY_TRANSFER_BANK'] = TD_CALLBACK_TYPE.TD_RSP_QRY_TRANSFER_BANK             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_INVESTOR_POS_DETAIL'] = TD_CALLBACK_TYPE.TD_RSP_QRY_INVESTOR_POS_DETAIL
 *     __Pyx_globals['TD_RSP_QRY_NOTICE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_NOTICE
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 203, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_116 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TD_RSP_QRY_TRANSFER_BANK); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 203, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 203, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_TRANSFER_BANK, __pyx_t_116) < 0)) __PYX_ERR(1, 203, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;

    /* "EnumType":204
 *     __Pyx_globals['TD_RSP_QRY_SETTLE_INFO'] = TD_CALLBACK_TYPE.TD_RSP_QRY_SETTLE_INFO
 *     __Pyx_globals['TD_RSP_QRY_TRANSFER_BANK'] = TD_CALLBACK_TYPE.TD_RSP_QRY_TRANSFER_BANK
 *     __Pyx_globals['TD_RSP_QRY_INVESTOR_POS_DETAIL'] = TD_CALLBACK_TYPE.TD_RSP_QRY_INVESTOR_POS_DETAIL             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_NOTICE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_NOTICE
 *     __Pyx_globals['TD_RSP_QRY_SETTLE_INFO_CONFIRM'] = TD_CALLBACK_TYPE.TD_RSP_QRY_SETTLE_INFO_CONFIRM
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 204, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_116, __pyx_n_s_TD_RSP_QRY_INVESTOR_POS_DETAIL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 204, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 204, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_INVESTOR_POS_DETAIL, __pyx_t_1) < 0)) __PYX_ERR(1, 204, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":205
 *     __Pyx_globals['TD_RSP_QRY_TRANSFER_BANK'] = TD_CALLBACK_TYPE.TD_RSP_QRY_TRANSFER_BANK
 *     __Pyx_globals['TD_RSP_QRY_INVESTOR_POS_DETAIL'] = TD_CALLBACK_TYPE.TD_RSP_QRY_INVESTOR_POS_DETAIL
 *     __Pyx_globals['TD_RSP_QRY_NOTICE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_NOTICE             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_SETTLE_INFO_CONFIRM'] = TD_CALLBACK_TYPE.TD_RSP_QRY_SETTLE_INFO_CONFIRM
 *     __Pyx_globals['TD_RSP_QRY_INVESTOR_POS_COMB_DETAIL'] = TD_CALLBACK_TYPE.TD_RSP_QRY_INVESTOR_POS_COMB_DETAIL
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 205, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_116 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TD_RSP_QRY_NOTICE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 205, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 205, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_NOTICE, __pyx_t_116) < 0)) __PYX_ERR(1, 205, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;

    /* "EnumType":206
 *     __Pyx_globals['TD_RSP_QRY_INVESTOR_POS_DETAIL'] = TD_CALLBACK_TYPE.TD_RSP_QRY_INVESTOR_POS_DETAIL
 *     __Pyx_globals['TD_RSP_QRY_NOTICE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_NOTICE
 *     __Pyx_globals['TD_RSP_QRY_SETTLE_INFO_CONFIRM'] = TD_CALLBACK_TYPE.TD_RSP_QRY_SETTLE_INFO_CONFIRM             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_INVESTOR_POS_COMB_DETAIL'] = TD_CALLBACK_TYPE.TD_RSP_QRY_INVESTOR_POS_COMB_DETAIL
 *     __Pyx_globals['TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_KEY'] = TD_CALLBACK_TYPE.TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_KEY
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 206, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_116, __pyx_n_s_TD_RSP_QRY_SETTLE_INFO_CONFIRM); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 206, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 206, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_SETTLE_INFO_CONFIRM, __pyx_t_1) < 0)) __PYX_ERR(1, 206, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":207
 *     __Pyx_globals['TD_RSP_QRY_NOTICE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_NOTICE
 *     __Pyx_globals['TD_RSP_QRY_SETTLE_INFO_CONFIRM'] = TD_CALLBACK_TYPE.TD_RSP_QRY_SETTLE_INFO_CONFIRM
 *     __Pyx_globals['TD_RSP_QRY_INVESTOR_POS_COMB_DETAIL'] = TD_CALLBACK_TYPE.TD_RSP_QRY_INVESTOR_POS_COMB_DETAIL             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_KEY'] = TD_CALLBACK_TYPE.TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_KEY
 *     __Pyx_globals['TD_RSP_QRY_EWARRANT_OFFSET'] = TD_CALLBACK_TYPE.TD_RSP_QRY_EWARRANT_OFFSET
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_116 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TD_RSP_QRY_INVESTOR_POS_COMB_DET); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 207, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_INVESTOR_POS_COMB_DET, __pyx_t_116) < 0)) __PYX_ERR(1, 207, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;

    /* "EnumType":208
 *     __Pyx_globals['TD_RSP_QRY_SETTLE_INFO_CONFIRM'] = TD_CALLBACK_TYPE.TD_RSP_QRY_SETTLE_INFO_CONFIRM
 *     __Pyx_globals['TD_RSP_QRY_INVESTOR_POS_COMB_DETAIL'] = TD_CALLBACK_TYPE.TD_RSP_QRY_INVESTOR_POS_COMB_DETAIL
 *     __Pyx_globals['TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_KEY'] = TD_CALLBACK_TYPE.TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_KEY             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_EWARRANT_OFFSET'] = TD_CALLBACK_TYPE.TD_RSP_QRY_EWARRANT_OFFSET
 *     __Pyx_globals['TD_RSP_QRY_INVESTOR_PRODUCT_GROUP_MARGIN'] = TD_CALLBACK_TYPE.TD_RSP_QRY_INVESTOR_PRODUCT_GROUP_MARGIN
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 208, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_116, __pyx_n_s_TD_RSP_QRY_CFMMC_TRADING_ACCOUNT); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 208, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 208, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_CFMMC_TRADING_ACCOUNT, __pyx_t_1) < 0)) __PYX_ERR(1, 208, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":209
 *     __Pyx_globals['TD_RSP_QRY_INVESTOR_POS_COMB_DETAIL'] = TD_CALLBACK_TYPE.TD_RSP_QRY_INVESTOR_POS_COMB_DETAIL
 *     __Pyx_globals['TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_KEY'] = TD_CALLBACK_TYPE.TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_KEY
 *     __Pyx_globals['TD_RSP_QRY_EWARRANT_OFFSET'] = TD_CALLBACK_TYPE.TD_RSP_QRY_EWARRANT_OFFSET             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_INVESTOR_PRODUCT_GROUP_MARGIN'] = TD_CALLBACK_TYPE.TD_RSP_QRY_INVESTOR_PRODUCT_GROUP_MARGIN
 *     __Pyx_globals['TD_RSP_QRY_EXCHANGE_MARGIN_RATE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_EXCHANGE_MARGIN_RATE
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 209, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_116 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TD_RSP_QRY_EWARRANT_OFFSET); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 209, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 209, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_EWARRANT_OFFSET, __pyx_t_116) < 0)) __PYX_ERR(1, 209, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;

    /* "EnumType":210
 *     __Pyx_globals['TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_KEY'] = TD_CALLBACK_TYPE.TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_KEY
 *     __Pyx_globals['TD_RSP_QRY_EWARRANT_OFFSET'] = TD_CALLBACK_TYPE.TD_RSP_QRY_EWARRANT_OFFSET
 *     __Pyx_globals['TD_RSP_QRY_INVESTOR_PRODUCT_GROUP_MARGIN'] = TD_CALLBACK_TYPE.TD_RSP_QRY_INVESTOR_PRODUCT_GROUP_MARGIN             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_EXCHANGE_MARGIN_RATE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_EXCHANGE_MARGIN_RATE
 *     __Pyx_globals['TD_RSP_QRY_EXCHANGE_MARGIN_RATE_ADJUST'] = TD_CALLBACK_TYPE.TD_RSP_QRY_EXCHANGE_MARGIN_RATE_ADJUST
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 210, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_116, __pyx_n_s_TD_RSP_QRY_INVESTOR_PRODUCT_GROU); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 210, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 210, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_INVESTOR_PRODUCT_GROU, __pyx_t_1) < 0)) __PYX_ERR(1, 210, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":211
 *     __Pyx_globals['TD_RSP_QRY_EWARRANT_OFFSET'] = TD_CALLBACK_TYPE.TD_RSP_QRY_EWARRANT_OFFSET
 *     __Pyx_globals['TD_RSP_QRY_INVESTOR_PRODUCT_GROUP_MARGIN'] = TD_CALLBACK_TYPE.TD_RSP_QRY_INVESTOR_PRODUCT_GROUP_MARGIN
 *     __Pyx_globals['TD_RSP_QRY_EXCHANGE_MARGIN_RATE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_EXCHANGE_MARGIN_RATE             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_EXCHANGE_MARGIN_RATE_ADJUST'] = TD_CALLBACK_TYPE.TD_RSP_QRY_EXCHANGE_MARGIN_RATE_ADJUST
 *     __Pyx_globals['TD_RSP_QRY_EXCHANGE_RATE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_EXCHANGE_RATE
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 211, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_116 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TD_RSP_QRY_EXCHANGE_MARGIN_RATE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 211, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 211, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_EXCHANGE_MARGIN_RATE, __pyx_t_116) < 0)) __PYX_ERR(1, 211, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;

    /* "EnumType":212
 *     __Pyx_globals['TD_RSP_QRY_INVESTOR_PRODUCT_GROUP_MARGIN'] = TD_CALLBACK_TYPE.TD_RSP_QRY_INVESTOR_PRODUCT_GROUP_MARGIN
 *     __Pyx_globals['TD_RSP_QRY_EXCHANGE_MARGIN_RATE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_EXCHANGE_MARGIN_RATE
 *     __Pyx_globals['TD_RSP_QRY_EXCHANGE_MARGIN_RATE_ADJUST'] = TD_CALLBACK_TYPE.TD_RSP_QRY_EXCHANGE_MARGIN_RATE_ADJUST             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_EXCHANGE_RATE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_EXCHANGE_RATE
 *     __Pyx_globals['TD_RSP_QRY_SEC_AGENT_ACID_MAP'] = TD_CALLBACK_TYPE.TD_RSP_QRY_SEC_AGENT_ACID_MAP
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 212, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_116, __pyx_n_s_TD_RSP_QRY_EXCHANGE_MARGIN_RATE_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 212, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 212, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_EXCHANGE_MARGIN_RATE_2, __pyx_t_1) < 0)) __PYX_ERR(1, 212, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":213
 *     __Pyx_globals['TD_RSP_QRY_EXCHANGE_MARGIN_RATE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_EXCHANGE_MARGIN_RATE
 *     __Pyx_globals['TD_RSP_QRY_EXCHANGE_MARGIN_RATE_ADJUST'] = TD_CALLBACK_TYPE.TD_RSP_QRY_EXCHANGE_MARGIN_RATE_ADJUST
 *     __Pyx_globals['TD_RSP_QRY_EXCHANGE_RATE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_EXCHANGE_RATE             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_SEC_AGENT_ACID_MAP'] = TD_CALLBACK_TYPE.TD_RSP_QRY_SEC_AGENT_ACID_MAP
 *     __Pyx_globals['TD_RSP_QRY_PRODUCT_EXCH_RATE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_PRODUCT_EXCH_RATE
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 213, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_116 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TD_RSP_QRY_EXCHANGE_RATE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 213, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 213, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_EXCHANGE_RATE, __pyx_t_116) < 0)) __PYX_ERR(1, 213, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;

    /* "EnumType":214
 *     __Pyx_globals['TD_RSP_QRY_EXCHANGE_MARGIN_RATE_ADJUST'] = TD_CALLBACK_TYPE.TD_RSP_QRY_EXCHANGE_MARGIN_RATE_ADJUST
 *     __Pyx_globals['TD_RSP_QRY_EXCHANGE_RATE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_EXCHANGE_RATE
 *     __Pyx_globals['TD_RSP_QRY_SEC_AGENT_ACID_MAP'] = TD_CALLBACK_TYPE.TD_RSP_QRY_SEC_AGENT_ACID_MAP             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_PRODUCT_EXCH_RATE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_PRODUCT_EXCH_RATE
 *     __Pyx_globals['TD_RSP_QRY_PRODUCT_GROUP'] = TD_CALLBACK_TYPE.TD_RSP_QRY_PRODUCT_GROUP
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 214, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_116, __pyx_n_s_TD_RSP_QRY_SEC_AGENT_ACID_MAP); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 214, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 214, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_SEC_AGENT_ACID_MAP, __pyx_t_1) < 0)) __PYX_ERR(1, 214, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":215
 *     __Pyx_globals['TD_RSP_QRY_EXCHANGE_RATE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_EXCHANGE_RATE
 *     __Pyx_globals['TD_RSP_QRY_SEC_AGENT_ACID_MAP'] = TD_CALLBACK_TYPE.TD_RSP_QRY_SEC_AGENT_ACID_MAP
 *     __Pyx_globals['TD_RSP_QRY_PRODUCT_EXCH_RATE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_PRODUCT_EXCH_RATE             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_PRODUCT_GROUP'] = TD_CALLBACK_TYPE.TD_RSP_QRY_PRODUCT_GROUP
 *     __Pyx_globals['TD_RSP_QRY_MM_INSTRUMENT_COMMISSION_RATE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_MM_INSTRUMENT_COMMISSION_RATE
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 215, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_116 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TD_RSP_QRY_PRODUCT_EXCH_RATE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 215, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 215, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_PRODUCT_EXCH_RATE, __pyx_t_116) < 0)) __PYX_ERR(1, 215, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;

    /* "EnumType":216
 *     __Pyx_globals['TD_RSP_QRY_SEC_AGENT_ACID_MAP'] = TD_CALLBACK_TYPE.TD_RSP_QRY_SEC_AGENT_ACID_MAP
 *     __Pyx_globals['TD_RSP_QRY_PRODUCT_EXCH_RATE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_PRODUCT_EXCH_RATE
 *     __Pyx_globals['TD_RSP_QRY_PRODUCT_GROUP'] = TD_CALLBACK_TYPE.TD_RSP_QRY_PRODUCT_GROUP             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_MM_INSTRUMENT_COMMISSION_RATE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_MM_INSTRUMENT_COMMISSION_RATE
 *     __Pyx_globals['TD_RSP_QRY_MM_OPTION_INSTR_COMM_RATE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_MM_OPTION_INSTR_COMM_RATE
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 216, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_116, __pyx_n_s_TD_RSP_QRY_PRODUCT_GROUP); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 216, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 216, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_PRODUCT_GROUP, __pyx_t_1) < 0)) __PYX_ERR(1, 216, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":217
 *     __Pyx_globals['TD_RSP_QRY_PRODUCT_EXCH_RATE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_PRODUCT_EXCH_RATE
 *     __Pyx_globals['TD_RSP_QRY_PRODUCT_GROUP'] = TD_CALLBACK_TYPE.TD_RSP_QRY_PRODUCT_GROUP
 *     __Pyx_globals['TD_RSP_QRY_MM_INSTRUMENT_COMMISSION_RATE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_MM_INSTRUMENT_COMMISSION_RATE             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_MM_OPTION_INSTR_COMM_RATE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_MM_OPTION_INSTR_COMM_RATE
 *     __Pyx_globals['TD_RSP_QRY_INSTRUMENT_ORDER_COMM_RATE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_INSTRUMENT_ORDER_COMM_RATE
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 217, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_116 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TD_RSP_QRY_MM_INSTRUMENT_COMMISS); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 217, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 217, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_MM_INSTRUMENT_COMMISS, __pyx_t_116) < 0)) __PYX_ERR(1, 217, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;

    /* "EnumType":218
 *     __Pyx_globals['TD_RSP_QRY_PRODUCT_GROUP'] = TD_CALLBACK_TYPE.TD_RSP_QRY_PRODUCT_GROUP
 *     __Pyx_globals['TD_RSP_QRY_MM_INSTRUMENT_COMMISSION_RATE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_MM_INSTRUMENT_COMMISSION_RATE
 *     __Pyx_globals['TD_RSP_QRY_MM_OPTION_INSTR_COMM_RATE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_MM_OPTION_INSTR_COMM_RATE             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_INSTRUMENT_ORDER_COMM_RATE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_INSTRUMENT_ORDER_COMM_RATE
 *     __Pyx_globals['TD_RSP_QRY_OPTION_INSTR_TRADE_COST'] = TD_CALLBACK_TYPE.TD_RSP_QRY_OPTION_INSTR_TRADE_COST
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_116, __pyx_n_s_TD_RSP_QRY_MM_OPTION_INSTR_COMM); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 218, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_MM_OPTION_INSTR_COMM, __pyx_t_1) < 0)) __PYX_ERR(1, 218, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":219
 *     __Pyx_globals['TD_RSP_QRY_MM_INSTRUMENT_COMMISSION_RATE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_MM_INSTRUMENT_COMMISSION_RATE
 *     __Pyx_globals['TD_RSP_QRY_MM_OPTION_INSTR_COMM_RATE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_MM_OPTION_INSTR_COMM_RATE
 *     __Pyx_globals['TD_RSP_QRY_INSTRUMENT_ORDER_COMM_RATE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_INSTRUMENT_ORDER_COMM_RATE             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_OPTION_INSTR_TRADE_COST'] = TD_CALLBACK_TYPE.TD_RSP_QRY_OPTION_INSTR_TRADE_COST
 *     __Pyx_globals['TD_RSP_QRY_OPTION_INSTR_COMM_RATE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_OPTION_INSTR_COMM_RATE
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 219, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_116 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TD_RSP_QRY_INSTRUMENT_ORDER_COMM); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 219, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 219, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_INSTRUMENT_ORDER_COMM, __pyx_t_116) < 0)) __PYX_ERR(1, 219, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;

    /* "EnumType":220
 *     __Pyx_globals['TD_RSP_QRY_MM_OPTION_INSTR_COMM_RATE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_MM_OPTION_INSTR_COMM_RATE
 *     __Pyx_globals['TD_RSP_QRY_INSTRUMENT_ORDER_COMM_RATE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_INSTRUMENT_ORDER_COMM_RATE
 *     __Pyx_globals['TD_RSP_QRY_OPTION_INSTR_TRADE_COST'] = TD_CALLBACK_TYPE.TD_RSP_QRY_OPTION_INSTR_TRADE_COST             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_OPTION_INSTR_COMM_RATE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_OPTION_INSTR_COMM_RATE
 *     __Pyx_globals['TD_RSP_QRY_EXEC_ORDER'] = TD_CALLBACK_TYPE.TD_RSP_QRY_EXEC_ORDER
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 220, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_116, __pyx_n_s_TD_RSP_QRY_OPTION_INSTR_TRADE_CO); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 220, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 220, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_OPTION_INSTR_TRADE_CO, __pyx_t_1) < 0)) __PYX_ERR(1, 220, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":221
 *     __Pyx_globals['TD_RSP_QRY_INSTRUMENT_ORDER_COMM_RATE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_INSTRUMENT_ORDER_COMM_RATE
 *     __Pyx_globals['TD_RSP_QRY_OPTION_INSTR_TRADE_COST'] = TD_CALLBACK_TYPE.TD_RSP_QRY_OPTION_INSTR_TRADE_COST
 *     __Pyx_globals['TD_RSP_QRY_OPTION_INSTR_COMM_RATE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_OPTION_INSTR_COMM_RATE             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_EXEC_ORDER'] = TD_CALLBACK_TYPE.TD_RSP_QRY_EXEC_ORDER
 *     __Pyx_globals['TD_RSP_QRY_FOR_QUOTE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_FOR_QUOTE
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 221, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_116 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TD_RSP_QRY_OPTION_INSTR_COMM_RAT); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 221, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 221, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_OPTION_INSTR_COMM_RAT, __pyx_t_116) < 0)) __PYX_ERR(1, 221, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;

    /* "EnumType":222
 *     __Pyx_globals['TD_RSP_QRY_OPTION_INSTR_TRADE_COST'] = TD_CALLBACK_TYPE.TD_RSP_QRY_OPTION_INSTR_TRADE_COST
 *     __Pyx_globals['TD_RSP_QRY_OPTION_INSTR_COMM_RATE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_OPTION_INSTR_COMM_RATE
 *     __Pyx_globals['TD_RSP_QRY_EXEC_ORDER'] = TD_CALLBACK_TYPE.TD_RSP_QRY_EXEC_ORDER             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_FOR_QUOTE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_FOR_QUOTE
 *     __Pyx_globals['TD_RSP_QRY_QUOTE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_QUOTE
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 222, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_116, __pyx_n_s_TD_RSP_QRY_EXEC_ORDER); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 222, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 222, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_EXEC_ORDER, __pyx_t_1) < 0)) __PYX_ERR(1, 222, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":223
 *     __Pyx_globals['TD_RSP_QRY_OPTION_INSTR_COMM_RATE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_OPTION_INSTR_COMM_RATE
 *     __Pyx_globals['TD_RSP_QRY_EXEC_ORDER'] = TD_CALLBACK_TYPE.TD_RSP_QRY_EXEC_ORDER
 *     __Pyx_globals['TD_RSP_QRY_FOR_QUOTE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_FOR_QUOTE             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_QUOTE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_QUOTE
 *     __Pyx_globals['TD_RSP_QRY_COMB_INSTRUMENT_GUARD'] = TD_CALLBACK_TYPE.TD_RSP_QRY_COMB_INSTRUMENT_GUARD
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 223, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_116 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TD_RSP_QRY_FOR_QUOTE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 223, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 223, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_FOR_QUOTE, __pyx_t_116) < 0)) __PYX_ERR(1, 223, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;

    /* "EnumType":224
 *     __Pyx_globals['TD_RSP_QRY_EXEC_ORDER'] = TD_CALLBACK_TYPE.TD_RSP_QRY_EXEC_ORDER
 *     __Pyx_globals['TD_RSP_QRY_FOR_QUOTE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_FOR_QUOTE
 *     __Pyx_globals['TD_RSP_QRY_QUOTE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_QUOTE             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_COMB_INSTRUMENT_GUARD'] = TD_CALLBACK_TYPE.TD_RSP_QRY_COMB_INSTRUMENT_GUARD
 *     __Pyx_globals['TD_RSP_QRY_COMB_ACTION'] = TD_CALLBACK_TYPE.TD_RSP_QRY_COMB_ACTION
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 224, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_116, __pyx_n_s_TD_RSP_QRY_QUOTE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 224, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 224, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_QUOTE, __pyx_t_1) < 0)) __PYX_ERR(1, 224, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":225
 *     __Pyx_globals['TD_RSP_QRY_FOR_QUOTE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_FOR_QUOTE
 *     __Pyx_globals['TD_RSP_QRY_QUOTE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_QUOTE
 *     __Pyx_globals['TD_RSP_QRY_COMB_INSTRUMENT_GUARD'] = TD_CALLBACK_TYPE.TD_RSP_QRY_COMB_INSTRUMENT_GUARD             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_COMB_ACTION'] = TD_CALLBACK_TYPE.TD_RSP_QRY_COMB_ACTION
 *     __Pyx_globals['TD_RSP_QRY_TRANSFER_SERIAL'] = TD_CALLBACK_TYPE.TD_RSP_QRY_TRANSFER_SERIAL
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 225, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_116 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TD_RSP_QRY_COMB_INSTRUMENT_GUARD); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 225, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 225, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_COMB_INSTRUMENT_GUARD, __pyx_t_116) < 0)) __PYX_ERR(1, 225, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;

    /* "EnumType":226
 *     __Pyx_globals['TD_RSP_QRY_QUOTE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_QUOTE
 *     __Pyx_globals['TD_RSP_QRY_COMB_INSTRUMENT_GUARD'] = TD_CALLBACK_TYPE.TD_RSP_QRY_COMB_INSTRUMENT_GUARD
 *     __Pyx_globals['TD_RSP_QRY_COMB_ACTION'] = TD_CALLBACK_TYPE.TD_RSP_QRY_COMB_ACTION             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_TRANSFER_SERIAL'] = TD_CALLBACK_TYPE.TD_RSP_QRY_TRANSFER_SERIAL
 *     __Pyx_globals['TD_RSP_QRY_ACCOUNT_REGISTER'] = TD_CALLBACK_TYPE.TD_RSP_QRY_ACCOUNT_REGISTER
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 226, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_116, __pyx_n_s_TD_RSP_QRY_COMB_ACTION); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 226, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 226, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_COMB_ACTION, __pyx_t_1) < 0)) __PYX_ERR(1, 226, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":227
 *     __Pyx_globals['TD_RSP_QRY_COMB_INSTRUMENT_GUARD'] = TD_CALLBACK_TYPE.TD_RSP_QRY_COMB_INSTRUMENT_GUARD
 *     __Pyx_globals['TD_RSP_QRY_COMB_ACTION'] = TD_CALLBACK_TYPE.TD_RSP_QRY_COMB_ACTION
 *     __Pyx_globals['TD_RSP_QRY_TRANSFER_SERIAL'] = TD_CALLBACK_TYPE.TD_RSP_QRY_TRANSFER_SERIAL             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_ACCOUNT_REGISTER'] = TD_CALLBACK_TYPE.TD_RSP_QRY_ACCOUNT_REGISTER
 *     __Pyx_globals['TD_RSP_ERROR'] = TD_CALLBACK_TYPE.TD_RSP_ERROR
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 227, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_116 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TD_RSP_QRY_TRANSFER_SERIAL); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 227, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 227, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_TRANSFER_SERIAL, __pyx_t_116) < 0)) __PYX_ERR(1, 227, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;

    /* "EnumType":228
 *     __Pyx_globals['TD_RSP_QRY_COMB_ACTION'] = TD_CALLBACK_TYPE.TD_RSP_QRY_COMB_ACTION
 *     __Pyx_globals['TD_RSP_QRY_TRANSFER_SERIAL'] = TD_CALLBACK_TYPE.TD_RSP_QRY_TRANSFER_SERIAL
 *     __Pyx_globals['TD_RSP_QRY_ACCOUNT_REGISTER'] = TD_CALLBACK_TYPE.TD_RSP_QRY_ACCOUNT_REGISTER             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_ERROR'] = TD_CALLBACK_TYPE.TD_RSP_ERROR
 *     __Pyx_globals['TD_RTN_ORDER'] = TD_CALLBACK_TYPE.TD_RTN_ORDER
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 228, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_116, __pyx_n_s_TD_RSP_QRY_ACCOUNT_REGISTER); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 228, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 228, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_ACCOUNT_REGISTER, __pyx_t_1) < 0)) __PYX_ERR(1, 228, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":229
 *     __Pyx_globals['TD_RSP_QRY_TRANSFER_SERIAL'] = TD_CALLBACK_TYPE.TD_RSP_QRY_TRANSFER_SERIAL
 *     __Pyx_globals['TD_RSP_QRY_ACCOUNT_REGISTER'] = TD_CALLBACK_TYPE.TD_RSP_QRY_ACCOUNT_REGISTER
 *     __Pyx_globals['TD_RSP_ERROR'] = TD_CALLBACK_TYPE.TD_RSP_ERROR             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RTN_ORDER'] = TD_CALLBACK_TYPE.TD_RTN_ORDER
 *     __Pyx_globals['TD_RTN_TRADE'] = TD_CALLBACK_TYPE.TD_RTN_TRADE
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_116 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TD_RSP_ERROR); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 229, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_ERROR, __pyx_t_116) < 0)) __PYX_ERR(1, 229, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;

    /* "EnumType":230
 *     __Pyx_globals['TD_RSP_QRY_ACCOUNT_REGISTER'] = TD_CALLBACK_TYPE.TD_RSP_QRY_ACCOUNT_REGISTER
 *     __Pyx_globals['TD_RSP_ERROR'] = TD_CALLBACK_TYPE.TD_RSP_ERROR
 *     __Pyx_globals['TD_RTN_ORDER'] = TD_CALLBACK_TYPE.TD_RTN_ORDER             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RTN_TRADE'] = TD_CALLBACK_TYPE.TD_RTN_TRADE
 *     __Pyx_globals['TD_ERR_RTN_ORDER_INSERT'] = TD_CALLBACK_TYPE.TD_ERR_RTN_ORDER_INSERT
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 230, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_116, __pyx_n_s_TD_RTN_ORDER); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 230, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 230, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RTN_ORDER, __pyx_t_1) < 0)) __PYX_ERR(1, 230, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":231
 *     __Pyx_globals['TD_RSP_ERROR'] = TD_CALLBACK_TYPE.TD_RSP_ERROR
 *     __Pyx_globals['TD_RTN_ORDER'] = TD_CALLBACK_TYPE.TD_RTN_ORDER
 *     __Pyx_globals['TD_RTN_TRADE'] = TD_CALLBACK_TYPE.TD_RTN_TRADE             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_ERR_RTN_ORDER_INSERT'] = TD_CALLBACK_TYPE.TD_ERR_RTN_ORDER_INSERT
 *     __Pyx_globals['TD_ERR_RTN_ORDER_ACTION'] = TD_CALLBACK_TYPE.TD_ERR_RTN_ORDER_ACTION
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 231, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_116 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TD_RTN_TRADE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 231, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 231, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RTN_TRADE, __pyx_t_116) < 0)) __PYX_ERR(1, 231, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;

    /* "EnumType":232
 *     __Pyx_globals['TD_RTN_ORDER'] = TD_CALLBACK_TYPE.TD_RTN_ORDER
 *     __Pyx_globals['TD_RTN_TRADE'] = TD_CALLBACK_TYPE.TD_RTN_TRADE
 *     __Pyx_globals['TD_ERR_RTN_ORDER_INSERT'] = TD_CALLBACK_TYPE.TD_ERR_RTN_ORDER_INSERT             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_ERR_RTN_ORDER_ACTION'] = TD_CALLBACK_TYPE.TD_ERR_RTN_ORDER_ACTION
 *     __Pyx_globals['TD_RTN_INSTRUMENT_STATUS'] = TD_CALLBACK_TYPE.TD_RTN_INSTRUMENT_STATUS
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 232, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_116, __pyx_n_s_TD_ERR_RTN_ORDER_INSERT); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 232, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 232, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_ERR_RTN_ORDER_INSERT, __pyx_t_1) < 0)) __PYX_ERR(1, 232, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":233
 *     __Pyx_globals['TD_RTN_TRADE'] = TD_CALLBACK_TYPE.TD_RTN_TRADE
 *     __Pyx_globals['TD_ERR_RTN_ORDER_INSERT'] = TD_CALLBACK_TYPE.TD_ERR_RTN_ORDER_INSERT
 *     __Pyx_globals['TD_ERR_RTN_ORDER_ACTION'] = TD_CALLBACK_TYPE.TD_ERR_RTN_ORDER_ACTION             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RTN_INSTRUMENT_STATUS'] = TD_CALLBACK_TYPE.TD_RTN_INSTRUMENT_STATUS
 *     __Pyx_globals['TD_RTN_BULLETIN'] = TD_CALLBACK_TYPE.TD_RTN_BULLETIN
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_116 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TD_ERR_RTN_ORDER_ACTION); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 233, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_ERR_RTN_ORDER_ACTION, __pyx_t_116) < 0)) __PYX_ERR(1, 233, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;

    /* "EnumType":234
 *     __Pyx_globals['TD_ERR_RTN_ORDER_INSERT'] = TD_CALLBACK_TYPE.TD_ERR_RTN_ORDER_INSERT
 *     __Pyx_globals['TD_ERR_RTN_ORDER_ACTION'] = TD_CALLBACK_TYPE.TD_ERR_RTN_ORDER_ACTION
 *     __Pyx_globals['TD_RTN_INSTRUMENT_STATUS'] = TD_CALLBACK_TYPE.TD_RTN_INSTRUMENT_STATUS             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RTN_BULLETIN'] = TD_CALLBACK_TYPE.TD_RTN_BULLETIN
 *     __Pyx_globals['TD_RTN_TRADING_NOTICE'] = TD_CALLBACK_TYPE.TD_RTN_TRADING_NOTICE
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 234, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_116, __pyx_n_s_TD_RTN_INSTRUMENT_STATUS); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 234, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 234, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RTN_INSTRUMENT_STATUS, __pyx_t_1) < 0)) __PYX_ERR(1, 234, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":235
 *     __Pyx_globals['TD_ERR_RTN_ORDER_ACTION'] = TD_CALLBACK_TYPE.TD_ERR_RTN_ORDER_ACTION
 *     __Pyx_globals['TD_RTN_INSTRUMENT_STATUS'] = TD_CALLBACK_TYPE.TD_RTN_INSTRUMENT_STATUS
 *     __Pyx_globals['TD_RTN_BULLETIN'] = TD_CALLBACK_TYPE.TD_RTN_BULLETIN             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RTN_TRADING_NOTICE'] = TD_CALLBACK_TYPE.TD_RTN_TRADING_NOTICE
 *     __Pyx_globals['TD_RTN_ERROR_CONDITIONAL_ORDER'] = TD_CALLBACK_TYPE.TD_RTN_ERROR_CONDITIONAL_ORDER
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_116 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TD_RTN_BULLETIN); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 235, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RTN_BULLETIN, __pyx_t_116) < 0)) __PYX_ERR(1, 235, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;

    /* "EnumType":236
 *     __Pyx_globals['TD_RTN_INSTRUMENT_STATUS'] = TD_CALLBACK_TYPE.TD_RTN_INSTRUMENT_STATUS
 *     __Pyx_globals['TD_RTN_BULLETIN'] = TD_CALLBACK_TYPE.TD_RTN_BULLETIN
 *     __Pyx_globals['TD_RTN_TRADING_NOTICE'] = TD_CALLBACK_TYPE.TD_RTN_TRADING_NOTICE             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RTN_ERROR_CONDITIONAL_ORDER'] = TD_CALLBACK_TYPE.TD_RTN_ERROR_CONDITIONAL_ORDER
 *     __Pyx_globals['TD_RTN_EXEC_ORDER'] = TD_CALLBACK_TYPE.TD_RTN_EXEC_ORDER
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 236, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_116, __pyx_n_s_TD_RTN_TRADING_NOTICE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 236, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 236, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RTN_TRADING_NOTICE, __pyx_t_1) < 0)) __PYX_ERR(1, 236, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":237
 *     __Pyx_globals['TD_RTN_BULLETIN'] = TD_CALLBACK_TYPE.TD_RTN_BULLETIN
 *     __Pyx_globals['TD_RTN_TRADING_NOTICE'] = TD_CALLBACK_TYPE.TD_RTN_TRADING_NOTICE
 *     __Pyx_globals['TD_RTN_ERROR_CONDITIONAL_ORDER'] = TD_CALLBACK_TYPE.TD_RTN_ERROR_CONDITIONAL_ORDER             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RTN_EXEC_ORDER'] = TD_CALLBACK_TYPE.TD_RTN_EXEC_ORDER
 *     __Pyx_globals['TD_ERR_RTN_EXEC_ORDER_INSERT'] = TD_CALLBACK_TYPE.TD_ERR_RTN_EXEC_ORDER_INSERT
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 237, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_116 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TD_RTN_ERROR_CONDITIONAL_ORDER); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 237, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 237, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RTN_ERROR_CONDITIONAL_ORDER, __pyx_t_116) < 0)) __PYX_ERR(1, 237, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;

    /* "EnumType":238
 *     __Pyx_globals['TD_RTN_TRADING_NOTICE'] = TD_CALLBACK_TYPE.TD_RTN_TRADING_NOTICE
 *     __Pyx_globals['TD_RTN_ERROR_CONDITIONAL_ORDER'] = TD_CALLBACK_TYPE.TD_RTN_ERROR_CONDITIONAL_ORDER
 *     __Pyx_globals['TD_RTN_EXEC_ORDER'] = TD_CALLBACK_TYPE.TD_RTN_EXEC_ORDER             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_ERR_RTN_EXEC_ORDER_INSERT'] = TD_CALLBACK_TYPE.TD_ERR_RTN_EXEC_ORDER_INSERT
 *     __Pyx_globals['TD_ERR_RTN_EXEC_ORDER_ACTION'] = TD_CALLBACK_TYPE.TD_ERR_RTN_EXEC_ORDER_ACTION
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 238, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_116, __pyx_n_s_TD_RTN_EXEC_ORDER); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 238, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 238, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RTN_EXEC_ORDER, __pyx_t_1) < 0)) __PYX_ERR(1, 238, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":239
 *     __Pyx_globals['TD_RTN_ERROR_CONDITIONAL_ORDER'] = TD_CALLBACK_TYPE.TD_RTN_ERROR_CONDITIONAL_ORDER
 *     __Pyx_globals['TD_RTN_EXEC_ORDER'] = TD_CALLBACK_TYPE.TD_RTN_EXEC_ORDER
 *     __Pyx_globals['TD_ERR_RTN_EXEC_ORDER_INSERT'] = TD_CALLBACK_TYPE.TD_ERR_RTN_EXEC_ORDER_INSERT             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_ERR_RTN_EXEC_ORDER_ACTION'] = TD_CALLBACK_TYPE.TD_ERR_RTN_EXEC_ORDER_ACTION
 *     __Pyx_globals['TD_ERR_RTN_FOR_QUOTE_INSERT'] = TD_CALLBACK_TYPE.TD_ERR_RTN_FOR_QUOTE_INSERT
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 239, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_116 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TD_ERR_RTN_EXEC_ORDER_INSERT); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 239, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 239, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_ERR_RTN_EXEC_ORDER_INSERT, __pyx_t_116) < 0)) __PYX_ERR(1, 239, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;

    /* "EnumType":240
 *     __Pyx_globals['TD_RTN_EXEC_ORDER'] = TD_CALLBACK_TYPE.TD_RTN_EXEC_ORDER
 *     __Pyx_globals['TD_ERR_RTN_EXEC_ORDER_INSERT'] = TD_CALLBACK_TYPE.TD_ERR_RTN_EXEC_ORDER_INSERT
 *     __Pyx_globals['TD_ERR_RTN_EXEC_ORDER_ACTION'] = TD_CALLBACK_TYPE.TD_ERR_RTN_EXEC_ORDER_ACTION             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_ERR_RTN_FOR_QUOTE_INSERT'] = TD_CALLBACK_TYPE.TD_ERR_RTN_FOR_QUOTE_INSERT
 *     __Pyx_globals['TD_RTN_QUOTE'] = TD_CALLBACK_TYPE.TD_RTN_QUOTE
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 240, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_116, __pyx_n_s_TD_ERR_RTN_EXEC_ORDER_ACTION); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 240, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 240, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_ERR_RTN_EXEC_ORDER_ACTION, __pyx_t_1) < 0)) __PYX_ERR(1, 240, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":241
 *     __Pyx_globals['TD_ERR_RTN_EXEC_ORDER_INSERT'] = TD_CALLBACK_TYPE.TD_ERR_RTN_EXEC_ORDER_INSERT
 *     __Pyx_globals['TD_ERR_RTN_EXEC_ORDER_ACTION'] = TD_CALLBACK_TYPE.TD_ERR_RTN_EXEC_ORDER_ACTION
 *     __Pyx_globals['TD_ERR_RTN_FOR_QUOTE_INSERT'] = TD_CALLBACK_TYPE.TD_ERR_RTN_FOR_QUOTE_INSERT             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RTN_QUOTE'] = TD_CALLBACK_TYPE.TD_RTN_QUOTE
 *     __Pyx_globals['TD_ERR_RTN_QUOTE_INSERT'] = TD_CALLBACK_TYPE.TD_ERR_RTN_QUOTE_INSERT
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 241, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_116 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TD_ERR_RTN_FOR_QUOTE_INSERT); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 241, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 241, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_ERR_RTN_FOR_QUOTE_INSERT, __pyx_t_116) < 0)) __PYX_ERR(1, 241, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;

    /* "EnumType":242
 *     __Pyx_globals['TD_ERR_RTN_EXEC_ORDER_ACTION'] = TD_CALLBACK_TYPE.TD_ERR_RTN_EXEC_ORDER_ACTION
 *     __Pyx_globals['TD_ERR_RTN_FOR_QUOTE_INSERT'] = TD_CALLBACK_TYPE.TD_ERR_RTN_FOR_QUOTE_INSERT
 *     __Pyx_globals['TD_RTN_QUOTE'] = TD_CALLBACK_TYPE.TD_RTN_QUOTE             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_ERR_RTN_QUOTE_INSERT'] = TD_CALLBACK_TYPE.TD_ERR_RTN_QUOTE_INSERT
 *     __Pyx_globals['TD_ERR_RTN_QUOTE_ACTION'] = TD_CALLBACK_TYPE.TD_ERR_RTN_QUOTE_ACTION
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 242, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_116, __pyx_n_s_TD_RTN_QUOTE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 242, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 242, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RTN_QUOTE, __pyx_t_1) < 0)) __PYX_ERR(1, 242, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":243
 *     __Pyx_globals['TD_ERR_RTN_FOR_QUOTE_INSERT'] = TD_CALLBACK_TYPE.TD_ERR_RTN_FOR_QUOTE_INSERT
 *     __Pyx_globals['TD_RTN_QUOTE'] = TD_CALLBACK_TYPE.TD_RTN_QUOTE
 *     __Pyx_globals['TD_ERR_RTN_QUOTE_INSERT'] = TD_CALLBACK_TYPE.TD_ERR_RTN_QUOTE_INSERT             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_ERR_RTN_QUOTE_ACTION'] = TD_CALLBACK_TYPE.TD_ERR_RTN_QUOTE_ACTION
 *     __Pyx_globals['TD_RTN_FOR_QUOTE_RSP'] = TD_CALLBACK_TYPE.TD_RTN_FOR_QUOTE_RSP
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 243, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_116 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TD_ERR_RTN_QUOTE_INSERT); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 243, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 243, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_ERR_RTN_QUOTE_INSERT, __pyx_t_116) < 0)) __PYX_ERR(1, 243, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;

    /* "EnumType":244
 *     __Pyx_globals['TD_RTN_QUOTE'] = TD_CALLBACK_TYPE.TD_RTN_QUOTE
 *     __Pyx_globals['TD_ERR_RTN_QUOTE_INSERT'] = TD_CALLBACK_TYPE.TD_ERR_RTN_QUOTE_INSERT
 *     __Pyx_globals['TD_ERR_RTN_QUOTE_ACTION'] = TD_CALLBACK_TYPE.TD_ERR_RTN_QUOTE_ACTION             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RTN_FOR_QUOTE_RSP'] = TD_CALLBACK_TYPE.TD_RTN_FOR_QUOTE_RSP
 *     __Pyx_globals['TD_RTN_CFMMC_TRADING_ACCOUNT_TOKEN'] = TD_CALLBACK_TYPE.TD_RTN_CFMMC_TRADING_ACCOUNT_TOKEN
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 244, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_116, __pyx_n_s_TD_ERR_RTN_QUOTE_ACTION); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 244, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 244, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_ERR_RTN_QUOTE_ACTION, __pyx_t_1) < 0)) __PYX_ERR(1, 244, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":245
 *     __Pyx_globals['TD_ERR_RTN_QUOTE_INSERT'] = TD_CALLBACK_TYPE.TD_ERR_RTN_QUOTE_INSERT
 *     __Pyx_globals['TD_ERR_RTN_QUOTE_ACTION'] = TD_CALLBACK_TYPE.TD_ERR_RTN_QUOTE_ACTION
 *     __Pyx_globals['TD_RTN_FOR_QUOTE_RSP'] = TD_CALLBACK_TYPE.TD_RTN_FOR_QUOTE_RSP             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RTN_CFMMC_TRADING_ACCOUNT_TOKEN'] = TD_CALLBACK_TYPE.TD_RTN_CFMMC_TRADING_ACCOUNT_TOKEN
 *     __Pyx_globals['TD_ERR_RTN_BATCH_ORDER_ACTION'] = TD_CALLBACK_TYPE.TD_ERR_RTN_BATCH_ORDER_ACTION
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 245, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_116 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TD_RTN_FOR_QUOTE_RSP); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 245, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 245, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RTN_FOR_QUOTE_RSP, __pyx_t_116) < 0)) __PYX_ERR(1, 245, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;

    /* "EnumType":246
 *     __Pyx_globals['TD_ERR_RTN_QUOTE_ACTION'] = TD_CALLBACK_TYPE.TD_ERR_RTN_QUOTE_ACTION
 *     __Pyx_globals['TD_RTN_FOR_QUOTE_RSP'] = TD_CALLBACK_TYPE.TD_RTN_FOR_QUOTE_RSP
 *     __Pyx_globals['TD_RTN_CFMMC_TRADING_ACCOUNT_TOKEN'] = TD_CALLBACK_TYPE.TD_RTN_CFMMC_TRADING_ACCOUNT_TOKEN             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_ERR_RTN_BATCH_ORDER_ACTION'] = TD_CALLBACK_TYPE.TD_ERR_RTN_BATCH_ORDER_ACTION
 *     __Pyx_globals['TD_RTN_COMB_ACTION'] = TD_CALLBACK_TYPE.TD_RTN_COMB_ACTION
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 246, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_116, __pyx_n_s_TD_RTN_CFMMC_TRADING_ACCOUNT_TOK); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 246, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 246, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RTN_CFMMC_TRADING_ACCOUNT_TOK, __pyx_t_1) < 0)) __PYX_ERR(1, 246, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":247
 *     __Pyx_globals['TD_RTN_FOR_QUOTE_RSP'] = TD_CALLBACK_TYPE.TD_RTN_FOR_QUOTE_RSP
 *     __Pyx_globals['TD_RTN_CFMMC_TRADING_ACCOUNT_TOKEN'] = TD_CALLBACK_TYPE.TD_RTN_CFMMC_TRADING_ACCOUNT_TOKEN
 *     __Pyx_globals['TD_ERR_RTN_BATCH_ORDER_ACTION'] = TD_CALLBACK_TYPE.TD_ERR_RTN_BATCH_ORDER_ACTION             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RTN_COMB_ACTION'] = TD_CALLBACK_TYPE.TD_RTN_COMB_ACTION
 *     __Pyx_globals['TD_ERR_RTN_COMB_ACTION_INSERT'] = TD_CALLBACK_TYPE.TD_ERR_RTN_COMB_ACTION_INSERT
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 247, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_116 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TD_ERR_RTN_BATCH_ORDER_ACTION); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 247, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 247, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_ERR_RTN_BATCH_ORDER_ACTION, __pyx_t_116) < 0)) __PYX_ERR(1, 247, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;

    /* "EnumType":248
 *     __Pyx_globals['TD_RTN_CFMMC_TRADING_ACCOUNT_TOKEN'] = TD_CALLBACK_TYPE.TD_RTN_CFMMC_TRADING_ACCOUNT_TOKEN
 *     __Pyx_globals['TD_ERR_RTN_BATCH_ORDER_ACTION'] = TD_CALLBACK_TYPE.TD_ERR_RTN_BATCH_ORDER_ACTION
 *     __Pyx_globals['TD_RTN_COMB_ACTION'] = TD_CALLBACK_TYPE.TD_RTN_COMB_ACTION             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_ERR_RTN_COMB_ACTION_INSERT'] = TD_CALLBACK_TYPE.TD_ERR_RTN_COMB_ACTION_INSERT
 *     __Pyx_globals['TD_RSP_QRY_CONTRACT_BANK'] = TD_CALLBACK_TYPE.TD_RSP_QRY_CONTRACT_BANK
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_116, __pyx_n_s_TD_RTN_COMB_ACTION); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 248, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RTN_COMB_ACTION, __pyx_t_1) < 0)) __PYX_ERR(1, 248, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":249
 *     __Pyx_globals['TD_ERR_RTN_BATCH_ORDER_ACTION'] = TD_CALLBACK_TYPE.TD_ERR_RTN_BATCH_ORDER_ACTION
 *     __Pyx_globals['TD_RTN_COMB_ACTION'] = TD_CALLBACK_TYPE.TD_RTN_COMB_ACTION
 *     __Pyx_globals['TD_ERR_RTN_COMB_ACTION_INSERT'] = TD_CALLBACK_TYPE.TD_ERR_RTN_COMB_ACTION_INSERT             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_CONTRACT_BANK'] = TD_CALLBACK_TYPE.TD_RSP_QRY_CONTRACT_BANK
 *     __Pyx_globals['TD_RSP_QRY_PACK_ORDER'] = TD_CALLBACK_TYPE.TD_RSP_QRY_PACK_ORDER
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_116 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TD_ERR_RTN_COMB_ACTION_INSERT); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 249, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_ERR_RTN_COMB_ACTION_INSERT, __pyx_t_116) < 0)) __PYX_ERR(1, 249, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;

    /* "EnumType":250
 *     __Pyx_globals['TD_RTN_COMB_ACTION'] = TD_CALLBACK_TYPE.TD_RTN_COMB_ACTION
 *     __Pyx_globals['TD_ERR_RTN_COMB_ACTION_INSERT'] = TD_CALLBACK_TYPE.TD_ERR_RTN_COMB_ACTION_INSERT
 *     __Pyx_globals['TD_RSP_QRY_CONTRACT_BANK'] = TD_CALLBACK_TYPE.TD_RSP_QRY_CONTRACT_BANK             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_PACK_ORDER'] = TD_CALLBACK_TYPE.TD_RSP_QRY_PACK_ORDER
 *     __Pyx_globals['TD_RSP_QRY_PACK_ORDER_ACTION'] = TD_CALLBACK_TYPE.TD_RSP_QRY_PACK_ORDER_ACTION
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_116, __pyx_n_s_TD_RSP_QRY_CONTRACT_BANK); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 250, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_CONTRACT_BANK, __pyx_t_1) < 0)) __PYX_ERR(1, 250, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":251
 *     __Pyx_globals['TD_ERR_RTN_COMB_ACTION_INSERT'] = TD_CALLBACK_TYPE.TD_ERR_RTN_COMB_ACTION_INSERT
 *     __Pyx_globals['TD_RSP_QRY_CONTRACT_BANK'] = TD_CALLBACK_TYPE.TD_RSP_QRY_CONTRACT_BANK
 *     __Pyx_globals['TD_RSP_QRY_PACK_ORDER'] = TD_CALLBACK_TYPE.TD_RSP_QRY_PACK_ORDER             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_PACK_ORDER_ACTION'] = TD_CALLBACK_TYPE.TD_RSP_QRY_PACK_ORDER_ACTION
 *     __Pyx_globals['TD_RSP_QRY_TRADING_NOTICE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_TRADING_NOTICE
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_116 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TD_RSP_QRY_PACK_ORDER); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 251, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_PACK_ORDER, __pyx_t_116) < 0)) __PYX_ERR(1, 251, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;

    /* "EnumType":252
 *     __Pyx_globals['TD_RSP_QRY_CONTRACT_BANK'] = TD_CALLBACK_TYPE.TD_RSP_QRY_CONTRACT_BANK
 *     __Pyx_globals['TD_RSP_QRY_PACK_ORDER'] = TD_CALLBACK_TYPE.TD_RSP_QRY_PACK_ORDER
 *     __Pyx_globals['TD_RSP_QRY_PACK_ORDER_ACTION'] = TD_CALLBACK_TYPE.TD_RSP_QRY_PACK_ORDER_ACTION             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_TRADING_NOTICE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_TRADING_NOTICE
 *     __Pyx_globals['TD_RSP_QRY_BROKER_TRADING_PARAMS'] = TD_CALLBACK_TYPE.TD_RSP_QRY_BROKER_TRADING_PARAMS
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_116, __pyx_n_s_TD_RSP_QRY_PACK_ORDER_ACTION); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 252, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_PACK_ORDER_ACTION, __pyx_t_1) < 0)) __PYX_ERR(1, 252, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":253
 *     __Pyx_globals['TD_RSP_QRY_PACK_ORDER'] = TD_CALLBACK_TYPE.TD_RSP_QRY_PACK_ORDER
 *     __Pyx_globals['TD_RSP_QRY_PACK_ORDER_ACTION'] = TD_CALLBACK_TYPE.TD_RSP_QRY_PACK_ORDER_ACTION
 *     __Pyx_globals['TD_RSP_QRY_TRADING_NOTICE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_TRADING_NOTICE             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_BROKER_TRADING_PARAMS'] = TD_CALLBACK_TYPE.TD_RSP_QRY_BROKER_TRADING_PARAMS
 *     __Pyx_globals['TD_RSP_QRY_BROKER_TRADING_ALGOS'] = TD_CALLBACK_TYPE.TD_RSP_QRY_BROKER_TRADING_ALGOS
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 253, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_116 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TD_RSP_QRY_TRADING_NOTICE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 253, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 253, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_TRADING_NOTICE, __pyx_t_116) < 0)) __PYX_ERR(1, 253, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;

    /* "EnumType":254
 *     __Pyx_globals['TD_RSP_QRY_PACK_ORDER_ACTION'] = TD_CALLBACK_TYPE.TD_RSP_QRY_PACK_ORDER_ACTION
 *     __Pyx_globals['TD_RSP_QRY_TRADING_NOTICE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_TRADING_NOTICE
 *     __Pyx_globals['TD_RSP_QRY_BROKER_TRADING_PARAMS'] = TD_CALLBACK_TYPE.TD_RSP_QRY_BROKER_TRADING_PARAMS             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_BROKER_TRADING_ALGOS'] = TD_CALLBACK_TYPE.TD_RSP_QRY_BROKER_TRADING_ALGOS
 *     __Pyx_globals['TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_TOKEN'] = TD_CALLBACK_TYPE.TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_TOKEN
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 254, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_116, __pyx_n_s_TD_RSP_QRY_BROKER_TRADING_PARAMS); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 254, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 254, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_BROKER_TRADING_PARAMS, __pyx_t_1) < 0)) __PYX_ERR(1, 254, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":255
 *     __Pyx_globals['TD_RSP_QRY_TRADING_NOTICE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_TRADING_NOTICE
 *     __Pyx_globals['TD_RSP_QRY_BROKER_TRADING_PARAMS'] = TD_CALLBACK_TYPE.TD_RSP_QRY_BROKER_TRADING_PARAMS
 *     __Pyx_globals['TD_RSP_QRY_BROKER_TRADING_ALGOS'] = TD_CALLBACK_TYPE.TD_RSP_QRY_BROKER_TRADING_ALGOS             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_TOKEN'] = TD_CALLBACK_TYPE.TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_TOKEN
 *     __Pyx_globals['TD_RTN_FROM_BANK_TO_FUTURE_BY_BANK'] = TD_CALLBACK_TYPE.TD_RTN_FROM_BANK_TO_FUTURE_BY_BANK
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 255, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_116 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TD_RSP_QRY_BROKER_TRADING_ALGOS); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 255, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 255, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_BROKER_TRADING_ALGOS, __pyx_t_116) < 0)) __PYX_ERR(1, 255, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;

    /* "EnumType":256
 *     __Pyx_globals['TD_RSP_QRY_BROKER_TRADING_PARAMS'] = TD_CALLBACK_TYPE.TD_RSP_QRY_BROKER_TRADING_PARAMS
 *     __Pyx_globals['TD_RSP_QRY_BROKER_TRADING_ALGOS'] = TD_CALLBACK_TYPE.TD_RSP_QRY_BROKER_TRADING_ALGOS
 *     __Pyx_globals['TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_TOKEN'] = TD_CALLBACK_TYPE.TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_TOKEN             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RTN_FROM_BANK_TO_FUTURE_BY_BANK'] = TD_CALLBACK_TYPE.TD_RTN_FROM_BANK_TO_FUTURE_BY_BANK
 *     __Pyx_globals['TD_RTN_FROM_FUTURE_TO_BANK_BY_BANK'] = TD_CALLBACK_TYPE.TD_RTN_FROM_FUTURE_TO_BANK_BY_BANK
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 256, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_116, __pyx_n_s_TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 256, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 256, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_2, __pyx_t_1) < 0)) __PYX_ERR(1, 256, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":257
 *     __Pyx_globals['TD_RSP_QRY_BROKER_TRADING_ALGOS'] = TD_CALLBACK_TYPE.TD_RSP_QRY_BROKER_TRADING_ALGOS
 *     __Pyx_globals['TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_TOKEN'] = TD_CALLBACK_TYPE.TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_TOKEN
 *     __Pyx_globals['TD_RTN_FROM_BANK_TO_FUTURE_BY_BANK'] = TD_CALLBACK_TYPE.TD_RTN_FROM_BANK_TO_FUTURE_BY_BANK             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RTN_FROM_FUTURE_TO_BANK_BY_BANK'] = TD_CALLBACK_TYPE.TD_RTN_FROM_FUTURE_TO_BANK_BY_BANK
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_BANK'] = TD_CALLBACK_TYPE.TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_BANK
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 257, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_116 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TD_RTN_FROM_BANK_TO_FUTURE_BY_BA); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 257, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 257, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RTN_FROM_BANK_TO_FUTURE_BY_BA, __pyx_t_116) < 0)) __PYX_ERR(1, 257, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;

    /* "EnumType":258
 *     __Pyx_globals['TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_TOKEN'] = TD_CALLBACK_TYPE.TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_TOKEN
 *     __Pyx_globals['TD_RTN_FROM_BANK_TO_FUTURE_BY_BANK'] = TD_CALLBACK_TYPE.TD_RTN_FROM_BANK_TO_FUTURE_BY_BANK
 *     __Pyx_globals['TD_RTN_FROM_FUTURE_TO_BANK_BY_BANK'] = TD_CALLBACK_TYPE.TD_RTN_FROM_FUTURE_TO_BANK_BY_BANK             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_BANK'] = TD_CALLBACK_TYPE.TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_BANK
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_BANK'] = TD_CALLBACK_TYPE.TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_BANK
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 258, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_116, __pyx_n_s_TD_RTN_FROM_FUTURE_TO_BANK_BY_BA); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 258, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 258, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RTN_FROM_FUTURE_TO_BANK_BY_BA, __pyx_t_1) < 0)) __PYX_ERR(1, 258, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":259
 *     __Pyx_globals['TD_RTN_FROM_BANK_TO_FUTURE_BY_BANK'] = TD_CALLBACK_TYPE.TD_RTN_FROM_BANK_TO_FUTURE_BY_BANK
 *     __Pyx_globals['TD_RTN_FROM_FUTURE_TO_BANK_BY_BANK'] = TD_CALLBACK_TYPE.TD_RTN_FROM_FUTURE_TO_BANK_BY_BANK
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_BANK'] = TD_CALLBACK_TYPE.TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_BANK             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_BANK'] = TD_CALLBACK_TYPE.TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_BANK
 *     __Pyx_globals['TD_RTN_FROM_BANK_TO_FUTURE_BY_FUTURE'] = TD_CALLBACK_TYPE.TD_RTN_FROM_BANK_TO_FUTURE_BY_FUTURE
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 259, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_116 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TD_RTN_REPEAL_FROM_BANK_TO_FUTUR); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 259, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 259, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RTN_REPEAL_FROM_BANK_TO_FUTUR, __pyx_t_116) < 0)) __PYX_ERR(1, 259, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;

    /* "EnumType":260
 *     __Pyx_globals['TD_RTN_FROM_FUTURE_TO_BANK_BY_BANK'] = TD_CALLBACK_TYPE.TD_RTN_FROM_FUTURE_TO_BANK_BY_BANK
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_BANK'] = TD_CALLBACK_TYPE.TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_BANK
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_BANK'] = TD_CALLBACK_TYPE.TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_BANK             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RTN_FROM_BANK_TO_FUTURE_BY_FUTURE'] = TD_CALLBACK_TYPE.TD_RTN_FROM_BANK_TO_FUTURE_BY_FUTURE
 *     __Pyx_globals['TD_RTN_FROM_FUTURE_TO_BANK_BY_FUTURE'] = TD_CALLBACK_TYPE.TD_RTN_FROM_FUTURE_TO_BANK_BY_FUTURE
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 260, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_116, __pyx_n_s_TD_RTN_REPEAL_FROM_FUTURE_TO_BAN); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 260, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 260, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RTN_REPEAL_FROM_FUTURE_TO_BAN, __pyx_t_1) < 0)) __PYX_ERR(1, 260, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":261
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_BANK'] = TD_CALLBACK_TYPE.TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_BANK
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_BANK'] = TD_CALLBACK_TYPE.TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_BANK
 *     __Pyx_globals['TD_RTN_FROM_BANK_TO_FUTURE_BY_FUTURE'] = TD_CALLBACK_TYPE.TD_RTN_FROM_BANK_TO_FUTURE_BY_FUTURE             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RTN_FROM_FUTURE_TO_BANK_BY_FUTURE'] = TD_CALLBACK_TYPE.TD_RTN_FROM_FUTURE_TO_BANK_BY_FUTURE
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE_MANUAL'] = TD_CALLBACK_TYPE.TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE_MANUAL
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 261, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_116 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TD_RTN_FROM_BANK_TO_FUTURE_BY_FU); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 261, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 261, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RTN_FROM_BANK_TO_FUTURE_BY_FU, __pyx_t_116) < 0)) __PYX_ERR(1, 261, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;

    /* "EnumType":262
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_BANK'] = TD_CALLBACK_TYPE.TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_BANK
 *     __Pyx_globals['TD_RTN_FROM_BANK_TO_FUTURE_BY_FUTURE'] = TD_CALLBACK_TYPE.TD_RTN_FROM_BANK_TO_FUTURE_BY_FUTURE
 *     __Pyx_globals['TD_RTN_FROM_FUTURE_TO_BANK_BY_FUTURE'] = TD_CALLBACK_TYPE.TD_RTN_FROM_FUTURE_TO_BANK_BY_FUTURE             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE_MANUAL'] = TD_CALLBACK_TYPE.TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE_MANUAL
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE_MANUAL'] = TD_CALLBACK_TYPE.TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE_MANUAL
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 262, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_116, __pyx_n_s_TD_RTN_FROM_FUTURE_TO_BANK_BY_FU); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 262, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 262, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RTN_FROM_FUTURE_TO_BANK_BY_FU, __pyx_t_1) < 0)) __PYX_ERR(1, 262, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":263
 *     __Pyx_globals['TD_RTN_FROM_BANK_TO_FUTURE_BY_FUTURE'] = TD_CALLBACK_TYPE.TD_RTN_FROM_BANK_TO_FUTURE_BY_FUTURE
 *     __Pyx_globals['TD_RTN_FROM_FUTURE_TO_BANK_BY_FUTURE'] = TD_CALLBACK_TYPE.TD_RTN_FROM_FUTURE_TO_BANK_BY_FUTURE
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE_MANUAL'] = TD_CALLBACK_TYPE.TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE_MANUAL             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE_MANUAL'] = TD_CALLBACK_TYPE.TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE_MANUAL
 *     __Pyx_globals['TD_RTN_QUERY_BANK_BALANCE_BY_FUTURE'] = TD_CALLBACK_TYPE.TD_RTN_QUERY_BANK_BALANCE_BY_FUTURE
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 263, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_116 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TD_RTN_REPEAL_FROM_BANK_TO_FUTUR_2); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 263, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 263, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RTN_REPEAL_FROM_BANK_TO_FUTUR_2, __pyx_t_116) < 0)) __PYX_ERR(1, 263, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;

    /* "EnumType":264
 *     __Pyx_globals['TD_RTN_FROM_FUTURE_TO_BANK_BY_FUTURE'] = TD_CALLBACK_TYPE.TD_RTN_FROM_FUTURE_TO_BANK_BY_FUTURE
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE_MANUAL'] = TD_CALLBACK_TYPE.TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE_MANUAL
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE_MANUAL'] = TD_CALLBACK_TYPE.TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE_MANUAL             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RTN_QUERY_BANK_BALANCE_BY_FUTURE'] = TD_CALLBACK_TYPE.TD_RTN_QUERY_BANK_BALANCE_BY_FUTURE
 *     __Pyx_globals['TD_ERR_RTN_BANK_TO_FUTURE_BY_FUTURE'] = TD_CALLBACK_TYPE.TD_ERR_RTN_BANK_TO_FUTURE_BY_FUTURE
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_116, __pyx_n_s_TD_RTN_REPEAL_FROM_FUTURE_TO_BAN_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 264, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RTN_REPEAL_FROM_FUTURE_TO_BAN_2, __pyx_t_1) < 0)) __PYX_ERR(1, 264, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":265
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE_MANUAL'] = TD_CALLBACK_TYPE.TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE_MANUAL
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE_MANUAL'] = TD_CALLBACK_TYPE.TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE_MANUAL
 *     __Pyx_globals['TD_RTN_QUERY_BANK_BALANCE_BY_FUTURE'] = TD_CALLBACK_TYPE.TD_RTN_QUERY_BANK_BALANCE_BY_FUTURE             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_ERR_RTN_BANK_TO_FUTURE_BY_FUTURE'] = TD_CALLBACK_TYPE.TD_ERR_RTN_BANK_TO_FUTURE_BY_FUTURE
 *     __Pyx_globals['TD_ERR_RTN_FUTURE_TO_BANK_BY_FUTURE'] = TD_CALLBACK_TYPE.TD_ERR_RTN_FUTURE_TO_BANK_BY_FUTURE
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 265, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_116 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TD_RTN_QUERY_BANK_BALANCE_BY_FUT); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 265, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 265, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RTN_QUERY_BANK_BALANCE_BY_FUT, __pyx_t_116) < 0)) __PYX_ERR(1, 265, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;

    /* "EnumType":266
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE_MANUAL'] = TD_CALLBACK_TYPE.TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE_MANUAL
 *     __Pyx_globals['TD_RTN_QUERY_BANK_BALANCE_BY_FUTURE'] = TD_CALLBACK_TYPE.TD_RTN_QUERY_BANK_BALANCE_BY_FUTURE
 *     __Pyx_globals['TD_ERR_RTN_BANK_TO_FUTURE_BY_FUTURE'] = TD_CALLBACK_TYPE.TD_ERR_RTN_BANK_TO_FUTURE_BY_FUTURE             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_ERR_RTN_FUTURE_TO_BANK_BY_FUTURE'] = TD_CALLBACK_TYPE.TD_ERR_RTN_FUTURE_TO_BANK_BY_FUTURE
 *     __Pyx_globals['TD_ERR_RTN_REPEAL_BANK_TO_FUTURE_BY_FUTURE_MANUAL'] = TD_CALLBACK_TYPE.TD_ERR_RTN_REPEAL_BANK_TO_FUTURE_BY_FUTURE_MANUAL
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 266, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_116, __pyx_n_s_TD_ERR_RTN_BANK_TO_FUTURE_BY_FUT); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 266, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 266, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_ERR_RTN_BANK_TO_FUTURE_BY_FUT, __pyx_t_1) < 0)) __PYX_ERR(1, 266, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":267
 *     __Pyx_globals['TD_RTN_QUERY_BANK_BALANCE_BY_FUTURE'] = TD_CALLBACK_TYPE.TD_RTN_QUERY_BANK_BALANCE_BY_FUTURE
 *     __Pyx_globals['TD_ERR_RTN_BANK_TO_FUTURE_BY_FUTURE'] = TD_CALLBACK_TYPE.TD_ERR_RTN_BANK_TO_FUTURE_BY_FUTURE
 *     __Pyx_globals['TD_ERR_RTN_FUTURE_TO_BANK_BY_FUTURE'] = TD_CALLBACK_TYPE.TD_ERR_RTN_FUTURE_TO_BANK_BY_FUTURE             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_ERR_RTN_REPEAL_BANK_TO_FUTURE_BY_FUTURE_MANUAL'] = TD_CALLBACK_TYPE.TD_ERR_RTN_REPEAL_BANK_TO_FUTURE_BY_FUTURE_MANUAL
 *     __Pyx_globals['TD_ERR_RTN_REPEAL_FUTURE_TO_BANK_BY_FUTURE_MANUAL'] = TD_CALLBACK_TYPE.TD_ERR_RTN_REPEAL_FUTURE_TO_BANK_BY_FUTURE_MANUAL
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 267, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_116 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TD_ERR_RTN_FUTURE_TO_BANK_BY_FUT); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 267, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 267, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_ERR_RTN_FUTURE_TO_BANK_BY_FUT, __pyx_t_116) < 0)) __PYX_ERR(1, 267, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;

    /* "EnumType":268
 *     __Pyx_globals['TD_ERR_RTN_BANK_TO_FUTURE_BY_FUTURE'] = TD_CALLBACK_TYPE.TD_ERR_RTN_BANK_TO_FUTURE_BY_FUTURE
 *     __Pyx_globals['TD_ERR_RTN_FUTURE_TO_BANK_BY_FUTURE'] = TD_CALLBACK_TYPE.TD_ERR_RTN_FUTURE_TO_BANK_BY_FUTURE
 *     __Pyx_globals['TD_ERR_RTN_REPEAL_BANK_TO_FUTURE_BY_FUTURE_MANUAL'] = TD_CALLBACK_TYPE.TD_ERR_RTN_REPEAL_BANK_TO_FUTURE_BY_FUTURE_MANUAL             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_ERR_RTN_REPEAL_FUTURE_TO_BANK_BY_FUTURE_MANUAL'] = TD_CALLBACK_TYPE.TD_ERR_RTN_REPEAL_FUTURE_TO_BANK_BY_FUTURE_MANUAL
 *     __Pyx_globals['TD_ERR_RTN_QRY_BANK_BALANCE_BY_FUTURE'] = TD_CALLBACK_TYPE.TD_ERR_RTN_QRY_BANK_BALANCE_BY_FUTURE
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 268, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_116, __pyx_n_s_TD_ERR_RTN_REPEAL_BANK_TO_FUTURE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 268, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 268, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_ERR_RTN_REPEAL_BANK_TO_FUTURE, __pyx_t_1) < 0)) __PYX_ERR(1, 268, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":269
 *     __Pyx_globals['TD_ERR_RTN_FUTURE_TO_BANK_BY_FUTURE'] = TD_CALLBACK_TYPE.TD_ERR_RTN_FUTURE_TO_BANK_BY_FUTURE
 *     __Pyx_globals['TD_ERR_RTN_REPEAL_BANK_TO_FUTURE_BY_FUTURE_MANUAL'] = TD_CALLBACK_TYPE.TD_ERR_RTN_REPEAL_BANK_TO_FUTURE_BY_FUTURE_MANUAL
 *     __Pyx_globals['TD_ERR_RTN_REPEAL_FUTURE_TO_BANK_BY_FUTURE_MANUAL'] = TD_CALLBACK_TYPE.TD_ERR_RTN_REPEAL_FUTURE_TO_BANK_BY_FUTURE_MANUAL             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_ERR_RTN_QRY_BANK_BALANCE_BY_FUTURE'] = TD_CALLBACK_TYPE.TD_ERR_RTN_QRY_BANK_BALANCE_BY_FUTURE
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE'] = TD_CALLBACK_TYPE.TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 269, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_116 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TD_ERR_RTN_REPEAL_FUTURE_TO_BANK); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 269, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 269, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_ERR_RTN_REPEAL_FUTURE_TO_BANK, __pyx_t_116) < 0)) __PYX_ERR(1, 269, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;

    /* "EnumType":270
 *     __Pyx_globals['TD_ERR_RTN_REPEAL_BANK_TO_FUTURE_BY_FUTURE_MANUAL'] = TD_CALLBACK_TYPE.TD_ERR_RTN_REPEAL_BANK_TO_FUTURE_BY_FUTURE_MANUAL
 *     __Pyx_globals['TD_ERR_RTN_REPEAL_FUTURE_TO_BANK_BY_FUTURE_MANUAL'] = TD_CALLBACK_TYPE.TD_ERR_RTN_REPEAL_FUTURE_TO_BANK_BY_FUTURE_MANUAL
 *     __Pyx_globals['TD_ERR_RTN_QRY_BANK_BALANCE_BY_FUTURE'] = TD_CALLBACK_TYPE.TD_ERR_RTN_QRY_BANK_BALANCE_BY_FUTURE             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE'] = TD_CALLBACK_TYPE.TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE'] = TD_CALLBACK_TYPE.TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 270, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_116, __pyx_n_s_TD_ERR_RTN_QRY_BANK_BALANCE_BY_F); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 270, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 270, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_ERR_RTN_QRY_BANK_BALANCE_BY_F, __pyx_t_1) < 0)) __PYX_ERR(1, 270, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":271
 *     __Pyx_globals['TD_ERR_RTN_REPEAL_FUTURE_TO_BANK_BY_FUTURE_MANUAL'] = TD_CALLBACK_TYPE.TD_ERR_RTN_REPEAL_FUTURE_TO_BANK_BY_FUTURE_MANUAL
 *     __Pyx_globals['TD_ERR_RTN_QRY_BANK_BALANCE_BY_FUTURE'] = TD_CALLBACK_TYPE.TD_ERR_RTN_QRY_BANK_BALANCE_BY_FUTURE
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE'] = TD_CALLBACK_TYPE.TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE'] = TD_CALLBACK_TYPE.TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE
 *     __Pyx_globals['TD_RSP_FROM_BANK_TO_FUTURE_BY_FUTURE'] = TD_CALLBACK_TYPE.TD_RSP_FROM_BANK_TO_FUTURE_BY_FUTURE
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 271, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_116 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TD_RTN_REPEAL_FROM_BANK_TO_FUTUR_3); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 271, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 271, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RTN_REPEAL_FROM_BANK_TO_FUTUR_3, __pyx_t_116) < 0)) __PYX_ERR(1, 271, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;

    /* "EnumType":272
 *     __Pyx_globals['TD_ERR_RTN_QRY_BANK_BALANCE_BY_FUTURE'] = TD_CALLBACK_TYPE.TD_ERR_RTN_QRY_BANK_BALANCE_BY_FUTURE
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE'] = TD_CALLBACK_TYPE.TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE'] = TD_CALLBACK_TYPE.TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_FROM_BANK_TO_FUTURE_BY_FUTURE'] = TD_CALLBACK_TYPE.TD_RSP_FROM_BANK_TO_FUTURE_BY_FUTURE
 *     __Pyx_globals['TD_RSP_FROM_FUTURE_TO_BANK_BY_FUTURE'] = TD_CALLBACK_TYPE.TD_RSP_FROM_FUTURE_TO_BANK_BY_FUTURE
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 272, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_116, __pyx_n_s_TD_RTN_REPEAL_FROM_FUTURE_TO_BAN_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 272, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 272, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RTN_REPEAL_FROM_FUTURE_TO_BAN_3, __pyx_t_1) < 0)) __PYX_ERR(1, 272, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":273
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE'] = TD_CALLBACK_TYPE.TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE'] = TD_CALLBACK_TYPE.TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE
 *     __Pyx_globals['TD_RSP_FROM_BANK_TO_FUTURE_BY_FUTURE'] = TD_CALLBACK_TYPE.TD_RSP_FROM_BANK_TO_FUTURE_BY_FUTURE             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_FROM_FUTURE_TO_BANK_BY_FUTURE'] = TD_CALLBACK_TYPE.TD_RSP_FROM_FUTURE_TO_BANK_BY_FUTURE
 *     __Pyx_globals['TD_RSP_QRY_BANK_ACCOUNT_MONEY_BY_FUTURE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_BANK_ACCOUNT_MONEY_BY_FUTURE
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 273, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_116 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TD_RSP_FROM_BANK_TO_FUTURE_BY_FU); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 273, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 273, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_FROM_BANK_TO_FUTURE_BY_FU, __pyx_t_116) < 0)) __PYX_ERR(1, 273, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;

    /* "EnumType":274
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE'] = TD_CALLBACK_TYPE.TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE
 *     __Pyx_globals['TD_RSP_FROM_BANK_TO_FUTURE_BY_FUTURE'] = TD_CALLBACK_TYPE.TD_RSP_FROM_BANK_TO_FUTURE_BY_FUTURE
 *     __Pyx_globals['TD_RSP_FROM_FUTURE_TO_BANK_BY_FUTURE'] = TD_CALLBACK_TYPE.TD_RSP_FROM_FUTURE_TO_BANK_BY_FUTURE             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_BANK_ACCOUNT_MONEY_BY_FUTURE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_BANK_ACCOUNT_MONEY_BY_FUTURE
 *     __Pyx_globals['TD_RTN_OPEN_ACCOUNT_BY_BANK'] = TD_CALLBACK_TYPE.TD_RTN_OPEN_ACCOUNT_BY_BANK
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 274, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_116, __pyx_n_s_TD_RSP_FROM_FUTURE_TO_BANK_BY_FU); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 274, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 274, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_FROM_FUTURE_TO_BANK_BY_FU, __pyx_t_1) < 0)) __PYX_ERR(1, 274, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":275
 *     __Pyx_globals['TD_RSP_FROM_BANK_TO_FUTURE_BY_FUTURE'] = TD_CALLBACK_TYPE.TD_RSP_FROM_BANK_TO_FUTURE_BY_FUTURE
 *     __Pyx_globals['TD_RSP_FROM_FUTURE_TO_BANK_BY_FUTURE'] = TD_CALLBACK_TYPE.TD_RSP_FROM_FUTURE_TO_BANK_BY_FUTURE
 *     __Pyx_globals['TD_RSP_QRY_BANK_ACCOUNT_MONEY_BY_FUTURE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_BANK_ACCOUNT_MONEY_BY_FUTURE             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RTN_OPEN_ACCOUNT_BY_BANK'] = TD_CALLBACK_TYPE.TD_RTN_OPEN_ACCOUNT_BY_BANK
 *     __Pyx_globals['TD_RTN_CANCEL_ACCOUNT_BY_BANK'] = TD_CALLBACK_TYPE.TD_RTN_CANCEL_ACCOUNT_BY_BANK
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 275, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_116 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TD_RSP_QRY_BANK_ACCOUNT_MONEY_BY); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 275, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 275, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_BANK_ACCOUNT_MONEY_BY, __pyx_t_116) < 0)) __PYX_ERR(1, 275, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;

    /* "EnumType":276
 *     __Pyx_globals['TD_RSP_FROM_FUTURE_TO_BANK_BY_FUTURE'] = TD_CALLBACK_TYPE.TD_RSP_FROM_FUTURE_TO_BANK_BY_FUTURE
 *     __Pyx_globals['TD_RSP_QRY_BANK_ACCOUNT_MONEY_BY_FUTURE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_BANK_ACCOUNT_MONEY_BY_FUTURE
 *     __Pyx_globals['TD_RTN_OPEN_ACCOUNT_BY_BANK'] = TD_CALLBACK_TYPE.TD_RTN_OPEN_ACCOUNT_BY_BANK             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RTN_CANCEL_ACCOUNT_BY_BANK'] = TD_CALLBACK_TYPE.TD_RTN_CANCEL_ACCOUNT_BY_BANK
 *     __Pyx_globals['TD_RTN_CHANGE_ACCOUNT_BY_BANK'] = TD_CALLBACK_TYPE.TD_RTN_CHANGE_ACCOUNT_BY_BANK
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 276, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_116, __pyx_n_s_TD_RTN_OPEN_ACCOUNT_BY_BANK); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 276, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 276, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RTN_OPEN_ACCOUNT_BY_BANK, __pyx_t_1) < 0)) __PYX_ERR(1, 276, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":277
 *     __Pyx_globals['TD_RSP_QRY_BANK_ACCOUNT_MONEY_BY_FUTURE'] = TD_CALLBACK_TYPE.TD_RSP_QRY_BANK_ACCOUNT_MONEY_BY_FUTURE
 *     __Pyx_globals['TD_RTN_OPEN_ACCOUNT_BY_BANK'] = TD_CALLBACK_TYPE.TD_RTN_OPEN_ACCOUNT_BY_BANK
 *     __Pyx_globals['TD_RTN_CANCEL_ACCOUNT_BY_BANK'] = TD_CALLBACK_TYPE.TD_RTN_CANCEL_ACCOUNT_BY_BANK             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RTN_CHANGE_ACCOUNT_BY_BANK'] = TD_CALLBACK_TYPE.TD_RTN_CHANGE_ACCOUNT_BY_BANK
 * else:
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 277, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_116 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TD_RTN_CANCEL_ACCOUNT_BY_BANK); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 277, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 277, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RTN_CANCEL_ACCOUNT_BY_BANK, __pyx_t_116) < 0)) __PYX_ERR(1, 277, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;

    /* "EnumType":278
 *     __Pyx_globals['TD_RTN_OPEN_ACCOUNT_BY_BANK'] = TD_CALLBACK_TYPE.TD_RTN_OPEN_ACCOUNT_BY_BANK
 *     __Pyx_globals['TD_RTN_CANCEL_ACCOUNT_BY_BANK'] = TD_CALLBACK_TYPE.TD_RTN_CANCEL_ACCOUNT_BY_BANK
 *     __Pyx_globals['TD_RTN_CHANGE_ACCOUNT_BY_BANK'] = TD_CALLBACK_TYPE.TD_RTN_CHANGE_ACCOUNT_BY_BANK             # <<<<<<<<<<<<<<
 * else:
 *     class TD_CALLBACK_TYPE(__Pyx_EnumBase):
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 278, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_116, __pyx_n_s_TD_RTN_CHANGE_ACCOUNT_BY_BANK); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 278, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 278, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RTN_CHANGE_ACCOUNT_BY_BANK, __pyx_t_1) < 0)) __PYX_ERR(1, 278, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":51
 * 
 * cdef dict __Pyx_globals = globals()
 * if PY_VERSION_HEX >= 0x03040000:             # <<<<<<<<<<<<<<
 * 
 *     TD_CALLBACK_TYPE = __Pyx_EnumBase('TD_CALLBACK_TYPE', __Pyx_OrderedDict([
 */
    goto __pyx_L4;
  }

  /* "EnumType":280
 *     __Pyx_globals['TD_RTN_CHANGE_ACCOUNT_BY_BANK'] = TD_CALLBACK_TYPE.TD_RTN_CHANGE_ACCOUNT_BY_BANK
 * else:
 *     class TD_CALLBACK_TYPE(__Pyx_EnumBase):             # <<<<<<<<<<<<<<
 *         pass
 *     __Pyx_globals['TD_FRONT_CONNECTED'] = TD_CALLBACK_TYPE(TD_FRONT_CONNECTED, 'TD_FRONT_CONNECTED')
 */
  /*else*/ {
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 280, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__Pyx_EnumBase);
    __Pyx_GIVEREF(__Pyx_EnumBase);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __Pyx_EnumBase);
    __pyx_t_116 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 280, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_2 = __Pyx_Py3MetaclassPrepare(__pyx_t_116, __pyx_t_1, __pyx_n_s_TD_CALLBACK_TYPE, __pyx_n_s_TD_CALLBACK_TYPE, (PyObject *) NULL, __pyx_n_s_EnumType, (PyObject *) NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 280, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_Py3ClassCreate(__pyx_t_116, __pyx_n_s_TD_CALLBACK_TYPE, __pyx_t_1, __pyx_t_2, NULL, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 280, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_TD_CALLBACK_TYPE, __pyx_t_3) < 0) __PYX_ERR(1, 280, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":282
 *     class TD_CALLBACK_TYPE(__Pyx_EnumBase):
 *         pass
 *     __Pyx_globals['TD_FRONT_CONNECTED'] = TD_CALLBACK_TYPE(TD_FRONT_CONNECTED, 'TD_FRONT_CONNECTED')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_FRONT_DISCONNECTED'] = TD_CALLBACK_TYPE(TD_FRONT_DISCONNECTED, 'TD_FRONT_DISCONNECTED')
 *     __Pyx_globals['TD_HEART_BEAT_WARN'] = TD_CALLBACK_TYPE(TD_HEART_BEAT_WARN, 'TD_HEART_BEAT_WARN')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 282, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_FRONT_CONNECTED); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 282, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_FRONT_CONNECTED};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 282, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_FRONT_CONNECTED};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 282, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_114 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 282, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_114);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_114, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_114, 0+__pyx_t_117, __pyx_t_2);
      __Pyx_INCREF(__pyx_n_s_TD_FRONT_CONNECTED);
      __Pyx_GIVEREF(__pyx_n_s_TD_FRONT_CONNECTED);
      PyTuple_SET_ITEM(__pyx_t_114, 1+__pyx_t_117, __pyx_n_s_TD_FRONT_CONNECTED);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_114, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 282, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 282, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_FRONT_CONNECTED, __pyx_t_1) < 0)) __PYX_ERR(1, 282, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":283
 *         pass
 *     __Pyx_globals['TD_FRONT_CONNECTED'] = TD_CALLBACK_TYPE(TD_FRONT_CONNECTED, 'TD_FRONT_CONNECTED')
 *     __Pyx_globals['TD_FRONT_DISCONNECTED'] = TD_CALLBACK_TYPE(TD_FRONT_DISCONNECTED, 'TD_FRONT_DISCONNECTED')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_HEART_BEAT_WARN'] = TD_CALLBACK_TYPE(TD_HEART_BEAT_WARN, 'TD_HEART_BEAT_WARN')
 *     __Pyx_globals['TD_RSP_AUTH'] = TD_CALLBACK_TYPE(TD_RSP_AUTH, 'TD_RSP_AUTH')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 283, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_114 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_FRONT_DISCONNECTED); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 283, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_114);
    __pyx_t_2 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_FRONT_DISCONNECTED};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 283, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_FRONT_DISCONNECTED};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 283, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 283, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_114);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_117, __pyx_t_114);
      __Pyx_INCREF(__pyx_n_s_TD_FRONT_DISCONNECTED);
      __Pyx_GIVEREF(__pyx_n_s_TD_FRONT_DISCONNECTED);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_117, __pyx_n_s_TD_FRONT_DISCONNECTED);
      __pyx_t_114 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 283, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 283, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_FRONT_DISCONNECTED, __pyx_t_1) < 0)) __PYX_ERR(1, 283, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":284
 *     __Pyx_globals['TD_FRONT_CONNECTED'] = TD_CALLBACK_TYPE(TD_FRONT_CONNECTED, 'TD_FRONT_CONNECTED')
 *     __Pyx_globals['TD_FRONT_DISCONNECTED'] = TD_CALLBACK_TYPE(TD_FRONT_DISCONNECTED, 'TD_FRONT_DISCONNECTED')
 *     __Pyx_globals['TD_HEART_BEAT_WARN'] = TD_CALLBACK_TYPE(TD_HEART_BEAT_WARN, 'TD_HEART_BEAT_WARN')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_AUTH'] = TD_CALLBACK_TYPE(TD_RSP_AUTH, 'TD_RSP_AUTH')
 *     __Pyx_globals['TD_RSP_USER_LOGIN'] = TD_CALLBACK_TYPE(TD_RSP_USER_LOGIN, 'TD_RSP_USER_LOGIN')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 284, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_3 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_HEART_BEAT_WARN); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 284, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_114 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_114 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_114)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_114);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_HEART_BEAT_WARN};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 284, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_HEART_BEAT_WARN};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 284, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 284, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_114) {
        __Pyx_GIVEREF(__pyx_t_114); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_114); __pyx_t_114 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_117, __pyx_t_3);
      __Pyx_INCREF(__pyx_n_s_TD_HEART_BEAT_WARN);
      __Pyx_GIVEREF(__pyx_n_s_TD_HEART_BEAT_WARN);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_117, __pyx_n_s_TD_HEART_BEAT_WARN);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 284, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 284, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_HEART_BEAT_WARN, __pyx_t_1) < 0)) __PYX_ERR(1, 284, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":285
 *     __Pyx_globals['TD_FRONT_DISCONNECTED'] = TD_CALLBACK_TYPE(TD_FRONT_DISCONNECTED, 'TD_FRONT_DISCONNECTED')
 *     __Pyx_globals['TD_HEART_BEAT_WARN'] = TD_CALLBACK_TYPE(TD_HEART_BEAT_WARN, 'TD_HEART_BEAT_WARN')
 *     __Pyx_globals['TD_RSP_AUTH'] = TD_CALLBACK_TYPE(TD_RSP_AUTH, 'TD_RSP_AUTH')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_USER_LOGIN'] = TD_CALLBACK_TYPE(TD_RSP_USER_LOGIN, 'TD_RSP_USER_LOGIN')
 *     __Pyx_globals['TD_RSP_USER_LOGOUT'] = TD_CALLBACK_TYPE(TD_RSP_USER_LOGOUT, 'TD_RSP_USER_LOGOUT')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 285, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_AUTH); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 285, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RSP_AUTH};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 285, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RSP_AUTH};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 285, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_114 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 285, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_114);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_114, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_114, 0+__pyx_t_117, __pyx_t_2);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_AUTH);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_AUTH);
      PyTuple_SET_ITEM(__pyx_t_114, 1+__pyx_t_117, __pyx_n_s_TD_RSP_AUTH);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_114, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 285, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 285, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_AUTH, __pyx_t_1) < 0)) __PYX_ERR(1, 285, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":286
 *     __Pyx_globals['TD_HEART_BEAT_WARN'] = TD_CALLBACK_TYPE(TD_HEART_BEAT_WARN, 'TD_HEART_BEAT_WARN')
 *     __Pyx_globals['TD_RSP_AUTH'] = TD_CALLBACK_TYPE(TD_RSP_AUTH, 'TD_RSP_AUTH')
 *     __Pyx_globals['TD_RSP_USER_LOGIN'] = TD_CALLBACK_TYPE(TD_RSP_USER_LOGIN, 'TD_RSP_USER_LOGIN')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_USER_LOGOUT'] = TD_CALLBACK_TYPE(TD_RSP_USER_LOGOUT, 'TD_RSP_USER_LOGOUT')
 *     __Pyx_globals['TD_RSP_PWD_UPDATE'] = TD_CALLBACK_TYPE(TD_RSP_PWD_UPDATE, 'TD_RSP_PWD_UPDATE')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 286, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_114 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_USER_LOGIN); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 286, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_114);
    __pyx_t_2 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RSP_USER_LOGIN};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 286, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RSP_USER_LOGIN};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 286, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 286, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_114);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_117, __pyx_t_114);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_USER_LOGIN);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_USER_LOGIN);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_117, __pyx_n_s_TD_RSP_USER_LOGIN);
      __pyx_t_114 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 286, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 286, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_USER_LOGIN, __pyx_t_1) < 0)) __PYX_ERR(1, 286, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":287
 *     __Pyx_globals['TD_RSP_AUTH'] = TD_CALLBACK_TYPE(TD_RSP_AUTH, 'TD_RSP_AUTH')
 *     __Pyx_globals['TD_RSP_USER_LOGIN'] = TD_CALLBACK_TYPE(TD_RSP_USER_LOGIN, 'TD_RSP_USER_LOGIN')
 *     __Pyx_globals['TD_RSP_USER_LOGOUT'] = TD_CALLBACK_TYPE(TD_RSP_USER_LOGOUT, 'TD_RSP_USER_LOGOUT')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_PWD_UPDATE'] = TD_CALLBACK_TYPE(TD_RSP_PWD_UPDATE, 'TD_RSP_PWD_UPDATE')
 *     __Pyx_globals['TD_RSP_TRADING_PWD_UPDATE'] = TD_CALLBACK_TYPE(TD_RSP_TRADING_PWD_UPDATE, 'TD_RSP_TRADING_PWD_UPDATE')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 287, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_3 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_USER_LOGOUT); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 287, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_114 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_114 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_114)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_114);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RSP_USER_LOGOUT};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 287, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RSP_USER_LOGOUT};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 287, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 287, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_114) {
        __Pyx_GIVEREF(__pyx_t_114); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_114); __pyx_t_114 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_117, __pyx_t_3);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_USER_LOGOUT);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_USER_LOGOUT);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_117, __pyx_n_s_TD_RSP_USER_LOGOUT);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 287, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 287, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_USER_LOGOUT, __pyx_t_1) < 0)) __PYX_ERR(1, 287, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":288
 *     __Pyx_globals['TD_RSP_USER_LOGIN'] = TD_CALLBACK_TYPE(TD_RSP_USER_LOGIN, 'TD_RSP_USER_LOGIN')
 *     __Pyx_globals['TD_RSP_USER_LOGOUT'] = TD_CALLBACK_TYPE(TD_RSP_USER_LOGOUT, 'TD_RSP_USER_LOGOUT')
 *     __Pyx_globals['TD_RSP_PWD_UPDATE'] = TD_CALLBACK_TYPE(TD_RSP_PWD_UPDATE, 'TD_RSP_PWD_UPDATE')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_TRADING_PWD_UPDATE'] = TD_CALLBACK_TYPE(TD_RSP_TRADING_PWD_UPDATE, 'TD_RSP_TRADING_PWD_UPDATE')
 *     __Pyx_globals['TD_RSP_ORDER_INSERT'] = TD_CALLBACK_TYPE(TD_RSP_ORDER_INSERT, 'TD_RSP_ORDER_INSERT')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 288, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_PWD_UPDATE); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 288, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RSP_PWD_UPDATE};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 288, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RSP_PWD_UPDATE};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 288, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_114 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 288, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_114);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_114, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_114, 0+__pyx_t_117, __pyx_t_2);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_PWD_UPDATE);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_PWD_UPDATE);
      PyTuple_SET_ITEM(__pyx_t_114, 1+__pyx_t_117, __pyx_n_s_TD_RSP_PWD_UPDATE);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_114, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 288, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 288, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_PWD_UPDATE, __pyx_t_1) < 0)) __PYX_ERR(1, 288, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":289
 *     __Pyx_globals['TD_RSP_USER_LOGOUT'] = TD_CALLBACK_TYPE(TD_RSP_USER_LOGOUT, 'TD_RSP_USER_LOGOUT')
 *     __Pyx_globals['TD_RSP_PWD_UPDATE'] = TD_CALLBACK_TYPE(TD_RSP_PWD_UPDATE, 'TD_RSP_PWD_UPDATE')
 *     __Pyx_globals['TD_RSP_TRADING_PWD_UPDATE'] = TD_CALLBACK_TYPE(TD_RSP_TRADING_PWD_UPDATE, 'TD_RSP_TRADING_PWD_UPDATE')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_ORDER_INSERT'] = TD_CALLBACK_TYPE(TD_RSP_ORDER_INSERT, 'TD_RSP_ORDER_INSERT')
 *     __Pyx_globals['TD_RSP_PACK_ORDER_INSERT'] = TD_CALLBACK_TYPE(TD_RSP_PACK_ORDER_INSERT, 'TD_RSP_PACK_ORDER_INSERT')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_114 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_TRADING_PWD_UPDATE); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_114);
    __pyx_t_2 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RSP_TRADING_PWD_UPDATE};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 289, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RSP_TRADING_PWD_UPDATE};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 289, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 289, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_114);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_117, __pyx_t_114);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_TRADING_PWD_UPDATE);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_TRADING_PWD_UPDATE);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_117, __pyx_n_s_TD_RSP_TRADING_PWD_UPDATE);
      __pyx_t_114 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 289, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 289, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_TRADING_PWD_UPDATE, __pyx_t_1) < 0)) __PYX_ERR(1, 289, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":290
 *     __Pyx_globals['TD_RSP_PWD_UPDATE'] = TD_CALLBACK_TYPE(TD_RSP_PWD_UPDATE, 'TD_RSP_PWD_UPDATE')
 *     __Pyx_globals['TD_RSP_TRADING_PWD_UPDATE'] = TD_CALLBACK_TYPE(TD_RSP_TRADING_PWD_UPDATE, 'TD_RSP_TRADING_PWD_UPDATE')
 *     __Pyx_globals['TD_RSP_ORDER_INSERT'] = TD_CALLBACK_TYPE(TD_RSP_ORDER_INSERT, 'TD_RSP_ORDER_INSERT')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_PACK_ORDER_INSERT'] = TD_CALLBACK_TYPE(TD_RSP_PACK_ORDER_INSERT, 'TD_RSP_PACK_ORDER_INSERT')
 *     __Pyx_globals['TD_RSP_PACK_ORDER_ACTION'] = TD_CALLBACK_TYPE(TD_RSP_PACK_ORDER_ACTION, 'TD_RSP_PACK_ORDER_ACTION')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 290, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_3 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_ORDER_INSERT); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 290, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_114 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_114 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_114)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_114);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RSP_ORDER_INSERT};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 290, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RSP_ORDER_INSERT};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 290, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 290, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_114) {
        __Pyx_GIVEREF(__pyx_t_114); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_114); __pyx_t_114 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_117, __pyx_t_3);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_ORDER_INSERT);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_ORDER_INSERT);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_117, __pyx_n_s_TD_RSP_ORDER_INSERT);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 290, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 290, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_ORDER_INSERT, __pyx_t_1) < 0)) __PYX_ERR(1, 290, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":291
 *     __Pyx_globals['TD_RSP_TRADING_PWD_UPDATE'] = TD_CALLBACK_TYPE(TD_RSP_TRADING_PWD_UPDATE, 'TD_RSP_TRADING_PWD_UPDATE')
 *     __Pyx_globals['TD_RSP_ORDER_INSERT'] = TD_CALLBACK_TYPE(TD_RSP_ORDER_INSERT, 'TD_RSP_ORDER_INSERT')
 *     __Pyx_globals['TD_RSP_PACK_ORDER_INSERT'] = TD_CALLBACK_TYPE(TD_RSP_PACK_ORDER_INSERT, 'TD_RSP_PACK_ORDER_INSERT')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_PACK_ORDER_ACTION'] = TD_CALLBACK_TYPE(TD_RSP_PACK_ORDER_ACTION, 'TD_RSP_PACK_ORDER_ACTION')
 *     __Pyx_globals['TD_RSP_ORDER_ACTION'] = TD_CALLBACK_TYPE(TD_RSP_ORDER_ACTION, 'TD_RSP_ORDER_ACTION')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 291, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_PACK_ORDER_INSERT); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 291, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RSP_PACK_ORDER_INSERT};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 291, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RSP_PACK_ORDER_INSERT};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 291, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_114 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 291, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_114);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_114, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_114, 0+__pyx_t_117, __pyx_t_2);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_PACK_ORDER_INSERT);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_PACK_ORDER_INSERT);
      PyTuple_SET_ITEM(__pyx_t_114, 1+__pyx_t_117, __pyx_n_s_TD_RSP_PACK_ORDER_INSERT);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_114, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 291, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 291, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_PACK_ORDER_INSERT, __pyx_t_1) < 0)) __PYX_ERR(1, 291, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":292
 *     __Pyx_globals['TD_RSP_ORDER_INSERT'] = TD_CALLBACK_TYPE(TD_RSP_ORDER_INSERT, 'TD_RSP_ORDER_INSERT')
 *     __Pyx_globals['TD_RSP_PACK_ORDER_INSERT'] = TD_CALLBACK_TYPE(TD_RSP_PACK_ORDER_INSERT, 'TD_RSP_PACK_ORDER_INSERT')
 *     __Pyx_globals['TD_RSP_PACK_ORDER_ACTION'] = TD_CALLBACK_TYPE(TD_RSP_PACK_ORDER_ACTION, 'TD_RSP_PACK_ORDER_ACTION')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_ORDER_ACTION'] = TD_CALLBACK_TYPE(TD_RSP_ORDER_ACTION, 'TD_RSP_ORDER_ACTION')
 *     __Pyx_globals['TD_RSP_QRY_MAX_ORDER_VOLUME'] = TD_CALLBACK_TYPE(TD_RSP_QRY_MAX_ORDER_VOLUME, 'TD_RSP_QRY_MAX_ORDER_VOLUME')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 292, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_114 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_PACK_ORDER_ACTION); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 292, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_114);
    __pyx_t_2 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RSP_PACK_ORDER_ACTION};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 292, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RSP_PACK_ORDER_ACTION};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 292, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 292, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_114);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_117, __pyx_t_114);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_PACK_ORDER_ACTION);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_PACK_ORDER_ACTION);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_117, __pyx_n_s_TD_RSP_PACK_ORDER_ACTION);
      __pyx_t_114 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 292, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 292, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_PACK_ORDER_ACTION, __pyx_t_1) < 0)) __PYX_ERR(1, 292, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":293
 *     __Pyx_globals['TD_RSP_PACK_ORDER_INSERT'] = TD_CALLBACK_TYPE(TD_RSP_PACK_ORDER_INSERT, 'TD_RSP_PACK_ORDER_INSERT')
 *     __Pyx_globals['TD_RSP_PACK_ORDER_ACTION'] = TD_CALLBACK_TYPE(TD_RSP_PACK_ORDER_ACTION, 'TD_RSP_PACK_ORDER_ACTION')
 *     __Pyx_globals['TD_RSP_ORDER_ACTION'] = TD_CALLBACK_TYPE(TD_RSP_ORDER_ACTION, 'TD_RSP_ORDER_ACTION')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_MAX_ORDER_VOLUME'] = TD_CALLBACK_TYPE(TD_RSP_QRY_MAX_ORDER_VOLUME, 'TD_RSP_QRY_MAX_ORDER_VOLUME')
 *     __Pyx_globals['TD_RSP_SETTLE_INFO_CONFIRM'] = TD_CALLBACK_TYPE(TD_RSP_SETTLE_INFO_CONFIRM, 'TD_RSP_SETTLE_INFO_CONFIRM')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 293, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_3 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_ORDER_ACTION); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 293, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_114 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_114 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_114)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_114);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RSP_ORDER_ACTION};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 293, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RSP_ORDER_ACTION};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 293, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 293, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_114) {
        __Pyx_GIVEREF(__pyx_t_114); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_114); __pyx_t_114 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_117, __pyx_t_3);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_ORDER_ACTION);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_ORDER_ACTION);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_117, __pyx_n_s_TD_RSP_ORDER_ACTION);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 293, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 293, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_ORDER_ACTION, __pyx_t_1) < 0)) __PYX_ERR(1, 293, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":294
 *     __Pyx_globals['TD_RSP_PACK_ORDER_ACTION'] = TD_CALLBACK_TYPE(TD_RSP_PACK_ORDER_ACTION, 'TD_RSP_PACK_ORDER_ACTION')
 *     __Pyx_globals['TD_RSP_ORDER_ACTION'] = TD_CALLBACK_TYPE(TD_RSP_ORDER_ACTION, 'TD_RSP_ORDER_ACTION')
 *     __Pyx_globals['TD_RSP_QRY_MAX_ORDER_VOLUME'] = TD_CALLBACK_TYPE(TD_RSP_QRY_MAX_ORDER_VOLUME, 'TD_RSP_QRY_MAX_ORDER_VOLUME')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_SETTLE_INFO_CONFIRM'] = TD_CALLBACK_TYPE(TD_RSP_SETTLE_INFO_CONFIRM, 'TD_RSP_SETTLE_INFO_CONFIRM')
 *     __Pyx_globals['TD_RSP_REMOVE_PACK'] = TD_CALLBACK_TYPE(TD_RSP_REMOVE_PACK, 'TD_RSP_REMOVE_PACK')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 294, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_MAX_ORDER_VOLUME); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 294, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RSP_QRY_MAX_ORDER_VOLUME};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 294, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RSP_QRY_MAX_ORDER_VOLUME};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 294, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_114 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 294, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_114);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_114, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_114, 0+__pyx_t_117, __pyx_t_2);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_MAX_ORDER_VOLUME);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_MAX_ORDER_VOLUME);
      PyTuple_SET_ITEM(__pyx_t_114, 1+__pyx_t_117, __pyx_n_s_TD_RSP_QRY_MAX_ORDER_VOLUME);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_114, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 294, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 294, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_MAX_ORDER_VOLUME, __pyx_t_1) < 0)) __PYX_ERR(1, 294, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":295
 *     __Pyx_globals['TD_RSP_ORDER_ACTION'] = TD_CALLBACK_TYPE(TD_RSP_ORDER_ACTION, 'TD_RSP_ORDER_ACTION')
 *     __Pyx_globals['TD_RSP_QRY_MAX_ORDER_VOLUME'] = TD_CALLBACK_TYPE(TD_RSP_QRY_MAX_ORDER_VOLUME, 'TD_RSP_QRY_MAX_ORDER_VOLUME')
 *     __Pyx_globals['TD_RSP_SETTLE_INFO_CONFIRM'] = TD_CALLBACK_TYPE(TD_RSP_SETTLE_INFO_CONFIRM, 'TD_RSP_SETTLE_INFO_CONFIRM')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_REMOVE_PACK'] = TD_CALLBACK_TYPE(TD_RSP_REMOVE_PACK, 'TD_RSP_REMOVE_PACK')
 *     __Pyx_globals['TD_RSP_REMOVE_PACK_ACTION'] = TD_CALLBACK_TYPE(TD_RSP_REMOVE_PACK_ACTION, 'TD_RSP_REMOVE_PACK_ACTION')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 295, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_114 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_SETTLE_INFO_CONFIRM); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 295, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_114);
    __pyx_t_2 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RSP_SETTLE_INFO_CONFIRM};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 295, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RSP_SETTLE_INFO_CONFIRM};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 295, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 295, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_114);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_117, __pyx_t_114);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_SETTLE_INFO_CONFIRM);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_SETTLE_INFO_CONFIRM);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_117, __pyx_n_s_TD_RSP_SETTLE_INFO_CONFIRM);
      __pyx_t_114 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 295, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 295, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_SETTLE_INFO_CONFIRM, __pyx_t_1) < 0)) __PYX_ERR(1, 295, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":296
 *     __Pyx_globals['TD_RSP_QRY_MAX_ORDER_VOLUME'] = TD_CALLBACK_TYPE(TD_RSP_QRY_MAX_ORDER_VOLUME, 'TD_RSP_QRY_MAX_ORDER_VOLUME')
 *     __Pyx_globals['TD_RSP_SETTLE_INFO_CONFIRM'] = TD_CALLBACK_TYPE(TD_RSP_SETTLE_INFO_CONFIRM, 'TD_RSP_SETTLE_INFO_CONFIRM')
 *     __Pyx_globals['TD_RSP_REMOVE_PACK'] = TD_CALLBACK_TYPE(TD_RSP_REMOVE_PACK, 'TD_RSP_REMOVE_PACK')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_REMOVE_PACK_ACTION'] = TD_CALLBACK_TYPE(TD_RSP_REMOVE_PACK_ACTION, 'TD_RSP_REMOVE_PACK_ACTION')
 *     __Pyx_globals['TD_RSP_EXEC_ORDER_INSERT'] = TD_CALLBACK_TYPE(TD_RSP_EXEC_ORDER_INSERT, 'TD_RSP_EXEC_ORDER_INSERT')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 296, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_3 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_REMOVE_PACK); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 296, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_114 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_114 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_114)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_114);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RSP_REMOVE_PACK};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 296, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RSP_REMOVE_PACK};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 296, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 296, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_114) {
        __Pyx_GIVEREF(__pyx_t_114); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_114); __pyx_t_114 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_117, __pyx_t_3);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_REMOVE_PACK);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_REMOVE_PACK);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_117, __pyx_n_s_TD_RSP_REMOVE_PACK);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 296, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 296, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_REMOVE_PACK, __pyx_t_1) < 0)) __PYX_ERR(1, 296, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":297
 *     __Pyx_globals['TD_RSP_SETTLE_INFO_CONFIRM'] = TD_CALLBACK_TYPE(TD_RSP_SETTLE_INFO_CONFIRM, 'TD_RSP_SETTLE_INFO_CONFIRM')
 *     __Pyx_globals['TD_RSP_REMOVE_PACK'] = TD_CALLBACK_TYPE(TD_RSP_REMOVE_PACK, 'TD_RSP_REMOVE_PACK')
 *     __Pyx_globals['TD_RSP_REMOVE_PACK_ACTION'] = TD_CALLBACK_TYPE(TD_RSP_REMOVE_PACK_ACTION, 'TD_RSP_REMOVE_PACK_ACTION')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_EXEC_ORDER_INSERT'] = TD_CALLBACK_TYPE(TD_RSP_EXEC_ORDER_INSERT, 'TD_RSP_EXEC_ORDER_INSERT')
 *     __Pyx_globals['TD_RSP_EXEC_ORDER_ACTION'] = TD_CALLBACK_TYPE(TD_RSP_EXEC_ORDER_ACTION, 'TD_RSP_EXEC_ORDER_ACTION')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 297, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_REMOVE_PACK_ACTION); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 297, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RSP_REMOVE_PACK_ACTION};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 297, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RSP_REMOVE_PACK_ACTION};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 297, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_114 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 297, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_114);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_114, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_114, 0+__pyx_t_117, __pyx_t_2);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_REMOVE_PACK_ACTION);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_REMOVE_PACK_ACTION);
      PyTuple_SET_ITEM(__pyx_t_114, 1+__pyx_t_117, __pyx_n_s_TD_RSP_REMOVE_PACK_ACTION);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_114, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 297, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 297, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_REMOVE_PACK_ACTION, __pyx_t_1) < 0)) __PYX_ERR(1, 297, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":298
 *     __Pyx_globals['TD_RSP_REMOVE_PACK'] = TD_CALLBACK_TYPE(TD_RSP_REMOVE_PACK, 'TD_RSP_REMOVE_PACK')
 *     __Pyx_globals['TD_RSP_REMOVE_PACK_ACTION'] = TD_CALLBACK_TYPE(TD_RSP_REMOVE_PACK_ACTION, 'TD_RSP_REMOVE_PACK_ACTION')
 *     __Pyx_globals['TD_RSP_EXEC_ORDER_INSERT'] = TD_CALLBACK_TYPE(TD_RSP_EXEC_ORDER_INSERT, 'TD_RSP_EXEC_ORDER_INSERT')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_EXEC_ORDER_ACTION'] = TD_CALLBACK_TYPE(TD_RSP_EXEC_ORDER_ACTION, 'TD_RSP_EXEC_ORDER_ACTION')
 *     __Pyx_globals['TD_RSP_FOR_QUOTE_INSERT'] = TD_CALLBACK_TYPE(TD_RSP_FOR_QUOTE_INSERT, 'TD_RSP_FOR_QUOTE_INSERT')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 298, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_114 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_EXEC_ORDER_INSERT); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 298, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_114);
    __pyx_t_2 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RSP_EXEC_ORDER_INSERT};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 298, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RSP_EXEC_ORDER_INSERT};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 298, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 298, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_114);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_117, __pyx_t_114);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_EXEC_ORDER_INSERT);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_EXEC_ORDER_INSERT);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_117, __pyx_n_s_TD_RSP_EXEC_ORDER_INSERT);
      __pyx_t_114 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 298, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 298, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_EXEC_ORDER_INSERT, __pyx_t_1) < 0)) __PYX_ERR(1, 298, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":299
 *     __Pyx_globals['TD_RSP_REMOVE_PACK_ACTION'] = TD_CALLBACK_TYPE(TD_RSP_REMOVE_PACK_ACTION, 'TD_RSP_REMOVE_PACK_ACTION')
 *     __Pyx_globals['TD_RSP_EXEC_ORDER_INSERT'] = TD_CALLBACK_TYPE(TD_RSP_EXEC_ORDER_INSERT, 'TD_RSP_EXEC_ORDER_INSERT')
 *     __Pyx_globals['TD_RSP_EXEC_ORDER_ACTION'] = TD_CALLBACK_TYPE(TD_RSP_EXEC_ORDER_ACTION, 'TD_RSP_EXEC_ORDER_ACTION')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_FOR_QUOTE_INSERT'] = TD_CALLBACK_TYPE(TD_RSP_FOR_QUOTE_INSERT, 'TD_RSP_FOR_QUOTE_INSERT')
 *     __Pyx_globals['TD_RSP_QUOTE_INSERT'] = TD_CALLBACK_TYPE(TD_RSP_QUOTE_INSERT, 'TD_RSP_QUOTE_INSERT')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 299, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_3 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_EXEC_ORDER_ACTION); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 299, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_114 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_114 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_114)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_114);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RSP_EXEC_ORDER_ACTION};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 299, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RSP_EXEC_ORDER_ACTION};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 299, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 299, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_114) {
        __Pyx_GIVEREF(__pyx_t_114); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_114); __pyx_t_114 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_117, __pyx_t_3);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_EXEC_ORDER_ACTION);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_EXEC_ORDER_ACTION);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_117, __pyx_n_s_TD_RSP_EXEC_ORDER_ACTION);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 299, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 299, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_EXEC_ORDER_ACTION, __pyx_t_1) < 0)) __PYX_ERR(1, 299, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":300
 *     __Pyx_globals['TD_RSP_EXEC_ORDER_INSERT'] = TD_CALLBACK_TYPE(TD_RSP_EXEC_ORDER_INSERT, 'TD_RSP_EXEC_ORDER_INSERT')
 *     __Pyx_globals['TD_RSP_EXEC_ORDER_ACTION'] = TD_CALLBACK_TYPE(TD_RSP_EXEC_ORDER_ACTION, 'TD_RSP_EXEC_ORDER_ACTION')
 *     __Pyx_globals['TD_RSP_FOR_QUOTE_INSERT'] = TD_CALLBACK_TYPE(TD_RSP_FOR_QUOTE_INSERT, 'TD_RSP_FOR_QUOTE_INSERT')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QUOTE_INSERT'] = TD_CALLBACK_TYPE(TD_RSP_QUOTE_INSERT, 'TD_RSP_QUOTE_INSERT')
 *     __Pyx_globals['TD_RSP_QUOTE_ACTION'] = TD_CALLBACK_TYPE(TD_RSP_QUOTE_ACTION, 'TD_RSP_QUOTE_ACTION')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 300, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_FOR_QUOTE_INSERT); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 300, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RSP_FOR_QUOTE_INSERT};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 300, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RSP_FOR_QUOTE_INSERT};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 300, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_114 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 300, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_114);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_114, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_114, 0+__pyx_t_117, __pyx_t_2);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_FOR_QUOTE_INSERT);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_FOR_QUOTE_INSERT);
      PyTuple_SET_ITEM(__pyx_t_114, 1+__pyx_t_117, __pyx_n_s_TD_RSP_FOR_QUOTE_INSERT);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_114, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 300, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 300, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_FOR_QUOTE_INSERT, __pyx_t_1) < 0)) __PYX_ERR(1, 300, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":301
 *     __Pyx_globals['TD_RSP_EXEC_ORDER_ACTION'] = TD_CALLBACK_TYPE(TD_RSP_EXEC_ORDER_ACTION, 'TD_RSP_EXEC_ORDER_ACTION')
 *     __Pyx_globals['TD_RSP_FOR_QUOTE_INSERT'] = TD_CALLBACK_TYPE(TD_RSP_FOR_QUOTE_INSERT, 'TD_RSP_FOR_QUOTE_INSERT')
 *     __Pyx_globals['TD_RSP_QUOTE_INSERT'] = TD_CALLBACK_TYPE(TD_RSP_QUOTE_INSERT, 'TD_RSP_QUOTE_INSERT')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QUOTE_ACTION'] = TD_CALLBACK_TYPE(TD_RSP_QUOTE_ACTION, 'TD_RSP_QUOTE_ACTION')
 *     __Pyx_globals['TD_RSP_BATCH_ORDER_ACTION'] = TD_CALLBACK_TYPE(TD_RSP_BATCH_ORDER_ACTION, 'TD_RSP_BATCH_ORDER_ACTION')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 301, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_114 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QUOTE_INSERT); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 301, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_114);
    __pyx_t_2 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RSP_QUOTE_INSERT};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 301, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RSP_QUOTE_INSERT};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 301, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 301, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_114);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_117, __pyx_t_114);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_QUOTE_INSERT);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QUOTE_INSERT);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_117, __pyx_n_s_TD_RSP_QUOTE_INSERT);
      __pyx_t_114 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 301, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 301, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QUOTE_INSERT, __pyx_t_1) < 0)) __PYX_ERR(1, 301, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":302
 *     __Pyx_globals['TD_RSP_FOR_QUOTE_INSERT'] = TD_CALLBACK_TYPE(TD_RSP_FOR_QUOTE_INSERT, 'TD_RSP_FOR_QUOTE_INSERT')
 *     __Pyx_globals['TD_RSP_QUOTE_INSERT'] = TD_CALLBACK_TYPE(TD_RSP_QUOTE_INSERT, 'TD_RSP_QUOTE_INSERT')
 *     __Pyx_globals['TD_RSP_QUOTE_ACTION'] = TD_CALLBACK_TYPE(TD_RSP_QUOTE_ACTION, 'TD_RSP_QUOTE_ACTION')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_BATCH_ORDER_ACTION'] = TD_CALLBACK_TYPE(TD_RSP_BATCH_ORDER_ACTION, 'TD_RSP_BATCH_ORDER_ACTION')
 *     __Pyx_globals['TD_RSP_COMB_ACTION_INSERT'] = TD_CALLBACK_TYPE(TD_RSP_COMB_ACTION_INSERT, 'TD_RSP_COMB_ACTION_INSERT')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 302, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_3 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QUOTE_ACTION); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 302, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_114 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_114 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_114)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_114);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RSP_QUOTE_ACTION};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 302, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RSP_QUOTE_ACTION};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 302, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 302, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_114) {
        __Pyx_GIVEREF(__pyx_t_114); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_114); __pyx_t_114 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_117, __pyx_t_3);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_QUOTE_ACTION);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QUOTE_ACTION);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_117, __pyx_n_s_TD_RSP_QUOTE_ACTION);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 302, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 302, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QUOTE_ACTION, __pyx_t_1) < 0)) __PYX_ERR(1, 302, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":303
 *     __Pyx_globals['TD_RSP_QUOTE_INSERT'] = TD_CALLBACK_TYPE(TD_RSP_QUOTE_INSERT, 'TD_RSP_QUOTE_INSERT')
 *     __Pyx_globals['TD_RSP_QUOTE_ACTION'] = TD_CALLBACK_TYPE(TD_RSP_QUOTE_ACTION, 'TD_RSP_QUOTE_ACTION')
 *     __Pyx_globals['TD_RSP_BATCH_ORDER_ACTION'] = TD_CALLBACK_TYPE(TD_RSP_BATCH_ORDER_ACTION, 'TD_RSP_BATCH_ORDER_ACTION')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_COMB_ACTION_INSERT'] = TD_CALLBACK_TYPE(TD_RSP_COMB_ACTION_INSERT, 'TD_RSP_COMB_ACTION_INSERT')
 *     __Pyx_globals['TD_RSP_QRY_ORDER'] = TD_CALLBACK_TYPE(TD_RSP_QRY_ORDER, 'TD_RSP_QRY_ORDER')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 303, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_BATCH_ORDER_ACTION); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 303, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RSP_BATCH_ORDER_ACTION};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 303, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RSP_BATCH_ORDER_ACTION};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 303, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_114 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 303, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_114);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_114, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_114, 0+__pyx_t_117, __pyx_t_2);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_BATCH_ORDER_ACTION);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_BATCH_ORDER_ACTION);
      PyTuple_SET_ITEM(__pyx_t_114, 1+__pyx_t_117, __pyx_n_s_TD_RSP_BATCH_ORDER_ACTION);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_114, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 303, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 303, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_BATCH_ORDER_ACTION, __pyx_t_1) < 0)) __PYX_ERR(1, 303, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":304
 *     __Pyx_globals['TD_RSP_QUOTE_ACTION'] = TD_CALLBACK_TYPE(TD_RSP_QUOTE_ACTION, 'TD_RSP_QUOTE_ACTION')
 *     __Pyx_globals['TD_RSP_BATCH_ORDER_ACTION'] = TD_CALLBACK_TYPE(TD_RSP_BATCH_ORDER_ACTION, 'TD_RSP_BATCH_ORDER_ACTION')
 *     __Pyx_globals['TD_RSP_COMB_ACTION_INSERT'] = TD_CALLBACK_TYPE(TD_RSP_COMB_ACTION_INSERT, 'TD_RSP_COMB_ACTION_INSERT')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_ORDER'] = TD_CALLBACK_TYPE(TD_RSP_QRY_ORDER, 'TD_RSP_QRY_ORDER')
 *     __Pyx_globals['TD_RSP_QRY_TRADE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_TRADE, 'TD_RSP_QRY_TRADE')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 304, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_114 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_COMB_ACTION_INSERT); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 304, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_114);
    __pyx_t_2 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RSP_COMB_ACTION_INSERT};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 304, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RSP_COMB_ACTION_INSERT};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 304, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 304, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_114);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_117, __pyx_t_114);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_COMB_ACTION_INSERT);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_COMB_ACTION_INSERT);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_117, __pyx_n_s_TD_RSP_COMB_ACTION_INSERT);
      __pyx_t_114 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 304, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 304, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_COMB_ACTION_INSERT, __pyx_t_1) < 0)) __PYX_ERR(1, 304, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":305
 *     __Pyx_globals['TD_RSP_BATCH_ORDER_ACTION'] = TD_CALLBACK_TYPE(TD_RSP_BATCH_ORDER_ACTION, 'TD_RSP_BATCH_ORDER_ACTION')
 *     __Pyx_globals['TD_RSP_COMB_ACTION_INSERT'] = TD_CALLBACK_TYPE(TD_RSP_COMB_ACTION_INSERT, 'TD_RSP_COMB_ACTION_INSERT')
 *     __Pyx_globals['TD_RSP_QRY_ORDER'] = TD_CALLBACK_TYPE(TD_RSP_QRY_ORDER, 'TD_RSP_QRY_ORDER')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_TRADE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_TRADE, 'TD_RSP_QRY_TRADE')
 *     __Pyx_globals['TD_RSP_QRY_INVESTOR_POS'] = TD_CALLBACK_TYPE(TD_RSP_QRY_INVESTOR_POS, 'TD_RSP_QRY_INVESTOR_POS')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 305, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_3 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_ORDER); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 305, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_114 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_114 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_114)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_114);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RSP_QRY_ORDER};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 305, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RSP_QRY_ORDER};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 305, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 305, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_114) {
        __Pyx_GIVEREF(__pyx_t_114); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_114); __pyx_t_114 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_117, __pyx_t_3);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_ORDER);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_ORDER);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_117, __pyx_n_s_TD_RSP_QRY_ORDER);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 305, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 305, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_ORDER, __pyx_t_1) < 0)) __PYX_ERR(1, 305, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":306
 *     __Pyx_globals['TD_RSP_COMB_ACTION_INSERT'] = TD_CALLBACK_TYPE(TD_RSP_COMB_ACTION_INSERT, 'TD_RSP_COMB_ACTION_INSERT')
 *     __Pyx_globals['TD_RSP_QRY_ORDER'] = TD_CALLBACK_TYPE(TD_RSP_QRY_ORDER, 'TD_RSP_QRY_ORDER')
 *     __Pyx_globals['TD_RSP_QRY_TRADE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_TRADE, 'TD_RSP_QRY_TRADE')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_INVESTOR_POS'] = TD_CALLBACK_TYPE(TD_RSP_QRY_INVESTOR_POS, 'TD_RSP_QRY_INVESTOR_POS')
 *     __Pyx_globals['TD_RSP_QRY_TRADING_ACCOUNT'] = TD_CALLBACK_TYPE(TD_RSP_QRY_TRADING_ACCOUNT, 'TD_RSP_QRY_TRADING_ACCOUNT')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 306, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_TRADE); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 306, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RSP_QRY_TRADE};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 306, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RSP_QRY_TRADE};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 306, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_114 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 306, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_114);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_114, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_114, 0+__pyx_t_117, __pyx_t_2);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_TRADE);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_TRADE);
      PyTuple_SET_ITEM(__pyx_t_114, 1+__pyx_t_117, __pyx_n_s_TD_RSP_QRY_TRADE);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_114, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 306, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 306, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_TRADE, __pyx_t_1) < 0)) __PYX_ERR(1, 306, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":307
 *     __Pyx_globals['TD_RSP_QRY_ORDER'] = TD_CALLBACK_TYPE(TD_RSP_QRY_ORDER, 'TD_RSP_QRY_ORDER')
 *     __Pyx_globals['TD_RSP_QRY_TRADE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_TRADE, 'TD_RSP_QRY_TRADE')
 *     __Pyx_globals['TD_RSP_QRY_INVESTOR_POS'] = TD_CALLBACK_TYPE(TD_RSP_QRY_INVESTOR_POS, 'TD_RSP_QRY_INVESTOR_POS')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_TRADING_ACCOUNT'] = TD_CALLBACK_TYPE(TD_RSP_QRY_TRADING_ACCOUNT, 'TD_RSP_QRY_TRADING_ACCOUNT')
 *     __Pyx_globals['TD_RSP_QRY_INVESTOR'] = TD_CALLBACK_TYPE(TD_RSP_QRY_INVESTOR, 'TD_RSP_QRY_INVESTOR')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 307, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_114 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_INVESTOR_POS); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 307, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_114);
    __pyx_t_2 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RSP_QRY_INVESTOR_POS};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 307, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RSP_QRY_INVESTOR_POS};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 307, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 307, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_114);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_117, __pyx_t_114);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_INVESTOR_POS);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_INVESTOR_POS);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_117, __pyx_n_s_TD_RSP_QRY_INVESTOR_POS);
      __pyx_t_114 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 307, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 307, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_INVESTOR_POS, __pyx_t_1) < 0)) __PYX_ERR(1, 307, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":308
 *     __Pyx_globals['TD_RSP_QRY_TRADE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_TRADE, 'TD_RSP_QRY_TRADE')
 *     __Pyx_globals['TD_RSP_QRY_INVESTOR_POS'] = TD_CALLBACK_TYPE(TD_RSP_QRY_INVESTOR_POS, 'TD_RSP_QRY_INVESTOR_POS')
 *     __Pyx_globals['TD_RSP_QRY_TRADING_ACCOUNT'] = TD_CALLBACK_TYPE(TD_RSP_QRY_TRADING_ACCOUNT, 'TD_RSP_QRY_TRADING_ACCOUNT')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_INVESTOR'] = TD_CALLBACK_TYPE(TD_RSP_QRY_INVESTOR, 'TD_RSP_QRY_INVESTOR')
 *     __Pyx_globals['TD_RSP_QRY_TRADING_CODE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_TRADING_CODE, 'TD_RSP_QRY_TRADING_CODE')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 308, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_3 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_TRADING_ACCOUNT); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 308, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_114 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_114 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_114)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_114);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RSP_QRY_TRADING_ACCOUNT};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 308, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RSP_QRY_TRADING_ACCOUNT};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 308, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 308, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_114) {
        __Pyx_GIVEREF(__pyx_t_114); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_114); __pyx_t_114 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_117, __pyx_t_3);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_TRADING_ACCOUNT);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_TRADING_ACCOUNT);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_117, __pyx_n_s_TD_RSP_QRY_TRADING_ACCOUNT);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 308, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 308, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_TRADING_ACCOUNT, __pyx_t_1) < 0)) __PYX_ERR(1, 308, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":309
 *     __Pyx_globals['TD_RSP_QRY_INVESTOR_POS'] = TD_CALLBACK_TYPE(TD_RSP_QRY_INVESTOR_POS, 'TD_RSP_QRY_INVESTOR_POS')
 *     __Pyx_globals['TD_RSP_QRY_TRADING_ACCOUNT'] = TD_CALLBACK_TYPE(TD_RSP_QRY_TRADING_ACCOUNT, 'TD_RSP_QRY_TRADING_ACCOUNT')
 *     __Pyx_globals['TD_RSP_QRY_INVESTOR'] = TD_CALLBACK_TYPE(TD_RSP_QRY_INVESTOR, 'TD_RSP_QRY_INVESTOR')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_TRADING_CODE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_TRADING_CODE, 'TD_RSP_QRY_TRADING_CODE')
 *     __Pyx_globals['TD_RSP_QRY_INSTRUMENT_MARGIN_RATE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_INSTRUMENT_MARGIN_RATE, 'TD_RSP_QRY_INSTRUMENT_MARGIN_RATE')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_INVESTOR); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RSP_QRY_INVESTOR};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 309, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RSP_QRY_INVESTOR};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 309, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_114 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 309, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_114);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_114, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_114, 0+__pyx_t_117, __pyx_t_2);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_INVESTOR);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_INVESTOR);
      PyTuple_SET_ITEM(__pyx_t_114, 1+__pyx_t_117, __pyx_n_s_TD_RSP_QRY_INVESTOR);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_114, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 309, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 309, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_INVESTOR, __pyx_t_1) < 0)) __PYX_ERR(1, 309, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":310
 *     __Pyx_globals['TD_RSP_QRY_TRADING_ACCOUNT'] = TD_CALLBACK_TYPE(TD_RSP_QRY_TRADING_ACCOUNT, 'TD_RSP_QRY_TRADING_ACCOUNT')
 *     __Pyx_globals['TD_RSP_QRY_INVESTOR'] = TD_CALLBACK_TYPE(TD_RSP_QRY_INVESTOR, 'TD_RSP_QRY_INVESTOR')
 *     __Pyx_globals['TD_RSP_QRY_TRADING_CODE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_TRADING_CODE, 'TD_RSP_QRY_TRADING_CODE')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_INSTRUMENT_MARGIN_RATE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_INSTRUMENT_MARGIN_RATE, 'TD_RSP_QRY_INSTRUMENT_MARGIN_RATE')
 *     __Pyx_globals['TD_RSP_QRY_INSTRUMENT_COMMISSION_RATE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_INSTRUMENT_COMMISSION_RATE, 'TD_RSP_QRY_INSTRUMENT_COMMISSION_RATE')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 310, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_114 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_TRADING_CODE); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 310, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_114);
    __pyx_t_2 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RSP_QRY_TRADING_CODE};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 310, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RSP_QRY_TRADING_CODE};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 310, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 310, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_114);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_117, __pyx_t_114);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_TRADING_CODE);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_TRADING_CODE);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_117, __pyx_n_s_TD_RSP_QRY_TRADING_CODE);
      __pyx_t_114 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 310, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 310, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_TRADING_CODE, __pyx_t_1) < 0)) __PYX_ERR(1, 310, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":311
 *     __Pyx_globals['TD_RSP_QRY_INVESTOR'] = TD_CALLBACK_TYPE(TD_RSP_QRY_INVESTOR, 'TD_RSP_QRY_INVESTOR')
 *     __Pyx_globals['TD_RSP_QRY_TRADING_CODE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_TRADING_CODE, 'TD_RSP_QRY_TRADING_CODE')
 *     __Pyx_globals['TD_RSP_QRY_INSTRUMENT_MARGIN_RATE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_INSTRUMENT_MARGIN_RATE, 'TD_RSP_QRY_INSTRUMENT_MARGIN_RATE')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_INSTRUMENT_COMMISSION_RATE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_INSTRUMENT_COMMISSION_RATE, 'TD_RSP_QRY_INSTRUMENT_COMMISSION_RATE')
 *     __Pyx_globals['TD_RSP_QRY_EXCHANGE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_EXCHANGE, 'TD_RSP_QRY_EXCHANGE')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_3 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_INSTRUMENT_MARGIN_RATE); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_114 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_114 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_114)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_114);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RSP_QRY_INSTRUMENT_MARGIN_RAT};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 311, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RSP_QRY_INSTRUMENT_MARGIN_RAT};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 311, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 311, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_114) {
        __Pyx_GIVEREF(__pyx_t_114); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_114); __pyx_t_114 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_117, __pyx_t_3);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_INSTRUMENT_MARGIN_RAT);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_INSTRUMENT_MARGIN_RAT);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_117, __pyx_n_s_TD_RSP_QRY_INSTRUMENT_MARGIN_RAT);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 311, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 311, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_INSTRUMENT_MARGIN_RAT, __pyx_t_1) < 0)) __PYX_ERR(1, 311, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":312
 *     __Pyx_globals['TD_RSP_QRY_TRADING_CODE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_TRADING_CODE, 'TD_RSP_QRY_TRADING_CODE')
 *     __Pyx_globals['TD_RSP_QRY_INSTRUMENT_MARGIN_RATE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_INSTRUMENT_MARGIN_RATE, 'TD_RSP_QRY_INSTRUMENT_MARGIN_RATE')
 *     __Pyx_globals['TD_RSP_QRY_INSTRUMENT_COMMISSION_RATE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_INSTRUMENT_COMMISSION_RATE, 'TD_RSP_QRY_INSTRUMENT_COMMISSION_RATE')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_EXCHANGE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_EXCHANGE, 'TD_RSP_QRY_EXCHANGE')
 *     __Pyx_globals['TD_RSP_QRY_PRODUCT'] = TD_CALLBACK_TYPE(TD_RSP_QRY_PRODUCT, 'TD_RSP_QRY_PRODUCT')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 312, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_INSTRUMENT_COMMISSION_RATE); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 312, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RSP_QRY_INSTRUMENT_COMMISSION};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 312, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RSP_QRY_INSTRUMENT_COMMISSION};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 312, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_114 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 312, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_114);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_114, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_114, 0+__pyx_t_117, __pyx_t_2);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_INSTRUMENT_COMMISSION);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_INSTRUMENT_COMMISSION);
      PyTuple_SET_ITEM(__pyx_t_114, 1+__pyx_t_117, __pyx_n_s_TD_RSP_QRY_INSTRUMENT_COMMISSION);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_114, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 312, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 312, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_INSTRUMENT_COMMISSION, __pyx_t_1) < 0)) __PYX_ERR(1, 312, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":313
 *     __Pyx_globals['TD_RSP_QRY_INSTRUMENT_MARGIN_RATE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_INSTRUMENT_MARGIN_RATE, 'TD_RSP_QRY_INSTRUMENT_MARGIN_RATE')
 *     __Pyx_globals['TD_RSP_QRY_INSTRUMENT_COMMISSION_RATE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_INSTRUMENT_COMMISSION_RATE, 'TD_RSP_QRY_INSTRUMENT_COMMISSION_RATE')
 *     __Pyx_globals['TD_RSP_QRY_EXCHANGE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_EXCHANGE, 'TD_RSP_QRY_EXCHANGE')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_PRODUCT'] = TD_CALLBACK_TYPE(TD_RSP_QRY_PRODUCT, 'TD_RSP_QRY_PRODUCT')
 *     __Pyx_globals['TD_RSP_QRY_INSTRUMENT'] = TD_CALLBACK_TYPE(TD_RSP_QRY_INSTRUMENT, 'TD_RSP_QRY_INSTRUMENT')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 313, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_114 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_EXCHANGE); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 313, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_114);
    __pyx_t_2 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RSP_QRY_EXCHANGE};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 313, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RSP_QRY_EXCHANGE};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 313, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 313, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_114);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_117, __pyx_t_114);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_EXCHANGE);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_EXCHANGE);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_117, __pyx_n_s_TD_RSP_QRY_EXCHANGE);
      __pyx_t_114 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 313, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 313, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_EXCHANGE, __pyx_t_1) < 0)) __PYX_ERR(1, 313, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":314
 *     __Pyx_globals['TD_RSP_QRY_INSTRUMENT_COMMISSION_RATE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_INSTRUMENT_COMMISSION_RATE, 'TD_RSP_QRY_INSTRUMENT_COMMISSION_RATE')
 *     __Pyx_globals['TD_RSP_QRY_EXCHANGE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_EXCHANGE, 'TD_RSP_QRY_EXCHANGE')
 *     __Pyx_globals['TD_RSP_QRY_PRODUCT'] = TD_CALLBACK_TYPE(TD_RSP_QRY_PRODUCT, 'TD_RSP_QRY_PRODUCT')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_INSTRUMENT'] = TD_CALLBACK_TYPE(TD_RSP_QRY_INSTRUMENT, 'TD_RSP_QRY_INSTRUMENT')
 *     __Pyx_globals['TD_RSP_QRY_DEPTH_MARKET_DATA'] = TD_CALLBACK_TYPE(TD_RSP_QRY_DEPTH_MARKET_DATA, 'TD_RSP_QRY_DEPTH_MARKET_DATA')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 314, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_3 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_PRODUCT); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 314, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_114 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_114 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_114)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_114);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RSP_QRY_PRODUCT};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 314, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RSP_QRY_PRODUCT};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 314, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 314, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_114) {
        __Pyx_GIVEREF(__pyx_t_114); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_114); __pyx_t_114 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_117, __pyx_t_3);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_PRODUCT);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_PRODUCT);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_117, __pyx_n_s_TD_RSP_QRY_PRODUCT);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 314, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 314, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_PRODUCT, __pyx_t_1) < 0)) __PYX_ERR(1, 314, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":315
 *     __Pyx_globals['TD_RSP_QRY_EXCHANGE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_EXCHANGE, 'TD_RSP_QRY_EXCHANGE')
 *     __Pyx_globals['TD_RSP_QRY_PRODUCT'] = TD_CALLBACK_TYPE(TD_RSP_QRY_PRODUCT, 'TD_RSP_QRY_PRODUCT')
 *     __Pyx_globals['TD_RSP_QRY_INSTRUMENT'] = TD_CALLBACK_TYPE(TD_RSP_QRY_INSTRUMENT, 'TD_RSP_QRY_INSTRUMENT')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_DEPTH_MARKET_DATA'] = TD_CALLBACK_TYPE(TD_RSP_QRY_DEPTH_MARKET_DATA, 'TD_RSP_QRY_DEPTH_MARKET_DATA')
 *     __Pyx_globals['TD_RSP_QRY_SETTLE_INFO'] = TD_CALLBACK_TYPE(TD_RSP_QRY_SETTLE_INFO, 'TD_RSP_QRY_SETTLE_INFO')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 315, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_INSTRUMENT); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 315, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RSP_QRY_INSTRUMENT};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 315, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RSP_QRY_INSTRUMENT};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 315, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_114 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 315, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_114);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_114, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_114, 0+__pyx_t_117, __pyx_t_2);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_INSTRUMENT);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_INSTRUMENT);
      PyTuple_SET_ITEM(__pyx_t_114, 1+__pyx_t_117, __pyx_n_s_TD_RSP_QRY_INSTRUMENT);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_114, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 315, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 315, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_INSTRUMENT, __pyx_t_1) < 0)) __PYX_ERR(1, 315, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":316
 *     __Pyx_globals['TD_RSP_QRY_PRODUCT'] = TD_CALLBACK_TYPE(TD_RSP_QRY_PRODUCT, 'TD_RSP_QRY_PRODUCT')
 *     __Pyx_globals['TD_RSP_QRY_INSTRUMENT'] = TD_CALLBACK_TYPE(TD_RSP_QRY_INSTRUMENT, 'TD_RSP_QRY_INSTRUMENT')
 *     __Pyx_globals['TD_RSP_QRY_DEPTH_MARKET_DATA'] = TD_CALLBACK_TYPE(TD_RSP_QRY_DEPTH_MARKET_DATA, 'TD_RSP_QRY_DEPTH_MARKET_DATA')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_SETTLE_INFO'] = TD_CALLBACK_TYPE(TD_RSP_QRY_SETTLE_INFO, 'TD_RSP_QRY_SETTLE_INFO')
 *     __Pyx_globals['TD_RSP_QRY_TRANSFER_BANK'] = TD_CALLBACK_TYPE(TD_RSP_QRY_TRANSFER_BANK, 'TD_RSP_QRY_TRANSFER_BANK')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 316, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_114 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_DEPTH_MARKET_DATA); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 316, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_114);
    __pyx_t_2 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RSP_QRY_DEPTH_MARKET_DATA};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 316, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RSP_QRY_DEPTH_MARKET_DATA};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 316, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 316, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_114);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_117, __pyx_t_114);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_DEPTH_MARKET_DATA);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_DEPTH_MARKET_DATA);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_117, __pyx_n_s_TD_RSP_QRY_DEPTH_MARKET_DATA);
      __pyx_t_114 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 316, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 316, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_DEPTH_MARKET_DATA, __pyx_t_1) < 0)) __PYX_ERR(1, 316, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":317
 *     __Pyx_globals['TD_RSP_QRY_INSTRUMENT'] = TD_CALLBACK_TYPE(TD_RSP_QRY_INSTRUMENT, 'TD_RSP_QRY_INSTRUMENT')
 *     __Pyx_globals['TD_RSP_QRY_DEPTH_MARKET_DATA'] = TD_CALLBACK_TYPE(TD_RSP_QRY_DEPTH_MARKET_DATA, 'TD_RSP_QRY_DEPTH_MARKET_DATA')
 *     __Pyx_globals['TD_RSP_QRY_SETTLE_INFO'] = TD_CALLBACK_TYPE(TD_RSP_QRY_SETTLE_INFO, 'TD_RSP_QRY_SETTLE_INFO')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_TRANSFER_BANK'] = TD_CALLBACK_TYPE(TD_RSP_QRY_TRANSFER_BANK, 'TD_RSP_QRY_TRANSFER_BANK')
 *     __Pyx_globals['TD_RSP_QRY_INVESTOR_POS_DETAIL'] = TD_CALLBACK_TYPE(TD_RSP_QRY_INVESTOR_POS_DETAIL, 'TD_RSP_QRY_INVESTOR_POS_DETAIL')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 317, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_3 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_SETTLE_INFO); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 317, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_114 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_114 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_114)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_114);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RSP_QRY_SETTLE_INFO};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 317, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RSP_QRY_SETTLE_INFO};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 317, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 317, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_114) {
        __Pyx_GIVEREF(__pyx_t_114); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_114); __pyx_t_114 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_117, __pyx_t_3);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_SETTLE_INFO);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_SETTLE_INFO);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_117, __pyx_n_s_TD_RSP_QRY_SETTLE_INFO);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 317, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 317, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_SETTLE_INFO, __pyx_t_1) < 0)) __PYX_ERR(1, 317, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":318
 *     __Pyx_globals['TD_RSP_QRY_DEPTH_MARKET_DATA'] = TD_CALLBACK_TYPE(TD_RSP_QRY_DEPTH_MARKET_DATA, 'TD_RSP_QRY_DEPTH_MARKET_DATA')
 *     __Pyx_globals['TD_RSP_QRY_SETTLE_INFO'] = TD_CALLBACK_TYPE(TD_RSP_QRY_SETTLE_INFO, 'TD_RSP_QRY_SETTLE_INFO')
 *     __Pyx_globals['TD_RSP_QRY_TRANSFER_BANK'] = TD_CALLBACK_TYPE(TD_RSP_QRY_TRANSFER_BANK, 'TD_RSP_QRY_TRANSFER_BANK')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_INVESTOR_POS_DETAIL'] = TD_CALLBACK_TYPE(TD_RSP_QRY_INVESTOR_POS_DETAIL, 'TD_RSP_QRY_INVESTOR_POS_DETAIL')
 *     __Pyx_globals['TD_RSP_QRY_NOTICE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_NOTICE, 'TD_RSP_QRY_NOTICE')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 318, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_TRANSFER_BANK); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 318, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RSP_QRY_TRANSFER_BANK};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 318, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RSP_QRY_TRANSFER_BANK};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 318, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_114 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 318, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_114);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_114, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_114, 0+__pyx_t_117, __pyx_t_2);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_TRANSFER_BANK);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_TRANSFER_BANK);
      PyTuple_SET_ITEM(__pyx_t_114, 1+__pyx_t_117, __pyx_n_s_TD_RSP_QRY_TRANSFER_BANK);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_114, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 318, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 318, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_TRANSFER_BANK, __pyx_t_1) < 0)) __PYX_ERR(1, 318, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":319
 *     __Pyx_globals['TD_RSP_QRY_SETTLE_INFO'] = TD_CALLBACK_TYPE(TD_RSP_QRY_SETTLE_INFO, 'TD_RSP_QRY_SETTLE_INFO')
 *     __Pyx_globals['TD_RSP_QRY_TRANSFER_BANK'] = TD_CALLBACK_TYPE(TD_RSP_QRY_TRANSFER_BANK, 'TD_RSP_QRY_TRANSFER_BANK')
 *     __Pyx_globals['TD_RSP_QRY_INVESTOR_POS_DETAIL'] = TD_CALLBACK_TYPE(TD_RSP_QRY_INVESTOR_POS_DETAIL, 'TD_RSP_QRY_INVESTOR_POS_DETAIL')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_NOTICE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_NOTICE, 'TD_RSP_QRY_NOTICE')
 *     __Pyx_globals['TD_RSP_QRY_SETTLE_INFO_CONFIRM'] = TD_CALLBACK_TYPE(TD_RSP_QRY_SETTLE_INFO_CONFIRM, 'TD_RSP_QRY_SETTLE_INFO_CONFIRM')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 319, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_114 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_INVESTOR_POS_DETAIL); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 319, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_114);
    __pyx_t_2 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RSP_QRY_INVESTOR_POS_DETAIL};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 319, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RSP_QRY_INVESTOR_POS_DETAIL};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 319, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 319, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_114);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_117, __pyx_t_114);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_INVESTOR_POS_DETAIL);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_INVESTOR_POS_DETAIL);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_117, __pyx_n_s_TD_RSP_QRY_INVESTOR_POS_DETAIL);
      __pyx_t_114 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 319, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 319, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_INVESTOR_POS_DETAIL, __pyx_t_1) < 0)) __PYX_ERR(1, 319, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":320
 *     __Pyx_globals['TD_RSP_QRY_TRANSFER_BANK'] = TD_CALLBACK_TYPE(TD_RSP_QRY_TRANSFER_BANK, 'TD_RSP_QRY_TRANSFER_BANK')
 *     __Pyx_globals['TD_RSP_QRY_INVESTOR_POS_DETAIL'] = TD_CALLBACK_TYPE(TD_RSP_QRY_INVESTOR_POS_DETAIL, 'TD_RSP_QRY_INVESTOR_POS_DETAIL')
 *     __Pyx_globals['TD_RSP_QRY_NOTICE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_NOTICE, 'TD_RSP_QRY_NOTICE')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_SETTLE_INFO_CONFIRM'] = TD_CALLBACK_TYPE(TD_RSP_QRY_SETTLE_INFO_CONFIRM, 'TD_RSP_QRY_SETTLE_INFO_CONFIRM')
 *     __Pyx_globals['TD_RSP_QRY_INVESTOR_POS_COMB_DETAIL'] = TD_CALLBACK_TYPE(TD_RSP_QRY_INVESTOR_POS_COMB_DETAIL, 'TD_RSP_QRY_INVESTOR_POS_COMB_DETAIL')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 320, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_3 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_NOTICE); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 320, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_114 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_114 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_114)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_114);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RSP_QRY_NOTICE};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 320, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RSP_QRY_NOTICE};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 320, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 320, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_114) {
        __Pyx_GIVEREF(__pyx_t_114); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_114); __pyx_t_114 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_117, __pyx_t_3);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_NOTICE);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_NOTICE);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_117, __pyx_n_s_TD_RSP_QRY_NOTICE);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 320, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 320, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_NOTICE, __pyx_t_1) < 0)) __PYX_ERR(1, 320, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":321
 *     __Pyx_globals['TD_RSP_QRY_INVESTOR_POS_DETAIL'] = TD_CALLBACK_TYPE(TD_RSP_QRY_INVESTOR_POS_DETAIL, 'TD_RSP_QRY_INVESTOR_POS_DETAIL')
 *     __Pyx_globals['TD_RSP_QRY_NOTICE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_NOTICE, 'TD_RSP_QRY_NOTICE')
 *     __Pyx_globals['TD_RSP_QRY_SETTLE_INFO_CONFIRM'] = TD_CALLBACK_TYPE(TD_RSP_QRY_SETTLE_INFO_CONFIRM, 'TD_RSP_QRY_SETTLE_INFO_CONFIRM')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_INVESTOR_POS_COMB_DETAIL'] = TD_CALLBACK_TYPE(TD_RSP_QRY_INVESTOR_POS_COMB_DETAIL, 'TD_RSP_QRY_INVESTOR_POS_COMB_DETAIL')
 *     __Pyx_globals['TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_KEY'] = TD_CALLBACK_TYPE(TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_KEY, 'TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_KEY')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 321, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_SETTLE_INFO_CONFIRM); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 321, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RSP_QRY_SETTLE_INFO_CONFIRM};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 321, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RSP_QRY_SETTLE_INFO_CONFIRM};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 321, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_114 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 321, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_114);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_114, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_114, 0+__pyx_t_117, __pyx_t_2);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_SETTLE_INFO_CONFIRM);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_SETTLE_INFO_CONFIRM);
      PyTuple_SET_ITEM(__pyx_t_114, 1+__pyx_t_117, __pyx_n_s_TD_RSP_QRY_SETTLE_INFO_CONFIRM);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_114, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 321, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 321, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_SETTLE_INFO_CONFIRM, __pyx_t_1) < 0)) __PYX_ERR(1, 321, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":322
 *     __Pyx_globals['TD_RSP_QRY_NOTICE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_NOTICE, 'TD_RSP_QRY_NOTICE')
 *     __Pyx_globals['TD_RSP_QRY_SETTLE_INFO_CONFIRM'] = TD_CALLBACK_TYPE(TD_RSP_QRY_SETTLE_INFO_CONFIRM, 'TD_RSP_QRY_SETTLE_INFO_CONFIRM')
 *     __Pyx_globals['TD_RSP_QRY_INVESTOR_POS_COMB_DETAIL'] = TD_CALLBACK_TYPE(TD_RSP_QRY_INVESTOR_POS_COMB_DETAIL, 'TD_RSP_QRY_INVESTOR_POS_COMB_DETAIL')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_KEY'] = TD_CALLBACK_TYPE(TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_KEY, 'TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_KEY')
 *     __Pyx_globals['TD_RSP_QRY_EWARRANT_OFFSET'] = TD_CALLBACK_TYPE(TD_RSP_QRY_EWARRANT_OFFSET, 'TD_RSP_QRY_EWARRANT_OFFSET')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 322, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_114 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_INVESTOR_POS_COMB_DETAIL); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 322, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_114);
    __pyx_t_2 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RSP_QRY_INVESTOR_POS_COMB_DET};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 322, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RSP_QRY_INVESTOR_POS_COMB_DET};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 322, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 322, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_114);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_117, __pyx_t_114);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_INVESTOR_POS_COMB_DET);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_INVESTOR_POS_COMB_DET);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_117, __pyx_n_s_TD_RSP_QRY_INVESTOR_POS_COMB_DET);
      __pyx_t_114 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 322, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 322, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_INVESTOR_POS_COMB_DET, __pyx_t_1) < 0)) __PYX_ERR(1, 322, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":323
 *     __Pyx_globals['TD_RSP_QRY_SETTLE_INFO_CONFIRM'] = TD_CALLBACK_TYPE(TD_RSP_QRY_SETTLE_INFO_CONFIRM, 'TD_RSP_QRY_SETTLE_INFO_CONFIRM')
 *     __Pyx_globals['TD_RSP_QRY_INVESTOR_POS_COMB_DETAIL'] = TD_CALLBACK_TYPE(TD_RSP_QRY_INVESTOR_POS_COMB_DETAIL, 'TD_RSP_QRY_INVESTOR_POS_COMB_DETAIL')
 *     __Pyx_globals['TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_KEY'] = TD_CALLBACK_TYPE(TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_KEY, 'TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_KEY')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_EWARRANT_OFFSET'] = TD_CALLBACK_TYPE(TD_RSP_QRY_EWARRANT_OFFSET, 'TD_RSP_QRY_EWARRANT_OFFSET')
 *     __Pyx_globals['TD_RSP_QRY_INVESTOR_PRODUCT_GROUP_MARGIN'] = TD_CALLBACK_TYPE(TD_RSP_QRY_INVESTOR_PRODUCT_GROUP_MARGIN, 'TD_RSP_QRY_INVESTOR_PRODUCT_GROUP_MARGIN')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 323, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_3 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_KEY); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 323, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_114 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_114 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_114)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_114);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RSP_QRY_CFMMC_TRADING_ACCOUNT};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 323, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RSP_QRY_CFMMC_TRADING_ACCOUNT};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 323, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 323, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_114) {
        __Pyx_GIVEREF(__pyx_t_114); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_114); __pyx_t_114 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_117, __pyx_t_3);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_CFMMC_TRADING_ACCOUNT);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_CFMMC_TRADING_ACCOUNT);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_117, __pyx_n_s_TD_RSP_QRY_CFMMC_TRADING_ACCOUNT);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 323, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 323, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_CFMMC_TRADING_ACCOUNT, __pyx_t_1) < 0)) __PYX_ERR(1, 323, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":324
 *     __Pyx_globals['TD_RSP_QRY_INVESTOR_POS_COMB_DETAIL'] = TD_CALLBACK_TYPE(TD_RSP_QRY_INVESTOR_POS_COMB_DETAIL, 'TD_RSP_QRY_INVESTOR_POS_COMB_DETAIL')
 *     __Pyx_globals['TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_KEY'] = TD_CALLBACK_TYPE(TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_KEY, 'TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_KEY')
 *     __Pyx_globals['TD_RSP_QRY_EWARRANT_OFFSET'] = TD_CALLBACK_TYPE(TD_RSP_QRY_EWARRANT_OFFSET, 'TD_RSP_QRY_EWARRANT_OFFSET')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_INVESTOR_PRODUCT_GROUP_MARGIN'] = TD_CALLBACK_TYPE(TD_RSP_QRY_INVESTOR_PRODUCT_GROUP_MARGIN, 'TD_RSP_QRY_INVESTOR_PRODUCT_GROUP_MARGIN')
 *     __Pyx_globals['TD_RSP_QRY_EXCHANGE_MARGIN_RATE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_EXCHANGE_MARGIN_RATE, 'TD_RSP_QRY_EXCHANGE_MARGIN_RATE')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 324, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_EWARRANT_OFFSET); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 324, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RSP_QRY_EWARRANT_OFFSET};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 324, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RSP_QRY_EWARRANT_OFFSET};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 324, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_114 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 324, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_114);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_114, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_114, 0+__pyx_t_117, __pyx_t_2);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_EWARRANT_OFFSET);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_EWARRANT_OFFSET);
      PyTuple_SET_ITEM(__pyx_t_114, 1+__pyx_t_117, __pyx_n_s_TD_RSP_QRY_EWARRANT_OFFSET);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_114, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 324, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 324, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_EWARRANT_OFFSET, __pyx_t_1) < 0)) __PYX_ERR(1, 324, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":325
 *     __Pyx_globals['TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_KEY'] = TD_CALLBACK_TYPE(TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_KEY, 'TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_KEY')
 *     __Pyx_globals['TD_RSP_QRY_EWARRANT_OFFSET'] = TD_CALLBACK_TYPE(TD_RSP_QRY_EWARRANT_OFFSET, 'TD_RSP_QRY_EWARRANT_OFFSET')
 *     __Pyx_globals['TD_RSP_QRY_INVESTOR_PRODUCT_GROUP_MARGIN'] = TD_CALLBACK_TYPE(TD_RSP_QRY_INVESTOR_PRODUCT_GROUP_MARGIN, 'TD_RSP_QRY_INVESTOR_PRODUCT_GROUP_MARGIN')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_EXCHANGE_MARGIN_RATE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_EXCHANGE_MARGIN_RATE, 'TD_RSP_QRY_EXCHANGE_MARGIN_RATE')
 *     __Pyx_globals['TD_RSP_QRY_EXCHANGE_MARGIN_RATE_ADJUST'] = TD_CALLBACK_TYPE(TD_RSP_QRY_EXCHANGE_MARGIN_RATE_ADJUST, 'TD_RSP_QRY_EXCHANGE_MARGIN_RATE_ADJUST')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 325, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_114 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_INVESTOR_PRODUCT_GROUP_MARGIN); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 325, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_114);
    __pyx_t_2 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RSP_QRY_INVESTOR_PRODUCT_GROU};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 325, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RSP_QRY_INVESTOR_PRODUCT_GROU};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 325, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 325, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_114);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_117, __pyx_t_114);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_INVESTOR_PRODUCT_GROU);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_INVESTOR_PRODUCT_GROU);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_117, __pyx_n_s_TD_RSP_QRY_INVESTOR_PRODUCT_GROU);
      __pyx_t_114 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 325, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 325, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_INVESTOR_PRODUCT_GROU, __pyx_t_1) < 0)) __PYX_ERR(1, 325, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":326
 *     __Pyx_globals['TD_RSP_QRY_EWARRANT_OFFSET'] = TD_CALLBACK_TYPE(TD_RSP_QRY_EWARRANT_OFFSET, 'TD_RSP_QRY_EWARRANT_OFFSET')
 *     __Pyx_globals['TD_RSP_QRY_INVESTOR_PRODUCT_GROUP_MARGIN'] = TD_CALLBACK_TYPE(TD_RSP_QRY_INVESTOR_PRODUCT_GROUP_MARGIN, 'TD_RSP_QRY_INVESTOR_PRODUCT_GROUP_MARGIN')
 *     __Pyx_globals['TD_RSP_QRY_EXCHANGE_MARGIN_RATE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_EXCHANGE_MARGIN_RATE, 'TD_RSP_QRY_EXCHANGE_MARGIN_RATE')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_EXCHANGE_MARGIN_RATE_ADJUST'] = TD_CALLBACK_TYPE(TD_RSP_QRY_EXCHANGE_MARGIN_RATE_ADJUST, 'TD_RSP_QRY_EXCHANGE_MARGIN_RATE_ADJUST')
 *     __Pyx_globals['TD_RSP_QRY_EXCHANGE_RATE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_EXCHANGE_RATE, 'TD_RSP_QRY_EXCHANGE_RATE')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 326, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_3 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_EXCHANGE_MARGIN_RATE); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 326, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_114 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_114 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_114)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_114);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RSP_QRY_EXCHANGE_MARGIN_RATE};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 326, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RSP_QRY_EXCHANGE_MARGIN_RATE};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 326, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 326, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_114) {
        __Pyx_GIVEREF(__pyx_t_114); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_114); __pyx_t_114 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_117, __pyx_t_3);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_EXCHANGE_MARGIN_RATE);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_EXCHANGE_MARGIN_RATE);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_117, __pyx_n_s_TD_RSP_QRY_EXCHANGE_MARGIN_RATE);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 326, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 326, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_EXCHANGE_MARGIN_RATE, __pyx_t_1) < 0)) __PYX_ERR(1, 326, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":327
 *     __Pyx_globals['TD_RSP_QRY_INVESTOR_PRODUCT_GROUP_MARGIN'] = TD_CALLBACK_TYPE(TD_RSP_QRY_INVESTOR_PRODUCT_GROUP_MARGIN, 'TD_RSP_QRY_INVESTOR_PRODUCT_GROUP_MARGIN')
 *     __Pyx_globals['TD_RSP_QRY_EXCHANGE_MARGIN_RATE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_EXCHANGE_MARGIN_RATE, 'TD_RSP_QRY_EXCHANGE_MARGIN_RATE')
 *     __Pyx_globals['TD_RSP_QRY_EXCHANGE_MARGIN_RATE_ADJUST'] = TD_CALLBACK_TYPE(TD_RSP_QRY_EXCHANGE_MARGIN_RATE_ADJUST, 'TD_RSP_QRY_EXCHANGE_MARGIN_RATE_ADJUST')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_EXCHANGE_RATE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_EXCHANGE_RATE, 'TD_RSP_QRY_EXCHANGE_RATE')
 *     __Pyx_globals['TD_RSP_QRY_SEC_AGENT_ACID_MAP'] = TD_CALLBACK_TYPE(TD_RSP_QRY_SEC_AGENT_ACID_MAP, 'TD_RSP_QRY_SEC_AGENT_ACID_MAP')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 327, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_EXCHANGE_MARGIN_RATE_ADJUST); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 327, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RSP_QRY_EXCHANGE_MARGIN_RATE_2};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 327, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RSP_QRY_EXCHANGE_MARGIN_RATE_2};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 327, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_114 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 327, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_114);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_114, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_114, 0+__pyx_t_117, __pyx_t_2);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_EXCHANGE_MARGIN_RATE_2);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_EXCHANGE_MARGIN_RATE_2);
      PyTuple_SET_ITEM(__pyx_t_114, 1+__pyx_t_117, __pyx_n_s_TD_RSP_QRY_EXCHANGE_MARGIN_RATE_2);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_114, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 327, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 327, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_EXCHANGE_MARGIN_RATE_2, __pyx_t_1) < 0)) __PYX_ERR(1, 327, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":328
 *     __Pyx_globals['TD_RSP_QRY_EXCHANGE_MARGIN_RATE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_EXCHANGE_MARGIN_RATE, 'TD_RSP_QRY_EXCHANGE_MARGIN_RATE')
 *     __Pyx_globals['TD_RSP_QRY_EXCHANGE_MARGIN_RATE_ADJUST'] = TD_CALLBACK_TYPE(TD_RSP_QRY_EXCHANGE_MARGIN_RATE_ADJUST, 'TD_RSP_QRY_EXCHANGE_MARGIN_RATE_ADJUST')
 *     __Pyx_globals['TD_RSP_QRY_EXCHANGE_RATE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_EXCHANGE_RATE, 'TD_RSP_QRY_EXCHANGE_RATE')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_SEC_AGENT_ACID_MAP'] = TD_CALLBACK_TYPE(TD_RSP_QRY_SEC_AGENT_ACID_MAP, 'TD_RSP_QRY_SEC_AGENT_ACID_MAP')
 *     __Pyx_globals['TD_RSP_QRY_PRODUCT_EXCH_RATE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_PRODUCT_EXCH_RATE, 'TD_RSP_QRY_PRODUCT_EXCH_RATE')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 328, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_114 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_EXCHANGE_RATE); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 328, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_114);
    __pyx_t_2 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RSP_QRY_EXCHANGE_RATE};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 328, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RSP_QRY_EXCHANGE_RATE};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 328, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 328, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_114);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_117, __pyx_t_114);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_EXCHANGE_RATE);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_EXCHANGE_RATE);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_117, __pyx_n_s_TD_RSP_QRY_EXCHANGE_RATE);
      __pyx_t_114 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 328, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 328, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_EXCHANGE_RATE, __pyx_t_1) < 0)) __PYX_ERR(1, 328, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":329
 *     __Pyx_globals['TD_RSP_QRY_EXCHANGE_MARGIN_RATE_ADJUST'] = TD_CALLBACK_TYPE(TD_RSP_QRY_EXCHANGE_MARGIN_RATE_ADJUST, 'TD_RSP_QRY_EXCHANGE_MARGIN_RATE_ADJUST')
 *     __Pyx_globals['TD_RSP_QRY_EXCHANGE_RATE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_EXCHANGE_RATE, 'TD_RSP_QRY_EXCHANGE_RATE')
 *     __Pyx_globals['TD_RSP_QRY_SEC_AGENT_ACID_MAP'] = TD_CALLBACK_TYPE(TD_RSP_QRY_SEC_AGENT_ACID_MAP, 'TD_RSP_QRY_SEC_AGENT_ACID_MAP')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_PRODUCT_EXCH_RATE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_PRODUCT_EXCH_RATE, 'TD_RSP_QRY_PRODUCT_EXCH_RATE')
 *     __Pyx_globals['TD_RSP_QRY_PRODUCT_GROUP'] = TD_CALLBACK_TYPE(TD_RSP_QRY_PRODUCT_GROUP, 'TD_RSP_QRY_PRODUCT_GROUP')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 329, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_3 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_SEC_AGENT_ACID_MAP); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 329, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_114 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_114 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_114)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_114);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RSP_QRY_SEC_AGENT_ACID_MAP};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 329, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RSP_QRY_SEC_AGENT_ACID_MAP};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 329, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 329, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_114) {
        __Pyx_GIVEREF(__pyx_t_114); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_114); __pyx_t_114 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_117, __pyx_t_3);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_SEC_AGENT_ACID_MAP);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_SEC_AGENT_ACID_MAP);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_117, __pyx_n_s_TD_RSP_QRY_SEC_AGENT_ACID_MAP);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 329, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 329, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_SEC_AGENT_ACID_MAP, __pyx_t_1) < 0)) __PYX_ERR(1, 329, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":330
 *     __Pyx_globals['TD_RSP_QRY_EXCHANGE_RATE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_EXCHANGE_RATE, 'TD_RSP_QRY_EXCHANGE_RATE')
 *     __Pyx_globals['TD_RSP_QRY_SEC_AGENT_ACID_MAP'] = TD_CALLBACK_TYPE(TD_RSP_QRY_SEC_AGENT_ACID_MAP, 'TD_RSP_QRY_SEC_AGENT_ACID_MAP')
 *     __Pyx_globals['TD_RSP_QRY_PRODUCT_EXCH_RATE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_PRODUCT_EXCH_RATE, 'TD_RSP_QRY_PRODUCT_EXCH_RATE')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_PRODUCT_GROUP'] = TD_CALLBACK_TYPE(TD_RSP_QRY_PRODUCT_GROUP, 'TD_RSP_QRY_PRODUCT_GROUP')
 *     __Pyx_globals['TD_RSP_QRY_MM_INSTRUMENT_COMMISSION_RATE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_MM_INSTRUMENT_COMMISSION_RATE, 'TD_RSP_QRY_MM_INSTRUMENT_COMMISSION_RATE')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 330, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_PRODUCT_EXCH_RATE); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 330, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RSP_QRY_PRODUCT_EXCH_RATE};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 330, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RSP_QRY_PRODUCT_EXCH_RATE};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 330, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_114 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 330, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_114);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_114, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_114, 0+__pyx_t_117, __pyx_t_2);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_PRODUCT_EXCH_RATE);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_PRODUCT_EXCH_RATE);
      PyTuple_SET_ITEM(__pyx_t_114, 1+__pyx_t_117, __pyx_n_s_TD_RSP_QRY_PRODUCT_EXCH_RATE);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_114, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 330, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 330, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_PRODUCT_EXCH_RATE, __pyx_t_1) < 0)) __PYX_ERR(1, 330, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":331
 *     __Pyx_globals['TD_RSP_QRY_SEC_AGENT_ACID_MAP'] = TD_CALLBACK_TYPE(TD_RSP_QRY_SEC_AGENT_ACID_MAP, 'TD_RSP_QRY_SEC_AGENT_ACID_MAP')
 *     __Pyx_globals['TD_RSP_QRY_PRODUCT_EXCH_RATE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_PRODUCT_EXCH_RATE, 'TD_RSP_QRY_PRODUCT_EXCH_RATE')
 *     __Pyx_globals['TD_RSP_QRY_PRODUCT_GROUP'] = TD_CALLBACK_TYPE(TD_RSP_QRY_PRODUCT_GROUP, 'TD_RSP_QRY_PRODUCT_GROUP')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_MM_INSTRUMENT_COMMISSION_RATE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_MM_INSTRUMENT_COMMISSION_RATE, 'TD_RSP_QRY_MM_INSTRUMENT_COMMISSION_RATE')
 *     __Pyx_globals['TD_RSP_QRY_MM_OPTION_INSTR_COMM_RATE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_MM_OPTION_INSTR_COMM_RATE, 'TD_RSP_QRY_MM_OPTION_INSTR_COMM_RATE')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 331, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_114 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_PRODUCT_GROUP); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 331, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_114);
    __pyx_t_2 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RSP_QRY_PRODUCT_GROUP};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 331, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RSP_QRY_PRODUCT_GROUP};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 331, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 331, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_114);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_117, __pyx_t_114);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_PRODUCT_GROUP);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_PRODUCT_GROUP);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_117, __pyx_n_s_TD_RSP_QRY_PRODUCT_GROUP);
      __pyx_t_114 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 331, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 331, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_PRODUCT_GROUP, __pyx_t_1) < 0)) __PYX_ERR(1, 331, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":332
 *     __Pyx_globals['TD_RSP_QRY_PRODUCT_EXCH_RATE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_PRODUCT_EXCH_RATE, 'TD_RSP_QRY_PRODUCT_EXCH_RATE')
 *     __Pyx_globals['TD_RSP_QRY_PRODUCT_GROUP'] = TD_CALLBACK_TYPE(TD_RSP_QRY_PRODUCT_GROUP, 'TD_RSP_QRY_PRODUCT_GROUP')
 *     __Pyx_globals['TD_RSP_QRY_MM_INSTRUMENT_COMMISSION_RATE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_MM_INSTRUMENT_COMMISSION_RATE, 'TD_RSP_QRY_MM_INSTRUMENT_COMMISSION_RATE')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_MM_OPTION_INSTR_COMM_RATE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_MM_OPTION_INSTR_COMM_RATE, 'TD_RSP_QRY_MM_OPTION_INSTR_COMM_RATE')
 *     __Pyx_globals['TD_RSP_QRY_INSTRUMENT_ORDER_COMM_RATE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_INSTRUMENT_ORDER_COMM_RATE, 'TD_RSP_QRY_INSTRUMENT_ORDER_COMM_RATE')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 332, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_3 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_MM_INSTRUMENT_COMMISSION_RATE); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 332, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_114 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_114 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_114)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_114);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RSP_QRY_MM_INSTRUMENT_COMMISS};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 332, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RSP_QRY_MM_INSTRUMENT_COMMISS};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 332, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 332, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_114) {
        __Pyx_GIVEREF(__pyx_t_114); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_114); __pyx_t_114 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_117, __pyx_t_3);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_MM_INSTRUMENT_COMMISS);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_MM_INSTRUMENT_COMMISS);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_117, __pyx_n_s_TD_RSP_QRY_MM_INSTRUMENT_COMMISS);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 332, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 332, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_MM_INSTRUMENT_COMMISS, __pyx_t_1) < 0)) __PYX_ERR(1, 332, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":333
 *     __Pyx_globals['TD_RSP_QRY_PRODUCT_GROUP'] = TD_CALLBACK_TYPE(TD_RSP_QRY_PRODUCT_GROUP, 'TD_RSP_QRY_PRODUCT_GROUP')
 *     __Pyx_globals['TD_RSP_QRY_MM_INSTRUMENT_COMMISSION_RATE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_MM_INSTRUMENT_COMMISSION_RATE, 'TD_RSP_QRY_MM_INSTRUMENT_COMMISSION_RATE')
 *     __Pyx_globals['TD_RSP_QRY_MM_OPTION_INSTR_COMM_RATE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_MM_OPTION_INSTR_COMM_RATE, 'TD_RSP_QRY_MM_OPTION_INSTR_COMM_RATE')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_INSTRUMENT_ORDER_COMM_RATE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_INSTRUMENT_ORDER_COMM_RATE, 'TD_RSP_QRY_INSTRUMENT_ORDER_COMM_RATE')
 *     __Pyx_globals['TD_RSP_QRY_OPTION_INSTR_TRADE_COST'] = TD_CALLBACK_TYPE(TD_RSP_QRY_OPTION_INSTR_TRADE_COST, 'TD_RSP_QRY_OPTION_INSTR_TRADE_COST')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_MM_OPTION_INSTR_COMM_RATE); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RSP_QRY_MM_OPTION_INSTR_COMM};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 333, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RSP_QRY_MM_OPTION_INSTR_COMM};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 333, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_114 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 333, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_114);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_114, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_114, 0+__pyx_t_117, __pyx_t_2);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_MM_OPTION_INSTR_COMM);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_MM_OPTION_INSTR_COMM);
      PyTuple_SET_ITEM(__pyx_t_114, 1+__pyx_t_117, __pyx_n_s_TD_RSP_QRY_MM_OPTION_INSTR_COMM);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_114, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 333, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 333, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_MM_OPTION_INSTR_COMM, __pyx_t_1) < 0)) __PYX_ERR(1, 333, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":334
 *     __Pyx_globals['TD_RSP_QRY_MM_INSTRUMENT_COMMISSION_RATE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_MM_INSTRUMENT_COMMISSION_RATE, 'TD_RSP_QRY_MM_INSTRUMENT_COMMISSION_RATE')
 *     __Pyx_globals['TD_RSP_QRY_MM_OPTION_INSTR_COMM_RATE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_MM_OPTION_INSTR_COMM_RATE, 'TD_RSP_QRY_MM_OPTION_INSTR_COMM_RATE')
 *     __Pyx_globals['TD_RSP_QRY_INSTRUMENT_ORDER_COMM_RATE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_INSTRUMENT_ORDER_COMM_RATE, 'TD_RSP_QRY_INSTRUMENT_ORDER_COMM_RATE')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_OPTION_INSTR_TRADE_COST'] = TD_CALLBACK_TYPE(TD_RSP_QRY_OPTION_INSTR_TRADE_COST, 'TD_RSP_QRY_OPTION_INSTR_TRADE_COST')
 *     __Pyx_globals['TD_RSP_QRY_OPTION_INSTR_COMM_RATE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_OPTION_INSTR_COMM_RATE, 'TD_RSP_QRY_OPTION_INSTR_COMM_RATE')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 334, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_114 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_INSTRUMENT_ORDER_COMM_RATE); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 334, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_114);
    __pyx_t_2 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RSP_QRY_INSTRUMENT_ORDER_COMM};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 334, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RSP_QRY_INSTRUMENT_ORDER_COMM};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 334, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 334, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_114);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_117, __pyx_t_114);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_INSTRUMENT_ORDER_COMM);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_INSTRUMENT_ORDER_COMM);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_117, __pyx_n_s_TD_RSP_QRY_INSTRUMENT_ORDER_COMM);
      __pyx_t_114 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 334, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 334, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_INSTRUMENT_ORDER_COMM, __pyx_t_1) < 0)) __PYX_ERR(1, 334, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":335
 *     __Pyx_globals['TD_RSP_QRY_MM_OPTION_INSTR_COMM_RATE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_MM_OPTION_INSTR_COMM_RATE, 'TD_RSP_QRY_MM_OPTION_INSTR_COMM_RATE')
 *     __Pyx_globals['TD_RSP_QRY_INSTRUMENT_ORDER_COMM_RATE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_INSTRUMENT_ORDER_COMM_RATE, 'TD_RSP_QRY_INSTRUMENT_ORDER_COMM_RATE')
 *     __Pyx_globals['TD_RSP_QRY_OPTION_INSTR_TRADE_COST'] = TD_CALLBACK_TYPE(TD_RSP_QRY_OPTION_INSTR_TRADE_COST, 'TD_RSP_QRY_OPTION_INSTR_TRADE_COST')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_OPTION_INSTR_COMM_RATE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_OPTION_INSTR_COMM_RATE, 'TD_RSP_QRY_OPTION_INSTR_COMM_RATE')
 *     __Pyx_globals['TD_RSP_QRY_EXEC_ORDER'] = TD_CALLBACK_TYPE(TD_RSP_QRY_EXEC_ORDER, 'TD_RSP_QRY_EXEC_ORDER')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_3 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_OPTION_INSTR_TRADE_COST); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_114 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_114 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_114)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_114);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RSP_QRY_OPTION_INSTR_TRADE_CO};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 335, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RSP_QRY_OPTION_INSTR_TRADE_CO};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 335, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 335, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_114) {
        __Pyx_GIVEREF(__pyx_t_114); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_114); __pyx_t_114 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_117, __pyx_t_3);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_OPTION_INSTR_TRADE_CO);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_OPTION_INSTR_TRADE_CO);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_117, __pyx_n_s_TD_RSP_QRY_OPTION_INSTR_TRADE_CO);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 335, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 335, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_OPTION_INSTR_TRADE_CO, __pyx_t_1) < 0)) __PYX_ERR(1, 335, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":336
 *     __Pyx_globals['TD_RSP_QRY_INSTRUMENT_ORDER_COMM_RATE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_INSTRUMENT_ORDER_COMM_RATE, 'TD_RSP_QRY_INSTRUMENT_ORDER_COMM_RATE')
 *     __Pyx_globals['TD_RSP_QRY_OPTION_INSTR_TRADE_COST'] = TD_CALLBACK_TYPE(TD_RSP_QRY_OPTION_INSTR_TRADE_COST, 'TD_RSP_QRY_OPTION_INSTR_TRADE_COST')
 *     __Pyx_globals['TD_RSP_QRY_OPTION_INSTR_COMM_RATE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_OPTION_INSTR_COMM_RATE, 'TD_RSP_QRY_OPTION_INSTR_COMM_RATE')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_EXEC_ORDER'] = TD_CALLBACK_TYPE(TD_RSP_QRY_EXEC_ORDER, 'TD_RSP_QRY_EXEC_ORDER')
 *     __Pyx_globals['TD_RSP_QRY_FOR_QUOTE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_FOR_QUOTE, 'TD_RSP_QRY_FOR_QUOTE')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 336, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_OPTION_INSTR_COMM_RATE); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 336, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RSP_QRY_OPTION_INSTR_COMM_RAT};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 336, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RSP_QRY_OPTION_INSTR_COMM_RAT};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 336, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_114 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 336, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_114);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_114, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_114, 0+__pyx_t_117, __pyx_t_2);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_OPTION_INSTR_COMM_RAT);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_OPTION_INSTR_COMM_RAT);
      PyTuple_SET_ITEM(__pyx_t_114, 1+__pyx_t_117, __pyx_n_s_TD_RSP_QRY_OPTION_INSTR_COMM_RAT);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_114, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 336, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 336, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_OPTION_INSTR_COMM_RAT, __pyx_t_1) < 0)) __PYX_ERR(1, 336, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":337
 *     __Pyx_globals['TD_RSP_QRY_OPTION_INSTR_TRADE_COST'] = TD_CALLBACK_TYPE(TD_RSP_QRY_OPTION_INSTR_TRADE_COST, 'TD_RSP_QRY_OPTION_INSTR_TRADE_COST')
 *     __Pyx_globals['TD_RSP_QRY_OPTION_INSTR_COMM_RATE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_OPTION_INSTR_COMM_RATE, 'TD_RSP_QRY_OPTION_INSTR_COMM_RATE')
 *     __Pyx_globals['TD_RSP_QRY_EXEC_ORDER'] = TD_CALLBACK_TYPE(TD_RSP_QRY_EXEC_ORDER, 'TD_RSP_QRY_EXEC_ORDER')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_FOR_QUOTE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_FOR_QUOTE, 'TD_RSP_QRY_FOR_QUOTE')
 *     __Pyx_globals['TD_RSP_QRY_QUOTE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_QUOTE, 'TD_RSP_QRY_QUOTE')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 337, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_114 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_EXEC_ORDER); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 337, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_114);
    __pyx_t_2 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RSP_QRY_EXEC_ORDER};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 337, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RSP_QRY_EXEC_ORDER};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 337, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 337, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_114);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_117, __pyx_t_114);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_EXEC_ORDER);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_EXEC_ORDER);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_117, __pyx_n_s_TD_RSP_QRY_EXEC_ORDER);
      __pyx_t_114 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 337, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 337, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_EXEC_ORDER, __pyx_t_1) < 0)) __PYX_ERR(1, 337, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":338
 *     __Pyx_globals['TD_RSP_QRY_OPTION_INSTR_COMM_RATE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_OPTION_INSTR_COMM_RATE, 'TD_RSP_QRY_OPTION_INSTR_COMM_RATE')
 *     __Pyx_globals['TD_RSP_QRY_EXEC_ORDER'] = TD_CALLBACK_TYPE(TD_RSP_QRY_EXEC_ORDER, 'TD_RSP_QRY_EXEC_ORDER')
 *     __Pyx_globals['TD_RSP_QRY_FOR_QUOTE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_FOR_QUOTE, 'TD_RSP_QRY_FOR_QUOTE')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_QUOTE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_QUOTE, 'TD_RSP_QRY_QUOTE')
 *     __Pyx_globals['TD_RSP_QRY_COMB_INSTRUMENT_GUARD'] = TD_CALLBACK_TYPE(TD_RSP_QRY_COMB_INSTRUMENT_GUARD, 'TD_RSP_QRY_COMB_INSTRUMENT_GUARD')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 338, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_3 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_FOR_QUOTE); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 338, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_114 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_114 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_114)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_114);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RSP_QRY_FOR_QUOTE};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 338, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RSP_QRY_FOR_QUOTE};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 338, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 338, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_114) {
        __Pyx_GIVEREF(__pyx_t_114); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_114); __pyx_t_114 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_117, __pyx_t_3);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_FOR_QUOTE);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_FOR_QUOTE);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_117, __pyx_n_s_TD_RSP_QRY_FOR_QUOTE);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 338, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 338, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_FOR_QUOTE, __pyx_t_1) < 0)) __PYX_ERR(1, 338, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":339
 *     __Pyx_globals['TD_RSP_QRY_EXEC_ORDER'] = TD_CALLBACK_TYPE(TD_RSP_QRY_EXEC_ORDER, 'TD_RSP_QRY_EXEC_ORDER')
 *     __Pyx_globals['TD_RSP_QRY_FOR_QUOTE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_FOR_QUOTE, 'TD_RSP_QRY_FOR_QUOTE')
 *     __Pyx_globals['TD_RSP_QRY_QUOTE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_QUOTE, 'TD_RSP_QRY_QUOTE')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_COMB_INSTRUMENT_GUARD'] = TD_CALLBACK_TYPE(TD_RSP_QRY_COMB_INSTRUMENT_GUARD, 'TD_RSP_QRY_COMB_INSTRUMENT_GUARD')
 *     __Pyx_globals['TD_RSP_QRY_COMB_ACTION'] = TD_CALLBACK_TYPE(TD_RSP_QRY_COMB_ACTION, 'TD_RSP_QRY_COMB_ACTION')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 339, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_QUOTE); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 339, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RSP_QRY_QUOTE};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 339, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RSP_QRY_QUOTE};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 339, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_114 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 339, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_114);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_114, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_114, 0+__pyx_t_117, __pyx_t_2);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_QUOTE);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_QUOTE);
      PyTuple_SET_ITEM(__pyx_t_114, 1+__pyx_t_117, __pyx_n_s_TD_RSP_QRY_QUOTE);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_114, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 339, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 339, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_QUOTE, __pyx_t_1) < 0)) __PYX_ERR(1, 339, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":340
 *     __Pyx_globals['TD_RSP_QRY_FOR_QUOTE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_FOR_QUOTE, 'TD_RSP_QRY_FOR_QUOTE')
 *     __Pyx_globals['TD_RSP_QRY_QUOTE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_QUOTE, 'TD_RSP_QRY_QUOTE')
 *     __Pyx_globals['TD_RSP_QRY_COMB_INSTRUMENT_GUARD'] = TD_CALLBACK_TYPE(TD_RSP_QRY_COMB_INSTRUMENT_GUARD, 'TD_RSP_QRY_COMB_INSTRUMENT_GUARD')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_COMB_ACTION'] = TD_CALLBACK_TYPE(TD_RSP_QRY_COMB_ACTION, 'TD_RSP_QRY_COMB_ACTION')
 *     __Pyx_globals['TD_RSP_QRY_TRANSFER_SERIAL'] = TD_CALLBACK_TYPE(TD_RSP_QRY_TRANSFER_SERIAL, 'TD_RSP_QRY_TRANSFER_SERIAL')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 340, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_114 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_COMB_INSTRUMENT_GUARD); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 340, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_114);
    __pyx_t_2 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RSP_QRY_COMB_INSTRUMENT_GUARD};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 340, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RSP_QRY_COMB_INSTRUMENT_GUARD};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 340, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 340, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_114);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_117, __pyx_t_114);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_COMB_INSTRUMENT_GUARD);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_COMB_INSTRUMENT_GUARD);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_117, __pyx_n_s_TD_RSP_QRY_COMB_INSTRUMENT_GUARD);
      __pyx_t_114 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 340, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 340, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_COMB_INSTRUMENT_GUARD, __pyx_t_1) < 0)) __PYX_ERR(1, 340, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":341
 *     __Pyx_globals['TD_RSP_QRY_QUOTE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_QUOTE, 'TD_RSP_QRY_QUOTE')
 *     __Pyx_globals['TD_RSP_QRY_COMB_INSTRUMENT_GUARD'] = TD_CALLBACK_TYPE(TD_RSP_QRY_COMB_INSTRUMENT_GUARD, 'TD_RSP_QRY_COMB_INSTRUMENT_GUARD')
 *     __Pyx_globals['TD_RSP_QRY_COMB_ACTION'] = TD_CALLBACK_TYPE(TD_RSP_QRY_COMB_ACTION, 'TD_RSP_QRY_COMB_ACTION')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_TRANSFER_SERIAL'] = TD_CALLBACK_TYPE(TD_RSP_QRY_TRANSFER_SERIAL, 'TD_RSP_QRY_TRANSFER_SERIAL')
 *     __Pyx_globals['TD_RSP_QRY_ACCOUNT_REGISTER'] = TD_CALLBACK_TYPE(TD_RSP_QRY_ACCOUNT_REGISTER, 'TD_RSP_QRY_ACCOUNT_REGISTER')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 341, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_3 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_COMB_ACTION); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 341, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_114 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_114 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_114)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_114);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RSP_QRY_COMB_ACTION};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 341, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RSP_QRY_COMB_ACTION};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 341, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 341, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_114) {
        __Pyx_GIVEREF(__pyx_t_114); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_114); __pyx_t_114 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_117, __pyx_t_3);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_COMB_ACTION);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_COMB_ACTION);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_117, __pyx_n_s_TD_RSP_QRY_COMB_ACTION);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 341, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 341, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_COMB_ACTION, __pyx_t_1) < 0)) __PYX_ERR(1, 341, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":342
 *     __Pyx_globals['TD_RSP_QRY_COMB_INSTRUMENT_GUARD'] = TD_CALLBACK_TYPE(TD_RSP_QRY_COMB_INSTRUMENT_GUARD, 'TD_RSP_QRY_COMB_INSTRUMENT_GUARD')
 *     __Pyx_globals['TD_RSP_QRY_COMB_ACTION'] = TD_CALLBACK_TYPE(TD_RSP_QRY_COMB_ACTION, 'TD_RSP_QRY_COMB_ACTION')
 *     __Pyx_globals['TD_RSP_QRY_TRANSFER_SERIAL'] = TD_CALLBACK_TYPE(TD_RSP_QRY_TRANSFER_SERIAL, 'TD_RSP_QRY_TRANSFER_SERIAL')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_ACCOUNT_REGISTER'] = TD_CALLBACK_TYPE(TD_RSP_QRY_ACCOUNT_REGISTER, 'TD_RSP_QRY_ACCOUNT_REGISTER')
 *     __Pyx_globals['TD_RSP_ERROR'] = TD_CALLBACK_TYPE(TD_RSP_ERROR, 'TD_RSP_ERROR')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 342, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_TRANSFER_SERIAL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 342, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RSP_QRY_TRANSFER_SERIAL};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 342, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RSP_QRY_TRANSFER_SERIAL};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 342, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_114 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 342, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_114);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_114, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_114, 0+__pyx_t_117, __pyx_t_2);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_TRANSFER_SERIAL);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_TRANSFER_SERIAL);
      PyTuple_SET_ITEM(__pyx_t_114, 1+__pyx_t_117, __pyx_n_s_TD_RSP_QRY_TRANSFER_SERIAL);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_114, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 342, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 342, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_TRANSFER_SERIAL, __pyx_t_1) < 0)) __PYX_ERR(1, 342, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":343
 *     __Pyx_globals['TD_RSP_QRY_COMB_ACTION'] = TD_CALLBACK_TYPE(TD_RSP_QRY_COMB_ACTION, 'TD_RSP_QRY_COMB_ACTION')
 *     __Pyx_globals['TD_RSP_QRY_TRANSFER_SERIAL'] = TD_CALLBACK_TYPE(TD_RSP_QRY_TRANSFER_SERIAL, 'TD_RSP_QRY_TRANSFER_SERIAL')
 *     __Pyx_globals['TD_RSP_QRY_ACCOUNT_REGISTER'] = TD_CALLBACK_TYPE(TD_RSP_QRY_ACCOUNT_REGISTER, 'TD_RSP_QRY_ACCOUNT_REGISTER')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_ERROR'] = TD_CALLBACK_TYPE(TD_RSP_ERROR, 'TD_RSP_ERROR')
 *     __Pyx_globals['TD_RTN_ORDER'] = TD_CALLBACK_TYPE(TD_RTN_ORDER, 'TD_RTN_ORDER')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 343, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_114 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_ACCOUNT_REGISTER); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 343, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_114);
    __pyx_t_2 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RSP_QRY_ACCOUNT_REGISTER};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 343, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RSP_QRY_ACCOUNT_REGISTER};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 343, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 343, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_114);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_117, __pyx_t_114);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_ACCOUNT_REGISTER);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_ACCOUNT_REGISTER);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_117, __pyx_n_s_TD_RSP_QRY_ACCOUNT_REGISTER);
      __pyx_t_114 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 343, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 343, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_ACCOUNT_REGISTER, __pyx_t_1) < 0)) __PYX_ERR(1, 343, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":344
 *     __Pyx_globals['TD_RSP_QRY_TRANSFER_SERIAL'] = TD_CALLBACK_TYPE(TD_RSP_QRY_TRANSFER_SERIAL, 'TD_RSP_QRY_TRANSFER_SERIAL')
 *     __Pyx_globals['TD_RSP_QRY_ACCOUNT_REGISTER'] = TD_CALLBACK_TYPE(TD_RSP_QRY_ACCOUNT_REGISTER, 'TD_RSP_QRY_ACCOUNT_REGISTER')
 *     __Pyx_globals['TD_RSP_ERROR'] = TD_CALLBACK_TYPE(TD_RSP_ERROR, 'TD_RSP_ERROR')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RTN_ORDER'] = TD_CALLBACK_TYPE(TD_RTN_ORDER, 'TD_RTN_ORDER')
 *     __Pyx_globals['TD_RTN_TRADE'] = TD_CALLBACK_TYPE(TD_RTN_TRADE, 'TD_RTN_TRADE')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 344, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_3 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_ERROR); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 344, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_114 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_114 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_114)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_114);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RSP_ERROR};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 344, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RSP_ERROR};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 344, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 344, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_114) {
        __Pyx_GIVEREF(__pyx_t_114); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_114); __pyx_t_114 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_117, __pyx_t_3);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_ERROR);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_ERROR);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_117, __pyx_n_s_TD_RSP_ERROR);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 344, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 344, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_ERROR, __pyx_t_1) < 0)) __PYX_ERR(1, 344, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":345
 *     __Pyx_globals['TD_RSP_QRY_ACCOUNT_REGISTER'] = TD_CALLBACK_TYPE(TD_RSP_QRY_ACCOUNT_REGISTER, 'TD_RSP_QRY_ACCOUNT_REGISTER')
 *     __Pyx_globals['TD_RSP_ERROR'] = TD_CALLBACK_TYPE(TD_RSP_ERROR, 'TD_RSP_ERROR')
 *     __Pyx_globals['TD_RTN_ORDER'] = TD_CALLBACK_TYPE(TD_RTN_ORDER, 'TD_RTN_ORDER')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RTN_TRADE'] = TD_CALLBACK_TYPE(TD_RTN_TRADE, 'TD_RTN_TRADE')
 *     __Pyx_globals['TD_ERR_RTN_ORDER_INSERT'] = TD_CALLBACK_TYPE(TD_ERR_RTN_ORDER_INSERT, 'TD_ERR_RTN_ORDER_INSERT')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 345, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RTN_ORDER); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 345, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RTN_ORDER};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 345, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RTN_ORDER};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 345, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_114 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 345, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_114);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_114, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_114, 0+__pyx_t_117, __pyx_t_2);
      __Pyx_INCREF(__pyx_n_s_TD_RTN_ORDER);
      __Pyx_GIVEREF(__pyx_n_s_TD_RTN_ORDER);
      PyTuple_SET_ITEM(__pyx_t_114, 1+__pyx_t_117, __pyx_n_s_TD_RTN_ORDER);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_114, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 345, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 345, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RTN_ORDER, __pyx_t_1) < 0)) __PYX_ERR(1, 345, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":346
 *     __Pyx_globals['TD_RSP_ERROR'] = TD_CALLBACK_TYPE(TD_RSP_ERROR, 'TD_RSP_ERROR')
 *     __Pyx_globals['TD_RTN_ORDER'] = TD_CALLBACK_TYPE(TD_RTN_ORDER, 'TD_RTN_ORDER')
 *     __Pyx_globals['TD_RTN_TRADE'] = TD_CALLBACK_TYPE(TD_RTN_TRADE, 'TD_RTN_TRADE')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_ERR_RTN_ORDER_INSERT'] = TD_CALLBACK_TYPE(TD_ERR_RTN_ORDER_INSERT, 'TD_ERR_RTN_ORDER_INSERT')
 *     __Pyx_globals['TD_ERR_RTN_ORDER_ACTION'] = TD_CALLBACK_TYPE(TD_ERR_RTN_ORDER_ACTION, 'TD_ERR_RTN_ORDER_ACTION')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 346, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_114 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RTN_TRADE); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 346, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_114);
    __pyx_t_2 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RTN_TRADE};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 346, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RTN_TRADE};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 346, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 346, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_114);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_117, __pyx_t_114);
      __Pyx_INCREF(__pyx_n_s_TD_RTN_TRADE);
      __Pyx_GIVEREF(__pyx_n_s_TD_RTN_TRADE);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_117, __pyx_n_s_TD_RTN_TRADE);
      __pyx_t_114 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 346, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 346, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RTN_TRADE, __pyx_t_1) < 0)) __PYX_ERR(1, 346, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":347
 *     __Pyx_globals['TD_RTN_ORDER'] = TD_CALLBACK_TYPE(TD_RTN_ORDER, 'TD_RTN_ORDER')
 *     __Pyx_globals['TD_RTN_TRADE'] = TD_CALLBACK_TYPE(TD_RTN_TRADE, 'TD_RTN_TRADE')
 *     __Pyx_globals['TD_ERR_RTN_ORDER_INSERT'] = TD_CALLBACK_TYPE(TD_ERR_RTN_ORDER_INSERT, 'TD_ERR_RTN_ORDER_INSERT')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_ERR_RTN_ORDER_ACTION'] = TD_CALLBACK_TYPE(TD_ERR_RTN_ORDER_ACTION, 'TD_ERR_RTN_ORDER_ACTION')
 *     __Pyx_globals['TD_RTN_INSTRUMENT_STATUS'] = TD_CALLBACK_TYPE(TD_RTN_INSTRUMENT_STATUS, 'TD_RTN_INSTRUMENT_STATUS')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 347, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_3 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_ERR_RTN_ORDER_INSERT); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 347, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_114 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_114 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_114)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_114);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_ERR_RTN_ORDER_INSERT};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 347, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_ERR_RTN_ORDER_INSERT};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 347, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 347, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_114) {
        __Pyx_GIVEREF(__pyx_t_114); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_114); __pyx_t_114 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_117, __pyx_t_3);
      __Pyx_INCREF(__pyx_n_s_TD_ERR_RTN_ORDER_INSERT);
      __Pyx_GIVEREF(__pyx_n_s_TD_ERR_RTN_ORDER_INSERT);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_117, __pyx_n_s_TD_ERR_RTN_ORDER_INSERT);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 347, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 347, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_ERR_RTN_ORDER_INSERT, __pyx_t_1) < 0)) __PYX_ERR(1, 347, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":348
 *     __Pyx_globals['TD_RTN_TRADE'] = TD_CALLBACK_TYPE(TD_RTN_TRADE, 'TD_RTN_TRADE')
 *     __Pyx_globals['TD_ERR_RTN_ORDER_INSERT'] = TD_CALLBACK_TYPE(TD_ERR_RTN_ORDER_INSERT, 'TD_ERR_RTN_ORDER_INSERT')
 *     __Pyx_globals['TD_ERR_RTN_ORDER_ACTION'] = TD_CALLBACK_TYPE(TD_ERR_RTN_ORDER_ACTION, 'TD_ERR_RTN_ORDER_ACTION')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RTN_INSTRUMENT_STATUS'] = TD_CALLBACK_TYPE(TD_RTN_INSTRUMENT_STATUS, 'TD_RTN_INSTRUMENT_STATUS')
 *     __Pyx_globals['TD_RTN_BULLETIN'] = TD_CALLBACK_TYPE(TD_RTN_BULLETIN, 'TD_RTN_BULLETIN')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 348, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_ERR_RTN_ORDER_ACTION); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 348, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_ERR_RTN_ORDER_ACTION};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 348, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_ERR_RTN_ORDER_ACTION};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 348, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_114 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 348, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_114);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_114, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_114, 0+__pyx_t_117, __pyx_t_2);
      __Pyx_INCREF(__pyx_n_s_TD_ERR_RTN_ORDER_ACTION);
      __Pyx_GIVEREF(__pyx_n_s_TD_ERR_RTN_ORDER_ACTION);
      PyTuple_SET_ITEM(__pyx_t_114, 1+__pyx_t_117, __pyx_n_s_TD_ERR_RTN_ORDER_ACTION);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_114, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 348, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 348, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_ERR_RTN_ORDER_ACTION, __pyx_t_1) < 0)) __PYX_ERR(1, 348, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":349
 *     __Pyx_globals['TD_ERR_RTN_ORDER_INSERT'] = TD_CALLBACK_TYPE(TD_ERR_RTN_ORDER_INSERT, 'TD_ERR_RTN_ORDER_INSERT')
 *     __Pyx_globals['TD_ERR_RTN_ORDER_ACTION'] = TD_CALLBACK_TYPE(TD_ERR_RTN_ORDER_ACTION, 'TD_ERR_RTN_ORDER_ACTION')
 *     __Pyx_globals['TD_RTN_INSTRUMENT_STATUS'] = TD_CALLBACK_TYPE(TD_RTN_INSTRUMENT_STATUS, 'TD_RTN_INSTRUMENT_STATUS')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RTN_BULLETIN'] = TD_CALLBACK_TYPE(TD_RTN_BULLETIN, 'TD_RTN_BULLETIN')
 *     __Pyx_globals['TD_RTN_TRADING_NOTICE'] = TD_CALLBACK_TYPE(TD_RTN_TRADING_NOTICE, 'TD_RTN_TRADING_NOTICE')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 349, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_114 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RTN_INSTRUMENT_STATUS); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 349, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_114);
    __pyx_t_2 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RTN_INSTRUMENT_STATUS};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 349, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RTN_INSTRUMENT_STATUS};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 349, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 349, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_114);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_117, __pyx_t_114);
      __Pyx_INCREF(__pyx_n_s_TD_RTN_INSTRUMENT_STATUS);
      __Pyx_GIVEREF(__pyx_n_s_TD_RTN_INSTRUMENT_STATUS);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_117, __pyx_n_s_TD_RTN_INSTRUMENT_STATUS);
      __pyx_t_114 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 349, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 349, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RTN_INSTRUMENT_STATUS, __pyx_t_1) < 0)) __PYX_ERR(1, 349, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":350
 *     __Pyx_globals['TD_ERR_RTN_ORDER_ACTION'] = TD_CALLBACK_TYPE(TD_ERR_RTN_ORDER_ACTION, 'TD_ERR_RTN_ORDER_ACTION')
 *     __Pyx_globals['TD_RTN_INSTRUMENT_STATUS'] = TD_CALLBACK_TYPE(TD_RTN_INSTRUMENT_STATUS, 'TD_RTN_INSTRUMENT_STATUS')
 *     __Pyx_globals['TD_RTN_BULLETIN'] = TD_CALLBACK_TYPE(TD_RTN_BULLETIN, 'TD_RTN_BULLETIN')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RTN_TRADING_NOTICE'] = TD_CALLBACK_TYPE(TD_RTN_TRADING_NOTICE, 'TD_RTN_TRADING_NOTICE')
 *     __Pyx_globals['TD_RTN_ERROR_CONDITIONAL_ORDER'] = TD_CALLBACK_TYPE(TD_RTN_ERROR_CONDITIONAL_ORDER, 'TD_RTN_ERROR_CONDITIONAL_ORDER')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 350, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_3 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RTN_BULLETIN); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 350, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_114 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_114 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_114)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_114);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RTN_BULLETIN};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 350, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RTN_BULLETIN};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 350, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 350, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_114) {
        __Pyx_GIVEREF(__pyx_t_114); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_114); __pyx_t_114 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_117, __pyx_t_3);
      __Pyx_INCREF(__pyx_n_s_TD_RTN_BULLETIN);
      __Pyx_GIVEREF(__pyx_n_s_TD_RTN_BULLETIN);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_117, __pyx_n_s_TD_RTN_BULLETIN);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 350, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 350, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RTN_BULLETIN, __pyx_t_1) < 0)) __PYX_ERR(1, 350, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":351
 *     __Pyx_globals['TD_RTN_INSTRUMENT_STATUS'] = TD_CALLBACK_TYPE(TD_RTN_INSTRUMENT_STATUS, 'TD_RTN_INSTRUMENT_STATUS')
 *     __Pyx_globals['TD_RTN_BULLETIN'] = TD_CALLBACK_TYPE(TD_RTN_BULLETIN, 'TD_RTN_BULLETIN')
 *     __Pyx_globals['TD_RTN_TRADING_NOTICE'] = TD_CALLBACK_TYPE(TD_RTN_TRADING_NOTICE, 'TD_RTN_TRADING_NOTICE')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RTN_ERROR_CONDITIONAL_ORDER'] = TD_CALLBACK_TYPE(TD_RTN_ERROR_CONDITIONAL_ORDER, 'TD_RTN_ERROR_CONDITIONAL_ORDER')
 *     __Pyx_globals['TD_RTN_EXEC_ORDER'] = TD_CALLBACK_TYPE(TD_RTN_EXEC_ORDER, 'TD_RTN_EXEC_ORDER')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RTN_TRADING_NOTICE); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RTN_TRADING_NOTICE};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 351, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RTN_TRADING_NOTICE};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 351, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_114 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 351, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_114);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_114, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_114, 0+__pyx_t_117, __pyx_t_2);
      __Pyx_INCREF(__pyx_n_s_TD_RTN_TRADING_NOTICE);
      __Pyx_GIVEREF(__pyx_n_s_TD_RTN_TRADING_NOTICE);
      PyTuple_SET_ITEM(__pyx_t_114, 1+__pyx_t_117, __pyx_n_s_TD_RTN_TRADING_NOTICE);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_114, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 351, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 351, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RTN_TRADING_NOTICE, __pyx_t_1) < 0)) __PYX_ERR(1, 351, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":352
 *     __Pyx_globals['TD_RTN_BULLETIN'] = TD_CALLBACK_TYPE(TD_RTN_BULLETIN, 'TD_RTN_BULLETIN')
 *     __Pyx_globals['TD_RTN_TRADING_NOTICE'] = TD_CALLBACK_TYPE(TD_RTN_TRADING_NOTICE, 'TD_RTN_TRADING_NOTICE')
 *     __Pyx_globals['TD_RTN_ERROR_CONDITIONAL_ORDER'] = TD_CALLBACK_TYPE(TD_RTN_ERROR_CONDITIONAL_ORDER, 'TD_RTN_ERROR_CONDITIONAL_ORDER')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RTN_EXEC_ORDER'] = TD_CALLBACK_TYPE(TD_RTN_EXEC_ORDER, 'TD_RTN_EXEC_ORDER')
 *     __Pyx_globals['TD_ERR_RTN_EXEC_ORDER_INSERT'] = TD_CALLBACK_TYPE(TD_ERR_RTN_EXEC_ORDER_INSERT, 'TD_ERR_RTN_EXEC_ORDER_INSERT')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_114 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RTN_ERROR_CONDITIONAL_ORDER); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_114);
    __pyx_t_2 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RTN_ERROR_CONDITIONAL_ORDER};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 352, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RTN_ERROR_CONDITIONAL_ORDER};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 352, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 352, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_114);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_117, __pyx_t_114);
      __Pyx_INCREF(__pyx_n_s_TD_RTN_ERROR_CONDITIONAL_ORDER);
      __Pyx_GIVEREF(__pyx_n_s_TD_RTN_ERROR_CONDITIONAL_ORDER);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_117, __pyx_n_s_TD_RTN_ERROR_CONDITIONAL_ORDER);
      __pyx_t_114 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 352, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 352, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RTN_ERROR_CONDITIONAL_ORDER, __pyx_t_1) < 0)) __PYX_ERR(1, 352, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":353
 *     __Pyx_globals['TD_RTN_TRADING_NOTICE'] = TD_CALLBACK_TYPE(TD_RTN_TRADING_NOTICE, 'TD_RTN_TRADING_NOTICE')
 *     __Pyx_globals['TD_RTN_ERROR_CONDITIONAL_ORDER'] = TD_CALLBACK_TYPE(TD_RTN_ERROR_CONDITIONAL_ORDER, 'TD_RTN_ERROR_CONDITIONAL_ORDER')
 *     __Pyx_globals['TD_RTN_EXEC_ORDER'] = TD_CALLBACK_TYPE(TD_RTN_EXEC_ORDER, 'TD_RTN_EXEC_ORDER')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_ERR_RTN_EXEC_ORDER_INSERT'] = TD_CALLBACK_TYPE(TD_ERR_RTN_EXEC_ORDER_INSERT, 'TD_ERR_RTN_EXEC_ORDER_INSERT')
 *     __Pyx_globals['TD_ERR_RTN_EXEC_ORDER_ACTION'] = TD_CALLBACK_TYPE(TD_ERR_RTN_EXEC_ORDER_ACTION, 'TD_ERR_RTN_EXEC_ORDER_ACTION')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 353, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_3 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RTN_EXEC_ORDER); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 353, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_114 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_114 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_114)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_114);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RTN_EXEC_ORDER};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 353, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RTN_EXEC_ORDER};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 353, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 353, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_114) {
        __Pyx_GIVEREF(__pyx_t_114); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_114); __pyx_t_114 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_117, __pyx_t_3);
      __Pyx_INCREF(__pyx_n_s_TD_RTN_EXEC_ORDER);
      __Pyx_GIVEREF(__pyx_n_s_TD_RTN_EXEC_ORDER);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_117, __pyx_n_s_TD_RTN_EXEC_ORDER);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 353, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 353, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RTN_EXEC_ORDER, __pyx_t_1) < 0)) __PYX_ERR(1, 353, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":354
 *     __Pyx_globals['TD_RTN_ERROR_CONDITIONAL_ORDER'] = TD_CALLBACK_TYPE(TD_RTN_ERROR_CONDITIONAL_ORDER, 'TD_RTN_ERROR_CONDITIONAL_ORDER')
 *     __Pyx_globals['TD_RTN_EXEC_ORDER'] = TD_CALLBACK_TYPE(TD_RTN_EXEC_ORDER, 'TD_RTN_EXEC_ORDER')
 *     __Pyx_globals['TD_ERR_RTN_EXEC_ORDER_INSERT'] = TD_CALLBACK_TYPE(TD_ERR_RTN_EXEC_ORDER_INSERT, 'TD_ERR_RTN_EXEC_ORDER_INSERT')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_ERR_RTN_EXEC_ORDER_ACTION'] = TD_CALLBACK_TYPE(TD_ERR_RTN_EXEC_ORDER_ACTION, 'TD_ERR_RTN_EXEC_ORDER_ACTION')
 *     __Pyx_globals['TD_ERR_RTN_FOR_QUOTE_INSERT'] = TD_CALLBACK_TYPE(TD_ERR_RTN_FOR_QUOTE_INSERT, 'TD_ERR_RTN_FOR_QUOTE_INSERT')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 354, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_ERR_RTN_EXEC_ORDER_INSERT); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 354, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_ERR_RTN_EXEC_ORDER_INSERT};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 354, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_ERR_RTN_EXEC_ORDER_INSERT};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 354, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_114 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 354, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_114);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_114, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_114, 0+__pyx_t_117, __pyx_t_2);
      __Pyx_INCREF(__pyx_n_s_TD_ERR_RTN_EXEC_ORDER_INSERT);
      __Pyx_GIVEREF(__pyx_n_s_TD_ERR_RTN_EXEC_ORDER_INSERT);
      PyTuple_SET_ITEM(__pyx_t_114, 1+__pyx_t_117, __pyx_n_s_TD_ERR_RTN_EXEC_ORDER_INSERT);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_114, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 354, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 354, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_ERR_RTN_EXEC_ORDER_INSERT, __pyx_t_1) < 0)) __PYX_ERR(1, 354, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":355
 *     __Pyx_globals['TD_RTN_EXEC_ORDER'] = TD_CALLBACK_TYPE(TD_RTN_EXEC_ORDER, 'TD_RTN_EXEC_ORDER')
 *     __Pyx_globals['TD_ERR_RTN_EXEC_ORDER_INSERT'] = TD_CALLBACK_TYPE(TD_ERR_RTN_EXEC_ORDER_INSERT, 'TD_ERR_RTN_EXEC_ORDER_INSERT')
 *     __Pyx_globals['TD_ERR_RTN_EXEC_ORDER_ACTION'] = TD_CALLBACK_TYPE(TD_ERR_RTN_EXEC_ORDER_ACTION, 'TD_ERR_RTN_EXEC_ORDER_ACTION')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_ERR_RTN_FOR_QUOTE_INSERT'] = TD_CALLBACK_TYPE(TD_ERR_RTN_FOR_QUOTE_INSERT, 'TD_ERR_RTN_FOR_QUOTE_INSERT')
 *     __Pyx_globals['TD_RTN_QUOTE'] = TD_CALLBACK_TYPE(TD_RTN_QUOTE, 'TD_RTN_QUOTE')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 355, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_114 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_ERR_RTN_EXEC_ORDER_ACTION); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 355, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_114);
    __pyx_t_2 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_ERR_RTN_EXEC_ORDER_ACTION};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 355, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_ERR_RTN_EXEC_ORDER_ACTION};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 355, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 355, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_114);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_117, __pyx_t_114);
      __Pyx_INCREF(__pyx_n_s_TD_ERR_RTN_EXEC_ORDER_ACTION);
      __Pyx_GIVEREF(__pyx_n_s_TD_ERR_RTN_EXEC_ORDER_ACTION);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_117, __pyx_n_s_TD_ERR_RTN_EXEC_ORDER_ACTION);
      __pyx_t_114 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 355, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 355, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_ERR_RTN_EXEC_ORDER_ACTION, __pyx_t_1) < 0)) __PYX_ERR(1, 355, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":356
 *     __Pyx_globals['TD_ERR_RTN_EXEC_ORDER_INSERT'] = TD_CALLBACK_TYPE(TD_ERR_RTN_EXEC_ORDER_INSERT, 'TD_ERR_RTN_EXEC_ORDER_INSERT')
 *     __Pyx_globals['TD_ERR_RTN_EXEC_ORDER_ACTION'] = TD_CALLBACK_TYPE(TD_ERR_RTN_EXEC_ORDER_ACTION, 'TD_ERR_RTN_EXEC_ORDER_ACTION')
 *     __Pyx_globals['TD_ERR_RTN_FOR_QUOTE_INSERT'] = TD_CALLBACK_TYPE(TD_ERR_RTN_FOR_QUOTE_INSERT, 'TD_ERR_RTN_FOR_QUOTE_INSERT')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RTN_QUOTE'] = TD_CALLBACK_TYPE(TD_RTN_QUOTE, 'TD_RTN_QUOTE')
 *     __Pyx_globals['TD_ERR_RTN_QUOTE_INSERT'] = TD_CALLBACK_TYPE(TD_ERR_RTN_QUOTE_INSERT, 'TD_ERR_RTN_QUOTE_INSERT')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 356, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_3 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_ERR_RTN_FOR_QUOTE_INSERT); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 356, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_114 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_114 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_114)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_114);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_ERR_RTN_FOR_QUOTE_INSERT};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 356, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_ERR_RTN_FOR_QUOTE_INSERT};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 356, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 356, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_114) {
        __Pyx_GIVEREF(__pyx_t_114); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_114); __pyx_t_114 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_117, __pyx_t_3);
      __Pyx_INCREF(__pyx_n_s_TD_ERR_RTN_FOR_QUOTE_INSERT);
      __Pyx_GIVEREF(__pyx_n_s_TD_ERR_RTN_FOR_QUOTE_INSERT);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_117, __pyx_n_s_TD_ERR_RTN_FOR_QUOTE_INSERT);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 356, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 356, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_ERR_RTN_FOR_QUOTE_INSERT, __pyx_t_1) < 0)) __PYX_ERR(1, 356, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":357
 *     __Pyx_globals['TD_ERR_RTN_EXEC_ORDER_ACTION'] = TD_CALLBACK_TYPE(TD_ERR_RTN_EXEC_ORDER_ACTION, 'TD_ERR_RTN_EXEC_ORDER_ACTION')
 *     __Pyx_globals['TD_ERR_RTN_FOR_QUOTE_INSERT'] = TD_CALLBACK_TYPE(TD_ERR_RTN_FOR_QUOTE_INSERT, 'TD_ERR_RTN_FOR_QUOTE_INSERT')
 *     __Pyx_globals['TD_RTN_QUOTE'] = TD_CALLBACK_TYPE(TD_RTN_QUOTE, 'TD_RTN_QUOTE')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_ERR_RTN_QUOTE_INSERT'] = TD_CALLBACK_TYPE(TD_ERR_RTN_QUOTE_INSERT, 'TD_ERR_RTN_QUOTE_INSERT')
 *     __Pyx_globals['TD_ERR_RTN_QUOTE_ACTION'] = TD_CALLBACK_TYPE(TD_ERR_RTN_QUOTE_ACTION, 'TD_ERR_RTN_QUOTE_ACTION')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 357, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RTN_QUOTE); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 357, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RTN_QUOTE};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 357, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RTN_QUOTE};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 357, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_114 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 357, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_114);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_114, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_114, 0+__pyx_t_117, __pyx_t_2);
      __Pyx_INCREF(__pyx_n_s_TD_RTN_QUOTE);
      __Pyx_GIVEREF(__pyx_n_s_TD_RTN_QUOTE);
      PyTuple_SET_ITEM(__pyx_t_114, 1+__pyx_t_117, __pyx_n_s_TD_RTN_QUOTE);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_114, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 357, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 357, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RTN_QUOTE, __pyx_t_1) < 0)) __PYX_ERR(1, 357, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":358
 *     __Pyx_globals['TD_ERR_RTN_FOR_QUOTE_INSERT'] = TD_CALLBACK_TYPE(TD_ERR_RTN_FOR_QUOTE_INSERT, 'TD_ERR_RTN_FOR_QUOTE_INSERT')
 *     __Pyx_globals['TD_RTN_QUOTE'] = TD_CALLBACK_TYPE(TD_RTN_QUOTE, 'TD_RTN_QUOTE')
 *     __Pyx_globals['TD_ERR_RTN_QUOTE_INSERT'] = TD_CALLBACK_TYPE(TD_ERR_RTN_QUOTE_INSERT, 'TD_ERR_RTN_QUOTE_INSERT')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_ERR_RTN_QUOTE_ACTION'] = TD_CALLBACK_TYPE(TD_ERR_RTN_QUOTE_ACTION, 'TD_ERR_RTN_QUOTE_ACTION')
 *     __Pyx_globals['TD_RTN_FOR_QUOTE_RSP'] = TD_CALLBACK_TYPE(TD_RTN_FOR_QUOTE_RSP, 'TD_RTN_FOR_QUOTE_RSP')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 358, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_114 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_ERR_RTN_QUOTE_INSERT); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 358, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_114);
    __pyx_t_2 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_ERR_RTN_QUOTE_INSERT};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 358, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_ERR_RTN_QUOTE_INSERT};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 358, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 358, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_114);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_117, __pyx_t_114);
      __Pyx_INCREF(__pyx_n_s_TD_ERR_RTN_QUOTE_INSERT);
      __Pyx_GIVEREF(__pyx_n_s_TD_ERR_RTN_QUOTE_INSERT);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_117, __pyx_n_s_TD_ERR_RTN_QUOTE_INSERT);
      __pyx_t_114 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 358, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 358, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_ERR_RTN_QUOTE_INSERT, __pyx_t_1) < 0)) __PYX_ERR(1, 358, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":359
 *     __Pyx_globals['TD_RTN_QUOTE'] = TD_CALLBACK_TYPE(TD_RTN_QUOTE, 'TD_RTN_QUOTE')
 *     __Pyx_globals['TD_ERR_RTN_QUOTE_INSERT'] = TD_CALLBACK_TYPE(TD_ERR_RTN_QUOTE_INSERT, 'TD_ERR_RTN_QUOTE_INSERT')
 *     __Pyx_globals['TD_ERR_RTN_QUOTE_ACTION'] = TD_CALLBACK_TYPE(TD_ERR_RTN_QUOTE_ACTION, 'TD_ERR_RTN_QUOTE_ACTION')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RTN_FOR_QUOTE_RSP'] = TD_CALLBACK_TYPE(TD_RTN_FOR_QUOTE_RSP, 'TD_RTN_FOR_QUOTE_RSP')
 *     __Pyx_globals['TD_RTN_CFMMC_TRADING_ACCOUNT_TOKEN'] = TD_CALLBACK_TYPE(TD_RTN_CFMMC_TRADING_ACCOUNT_TOKEN, 'TD_RTN_CFMMC_TRADING_ACCOUNT_TOKEN')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 359, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_3 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_ERR_RTN_QUOTE_ACTION); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 359, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_114 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_114 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_114)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_114);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_ERR_RTN_QUOTE_ACTION};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 359, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_ERR_RTN_QUOTE_ACTION};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 359, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 359, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_114) {
        __Pyx_GIVEREF(__pyx_t_114); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_114); __pyx_t_114 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_117, __pyx_t_3);
      __Pyx_INCREF(__pyx_n_s_TD_ERR_RTN_QUOTE_ACTION);
      __Pyx_GIVEREF(__pyx_n_s_TD_ERR_RTN_QUOTE_ACTION);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_117, __pyx_n_s_TD_ERR_RTN_QUOTE_ACTION);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 359, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 359, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_ERR_RTN_QUOTE_ACTION, __pyx_t_1) < 0)) __PYX_ERR(1, 359, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":360
 *     __Pyx_globals['TD_ERR_RTN_QUOTE_INSERT'] = TD_CALLBACK_TYPE(TD_ERR_RTN_QUOTE_INSERT, 'TD_ERR_RTN_QUOTE_INSERT')
 *     __Pyx_globals['TD_ERR_RTN_QUOTE_ACTION'] = TD_CALLBACK_TYPE(TD_ERR_RTN_QUOTE_ACTION, 'TD_ERR_RTN_QUOTE_ACTION')
 *     __Pyx_globals['TD_RTN_FOR_QUOTE_RSP'] = TD_CALLBACK_TYPE(TD_RTN_FOR_QUOTE_RSP, 'TD_RTN_FOR_QUOTE_RSP')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RTN_CFMMC_TRADING_ACCOUNT_TOKEN'] = TD_CALLBACK_TYPE(TD_RTN_CFMMC_TRADING_ACCOUNT_TOKEN, 'TD_RTN_CFMMC_TRADING_ACCOUNT_TOKEN')
 *     __Pyx_globals['TD_ERR_RTN_BATCH_ORDER_ACTION'] = TD_CALLBACK_TYPE(TD_ERR_RTN_BATCH_ORDER_ACTION, 'TD_ERR_RTN_BATCH_ORDER_ACTION')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 360, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RTN_FOR_QUOTE_RSP); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 360, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RTN_FOR_QUOTE_RSP};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 360, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RTN_FOR_QUOTE_RSP};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 360, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_114 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 360, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_114);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_114, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_114, 0+__pyx_t_117, __pyx_t_2);
      __Pyx_INCREF(__pyx_n_s_TD_RTN_FOR_QUOTE_RSP);
      __Pyx_GIVEREF(__pyx_n_s_TD_RTN_FOR_QUOTE_RSP);
      PyTuple_SET_ITEM(__pyx_t_114, 1+__pyx_t_117, __pyx_n_s_TD_RTN_FOR_QUOTE_RSP);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_114, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 360, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 360, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RTN_FOR_QUOTE_RSP, __pyx_t_1) < 0)) __PYX_ERR(1, 360, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":361
 *     __Pyx_globals['TD_ERR_RTN_QUOTE_ACTION'] = TD_CALLBACK_TYPE(TD_ERR_RTN_QUOTE_ACTION, 'TD_ERR_RTN_QUOTE_ACTION')
 *     __Pyx_globals['TD_RTN_FOR_QUOTE_RSP'] = TD_CALLBACK_TYPE(TD_RTN_FOR_QUOTE_RSP, 'TD_RTN_FOR_QUOTE_RSP')
 *     __Pyx_globals['TD_RTN_CFMMC_TRADING_ACCOUNT_TOKEN'] = TD_CALLBACK_TYPE(TD_RTN_CFMMC_TRADING_ACCOUNT_TOKEN, 'TD_RTN_CFMMC_TRADING_ACCOUNT_TOKEN')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_ERR_RTN_BATCH_ORDER_ACTION'] = TD_CALLBACK_TYPE(TD_ERR_RTN_BATCH_ORDER_ACTION, 'TD_ERR_RTN_BATCH_ORDER_ACTION')
 *     __Pyx_globals['TD_RTN_COMB_ACTION'] = TD_CALLBACK_TYPE(TD_RTN_COMB_ACTION, 'TD_RTN_COMB_ACTION')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 361, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_114 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RTN_CFMMC_TRADING_ACCOUNT_TOKEN); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 361, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_114);
    __pyx_t_2 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RTN_CFMMC_TRADING_ACCOUNT_TOK};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 361, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RTN_CFMMC_TRADING_ACCOUNT_TOK};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 361, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 361, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_114);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_117, __pyx_t_114);
      __Pyx_INCREF(__pyx_n_s_TD_RTN_CFMMC_TRADING_ACCOUNT_TOK);
      __Pyx_GIVEREF(__pyx_n_s_TD_RTN_CFMMC_TRADING_ACCOUNT_TOK);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_117, __pyx_n_s_TD_RTN_CFMMC_TRADING_ACCOUNT_TOK);
      __pyx_t_114 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 361, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 361, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RTN_CFMMC_TRADING_ACCOUNT_TOK, __pyx_t_1) < 0)) __PYX_ERR(1, 361, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":362
 *     __Pyx_globals['TD_RTN_FOR_QUOTE_RSP'] = TD_CALLBACK_TYPE(TD_RTN_FOR_QUOTE_RSP, 'TD_RTN_FOR_QUOTE_RSP')
 *     __Pyx_globals['TD_RTN_CFMMC_TRADING_ACCOUNT_TOKEN'] = TD_CALLBACK_TYPE(TD_RTN_CFMMC_TRADING_ACCOUNT_TOKEN, 'TD_RTN_CFMMC_TRADING_ACCOUNT_TOKEN')
 *     __Pyx_globals['TD_ERR_RTN_BATCH_ORDER_ACTION'] = TD_CALLBACK_TYPE(TD_ERR_RTN_BATCH_ORDER_ACTION, 'TD_ERR_RTN_BATCH_ORDER_ACTION')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RTN_COMB_ACTION'] = TD_CALLBACK_TYPE(TD_RTN_COMB_ACTION, 'TD_RTN_COMB_ACTION')
 *     __Pyx_globals['TD_ERR_RTN_COMB_ACTION_INSERT'] = TD_CALLBACK_TYPE(TD_ERR_RTN_COMB_ACTION_INSERT, 'TD_ERR_RTN_COMB_ACTION_INSERT')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 362, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_3 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_ERR_RTN_BATCH_ORDER_ACTION); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 362, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_114 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_114 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_114)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_114);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_ERR_RTN_BATCH_ORDER_ACTION};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 362, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_ERR_RTN_BATCH_ORDER_ACTION};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 362, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 362, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_114) {
        __Pyx_GIVEREF(__pyx_t_114); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_114); __pyx_t_114 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_117, __pyx_t_3);
      __Pyx_INCREF(__pyx_n_s_TD_ERR_RTN_BATCH_ORDER_ACTION);
      __Pyx_GIVEREF(__pyx_n_s_TD_ERR_RTN_BATCH_ORDER_ACTION);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_117, __pyx_n_s_TD_ERR_RTN_BATCH_ORDER_ACTION);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 362, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 362, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_ERR_RTN_BATCH_ORDER_ACTION, __pyx_t_1) < 0)) __PYX_ERR(1, 362, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":363
 *     __Pyx_globals['TD_RTN_CFMMC_TRADING_ACCOUNT_TOKEN'] = TD_CALLBACK_TYPE(TD_RTN_CFMMC_TRADING_ACCOUNT_TOKEN, 'TD_RTN_CFMMC_TRADING_ACCOUNT_TOKEN')
 *     __Pyx_globals['TD_ERR_RTN_BATCH_ORDER_ACTION'] = TD_CALLBACK_TYPE(TD_ERR_RTN_BATCH_ORDER_ACTION, 'TD_ERR_RTN_BATCH_ORDER_ACTION')
 *     __Pyx_globals['TD_RTN_COMB_ACTION'] = TD_CALLBACK_TYPE(TD_RTN_COMB_ACTION, 'TD_RTN_COMB_ACTION')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_ERR_RTN_COMB_ACTION_INSERT'] = TD_CALLBACK_TYPE(TD_ERR_RTN_COMB_ACTION_INSERT, 'TD_ERR_RTN_COMB_ACTION_INSERT')
 *     __Pyx_globals['TD_RSP_QRY_CONTRACT_BANK'] = TD_CALLBACK_TYPE(TD_RSP_QRY_CONTRACT_BANK, 'TD_RSP_QRY_CONTRACT_BANK')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 363, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RTN_COMB_ACTION); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 363, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RTN_COMB_ACTION};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 363, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RTN_COMB_ACTION};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 363, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_114 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 363, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_114);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_114, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_114, 0+__pyx_t_117, __pyx_t_2);
      __Pyx_INCREF(__pyx_n_s_TD_RTN_COMB_ACTION);
      __Pyx_GIVEREF(__pyx_n_s_TD_RTN_COMB_ACTION);
      PyTuple_SET_ITEM(__pyx_t_114, 1+__pyx_t_117, __pyx_n_s_TD_RTN_COMB_ACTION);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_114, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 363, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 363, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RTN_COMB_ACTION, __pyx_t_1) < 0)) __PYX_ERR(1, 363, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":364
 *     __Pyx_globals['TD_ERR_RTN_BATCH_ORDER_ACTION'] = TD_CALLBACK_TYPE(TD_ERR_RTN_BATCH_ORDER_ACTION, 'TD_ERR_RTN_BATCH_ORDER_ACTION')
 *     __Pyx_globals['TD_RTN_COMB_ACTION'] = TD_CALLBACK_TYPE(TD_RTN_COMB_ACTION, 'TD_RTN_COMB_ACTION')
 *     __Pyx_globals['TD_ERR_RTN_COMB_ACTION_INSERT'] = TD_CALLBACK_TYPE(TD_ERR_RTN_COMB_ACTION_INSERT, 'TD_ERR_RTN_COMB_ACTION_INSERT')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_CONTRACT_BANK'] = TD_CALLBACK_TYPE(TD_RSP_QRY_CONTRACT_BANK, 'TD_RSP_QRY_CONTRACT_BANK')
 *     __Pyx_globals['TD_RSP_QRY_PACK_ORDER'] = TD_CALLBACK_TYPE(TD_RSP_QRY_PACK_ORDER, 'TD_RSP_QRY_PACK_ORDER')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 364, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_114 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_ERR_RTN_COMB_ACTION_INSERT); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 364, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_114);
    __pyx_t_2 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_ERR_RTN_COMB_ACTION_INSERT};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 364, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_ERR_RTN_COMB_ACTION_INSERT};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 364, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 364, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_114);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_117, __pyx_t_114);
      __Pyx_INCREF(__pyx_n_s_TD_ERR_RTN_COMB_ACTION_INSERT);
      __Pyx_GIVEREF(__pyx_n_s_TD_ERR_RTN_COMB_ACTION_INSERT);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_117, __pyx_n_s_TD_ERR_RTN_COMB_ACTION_INSERT);
      __pyx_t_114 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 364, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 364, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_ERR_RTN_COMB_ACTION_INSERT, __pyx_t_1) < 0)) __PYX_ERR(1, 364, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":365
 *     __Pyx_globals['TD_RTN_COMB_ACTION'] = TD_CALLBACK_TYPE(TD_RTN_COMB_ACTION, 'TD_RTN_COMB_ACTION')
 *     __Pyx_globals['TD_ERR_RTN_COMB_ACTION_INSERT'] = TD_CALLBACK_TYPE(TD_ERR_RTN_COMB_ACTION_INSERT, 'TD_ERR_RTN_COMB_ACTION_INSERT')
 *     __Pyx_globals['TD_RSP_QRY_CONTRACT_BANK'] = TD_CALLBACK_TYPE(TD_RSP_QRY_CONTRACT_BANK, 'TD_RSP_QRY_CONTRACT_BANK')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_PACK_ORDER'] = TD_CALLBACK_TYPE(TD_RSP_QRY_PACK_ORDER, 'TD_RSP_QRY_PACK_ORDER')
 *     __Pyx_globals['TD_RSP_QRY_PACK_ORDER_ACTION'] = TD_CALLBACK_TYPE(TD_RSP_QRY_PACK_ORDER_ACTION, 'TD_RSP_QRY_PACK_ORDER_ACTION')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 365, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_3 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_CONTRACT_BANK); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 365, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_114 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_114 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_114)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_114);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RSP_QRY_CONTRACT_BANK};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 365, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RSP_QRY_CONTRACT_BANK};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 365, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 365, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_114) {
        __Pyx_GIVEREF(__pyx_t_114); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_114); __pyx_t_114 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_117, __pyx_t_3);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_CONTRACT_BANK);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_CONTRACT_BANK);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_117, __pyx_n_s_TD_RSP_QRY_CONTRACT_BANK);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 365, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 365, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_CONTRACT_BANK, __pyx_t_1) < 0)) __PYX_ERR(1, 365, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":366
 *     __Pyx_globals['TD_ERR_RTN_COMB_ACTION_INSERT'] = TD_CALLBACK_TYPE(TD_ERR_RTN_COMB_ACTION_INSERT, 'TD_ERR_RTN_COMB_ACTION_INSERT')
 *     __Pyx_globals['TD_RSP_QRY_CONTRACT_BANK'] = TD_CALLBACK_TYPE(TD_RSP_QRY_CONTRACT_BANK, 'TD_RSP_QRY_CONTRACT_BANK')
 *     __Pyx_globals['TD_RSP_QRY_PACK_ORDER'] = TD_CALLBACK_TYPE(TD_RSP_QRY_PACK_ORDER, 'TD_RSP_QRY_PACK_ORDER')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_PACK_ORDER_ACTION'] = TD_CALLBACK_TYPE(TD_RSP_QRY_PACK_ORDER_ACTION, 'TD_RSP_QRY_PACK_ORDER_ACTION')
 *     __Pyx_globals['TD_RSP_QRY_TRADING_NOTICE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_TRADING_NOTICE, 'TD_RSP_QRY_TRADING_NOTICE')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 366, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_PACK_ORDER); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 366, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RSP_QRY_PACK_ORDER};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 366, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RSP_QRY_PACK_ORDER};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 366, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_114 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 366, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_114);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_114, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_114, 0+__pyx_t_117, __pyx_t_2);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_PACK_ORDER);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_PACK_ORDER);
      PyTuple_SET_ITEM(__pyx_t_114, 1+__pyx_t_117, __pyx_n_s_TD_RSP_QRY_PACK_ORDER);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_114, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 366, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 366, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_PACK_ORDER, __pyx_t_1) < 0)) __PYX_ERR(1, 366, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":367
 *     __Pyx_globals['TD_RSP_QRY_CONTRACT_BANK'] = TD_CALLBACK_TYPE(TD_RSP_QRY_CONTRACT_BANK, 'TD_RSP_QRY_CONTRACT_BANK')
 *     __Pyx_globals['TD_RSP_QRY_PACK_ORDER'] = TD_CALLBACK_TYPE(TD_RSP_QRY_PACK_ORDER, 'TD_RSP_QRY_PACK_ORDER')
 *     __Pyx_globals['TD_RSP_QRY_PACK_ORDER_ACTION'] = TD_CALLBACK_TYPE(TD_RSP_QRY_PACK_ORDER_ACTION, 'TD_RSP_QRY_PACK_ORDER_ACTION')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_TRADING_NOTICE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_TRADING_NOTICE, 'TD_RSP_QRY_TRADING_NOTICE')
 *     __Pyx_globals['TD_RSP_QRY_BROKER_TRADING_PARAMS'] = TD_CALLBACK_TYPE(TD_RSP_QRY_BROKER_TRADING_PARAMS, 'TD_RSP_QRY_BROKER_TRADING_PARAMS')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 367, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_114 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_PACK_ORDER_ACTION); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 367, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_114);
    __pyx_t_2 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RSP_QRY_PACK_ORDER_ACTION};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 367, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RSP_QRY_PACK_ORDER_ACTION};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 367, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 367, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_114);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_117, __pyx_t_114);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_PACK_ORDER_ACTION);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_PACK_ORDER_ACTION);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_117, __pyx_n_s_TD_RSP_QRY_PACK_ORDER_ACTION);
      __pyx_t_114 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 367, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 367, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_PACK_ORDER_ACTION, __pyx_t_1) < 0)) __PYX_ERR(1, 367, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":368
 *     __Pyx_globals['TD_RSP_QRY_PACK_ORDER'] = TD_CALLBACK_TYPE(TD_RSP_QRY_PACK_ORDER, 'TD_RSP_QRY_PACK_ORDER')
 *     __Pyx_globals['TD_RSP_QRY_PACK_ORDER_ACTION'] = TD_CALLBACK_TYPE(TD_RSP_QRY_PACK_ORDER_ACTION, 'TD_RSP_QRY_PACK_ORDER_ACTION')
 *     __Pyx_globals['TD_RSP_QRY_TRADING_NOTICE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_TRADING_NOTICE, 'TD_RSP_QRY_TRADING_NOTICE')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_BROKER_TRADING_PARAMS'] = TD_CALLBACK_TYPE(TD_RSP_QRY_BROKER_TRADING_PARAMS, 'TD_RSP_QRY_BROKER_TRADING_PARAMS')
 *     __Pyx_globals['TD_RSP_QRY_BROKER_TRADING_ALGOS'] = TD_CALLBACK_TYPE(TD_RSP_QRY_BROKER_TRADING_ALGOS, 'TD_RSP_QRY_BROKER_TRADING_ALGOS')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 368, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_3 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_TRADING_NOTICE); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 368, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_114 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_114 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_114)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_114);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RSP_QRY_TRADING_NOTICE};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 368, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RSP_QRY_TRADING_NOTICE};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 368, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 368, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_114) {
        __Pyx_GIVEREF(__pyx_t_114); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_114); __pyx_t_114 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_117, __pyx_t_3);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_TRADING_NOTICE);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_TRADING_NOTICE);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_117, __pyx_n_s_TD_RSP_QRY_TRADING_NOTICE);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 368, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 368, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_TRADING_NOTICE, __pyx_t_1) < 0)) __PYX_ERR(1, 368, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":369
 *     __Pyx_globals['TD_RSP_QRY_PACK_ORDER_ACTION'] = TD_CALLBACK_TYPE(TD_RSP_QRY_PACK_ORDER_ACTION, 'TD_RSP_QRY_PACK_ORDER_ACTION')
 *     __Pyx_globals['TD_RSP_QRY_TRADING_NOTICE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_TRADING_NOTICE, 'TD_RSP_QRY_TRADING_NOTICE')
 *     __Pyx_globals['TD_RSP_QRY_BROKER_TRADING_PARAMS'] = TD_CALLBACK_TYPE(TD_RSP_QRY_BROKER_TRADING_PARAMS, 'TD_RSP_QRY_BROKER_TRADING_PARAMS')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_BROKER_TRADING_ALGOS'] = TD_CALLBACK_TYPE(TD_RSP_QRY_BROKER_TRADING_ALGOS, 'TD_RSP_QRY_BROKER_TRADING_ALGOS')
 *     __Pyx_globals['TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_TOKEN'] = TD_CALLBACK_TYPE(TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_TOKEN, 'TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_TOKEN')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 369, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_BROKER_TRADING_PARAMS); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 369, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RSP_QRY_BROKER_TRADING_PARAMS};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 369, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RSP_QRY_BROKER_TRADING_PARAMS};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 369, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_114 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 369, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_114);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_114, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_114, 0+__pyx_t_117, __pyx_t_2);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_BROKER_TRADING_PARAMS);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_BROKER_TRADING_PARAMS);
      PyTuple_SET_ITEM(__pyx_t_114, 1+__pyx_t_117, __pyx_n_s_TD_RSP_QRY_BROKER_TRADING_PARAMS);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_114, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 369, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 369, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_BROKER_TRADING_PARAMS, __pyx_t_1) < 0)) __PYX_ERR(1, 369, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":370
 *     __Pyx_globals['TD_RSP_QRY_TRADING_NOTICE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_TRADING_NOTICE, 'TD_RSP_QRY_TRADING_NOTICE')
 *     __Pyx_globals['TD_RSP_QRY_BROKER_TRADING_PARAMS'] = TD_CALLBACK_TYPE(TD_RSP_QRY_BROKER_TRADING_PARAMS, 'TD_RSP_QRY_BROKER_TRADING_PARAMS')
 *     __Pyx_globals['TD_RSP_QRY_BROKER_TRADING_ALGOS'] = TD_CALLBACK_TYPE(TD_RSP_QRY_BROKER_TRADING_ALGOS, 'TD_RSP_QRY_BROKER_TRADING_ALGOS')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_TOKEN'] = TD_CALLBACK_TYPE(TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_TOKEN, 'TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_TOKEN')
 *     __Pyx_globals['TD_RTN_FROM_BANK_TO_FUTURE_BY_BANK'] = TD_CALLBACK_TYPE(TD_RTN_FROM_BANK_TO_FUTURE_BY_BANK, 'TD_RTN_FROM_BANK_TO_FUTURE_BY_BANK')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 370, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_114 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_BROKER_TRADING_ALGOS); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 370, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_114);
    __pyx_t_2 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RSP_QRY_BROKER_TRADING_ALGOS};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 370, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RSP_QRY_BROKER_TRADING_ALGOS};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 370, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 370, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_114);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_117, __pyx_t_114);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_BROKER_TRADING_ALGOS);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_BROKER_TRADING_ALGOS);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_117, __pyx_n_s_TD_RSP_QRY_BROKER_TRADING_ALGOS);
      __pyx_t_114 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 370, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 370, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_BROKER_TRADING_ALGOS, __pyx_t_1) < 0)) __PYX_ERR(1, 370, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":371
 *     __Pyx_globals['TD_RSP_QRY_BROKER_TRADING_PARAMS'] = TD_CALLBACK_TYPE(TD_RSP_QRY_BROKER_TRADING_PARAMS, 'TD_RSP_QRY_BROKER_TRADING_PARAMS')
 *     __Pyx_globals['TD_RSP_QRY_BROKER_TRADING_ALGOS'] = TD_CALLBACK_TYPE(TD_RSP_QRY_BROKER_TRADING_ALGOS, 'TD_RSP_QRY_BROKER_TRADING_ALGOS')
 *     __Pyx_globals['TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_TOKEN'] = TD_CALLBACK_TYPE(TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_TOKEN, 'TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_TOKEN')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RTN_FROM_BANK_TO_FUTURE_BY_BANK'] = TD_CALLBACK_TYPE(TD_RTN_FROM_BANK_TO_FUTURE_BY_BANK, 'TD_RTN_FROM_BANK_TO_FUTURE_BY_BANK')
 *     __Pyx_globals['TD_RTN_FROM_FUTURE_TO_BANK_BY_BANK'] = TD_CALLBACK_TYPE(TD_RTN_FROM_FUTURE_TO_BANK_BY_BANK, 'TD_RTN_FROM_FUTURE_TO_BANK_BY_BANK')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 371, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_3 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_TOKEN); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 371, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_114 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_114 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_114)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_114);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_2};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 371, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_2};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 371, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 371, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_114) {
        __Pyx_GIVEREF(__pyx_t_114); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_114); __pyx_t_114 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_117, __pyx_t_3);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_2);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_2);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_117, __pyx_n_s_TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_2);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 371, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 371, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_2, __pyx_t_1) < 0)) __PYX_ERR(1, 371, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":372
 *     __Pyx_globals['TD_RSP_QRY_BROKER_TRADING_ALGOS'] = TD_CALLBACK_TYPE(TD_RSP_QRY_BROKER_TRADING_ALGOS, 'TD_RSP_QRY_BROKER_TRADING_ALGOS')
 *     __Pyx_globals['TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_TOKEN'] = TD_CALLBACK_TYPE(TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_TOKEN, 'TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_TOKEN')
 *     __Pyx_globals['TD_RTN_FROM_BANK_TO_FUTURE_BY_BANK'] = TD_CALLBACK_TYPE(TD_RTN_FROM_BANK_TO_FUTURE_BY_BANK, 'TD_RTN_FROM_BANK_TO_FUTURE_BY_BANK')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RTN_FROM_FUTURE_TO_BANK_BY_BANK'] = TD_CALLBACK_TYPE(TD_RTN_FROM_FUTURE_TO_BANK_BY_BANK, 'TD_RTN_FROM_FUTURE_TO_BANK_BY_BANK')
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_BANK'] = TD_CALLBACK_TYPE(TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_BANK, 'TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_BANK')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 372, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RTN_FROM_BANK_TO_FUTURE_BY_BANK); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 372, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RTN_FROM_BANK_TO_FUTURE_BY_BA};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 372, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RTN_FROM_BANK_TO_FUTURE_BY_BA};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 372, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_114 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 372, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_114);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_114, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_114, 0+__pyx_t_117, __pyx_t_2);
      __Pyx_INCREF(__pyx_n_s_TD_RTN_FROM_BANK_TO_FUTURE_BY_BA);
      __Pyx_GIVEREF(__pyx_n_s_TD_RTN_FROM_BANK_TO_FUTURE_BY_BA);
      PyTuple_SET_ITEM(__pyx_t_114, 1+__pyx_t_117, __pyx_n_s_TD_RTN_FROM_BANK_TO_FUTURE_BY_BA);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_114, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 372, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 372, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RTN_FROM_BANK_TO_FUTURE_BY_BA, __pyx_t_1) < 0)) __PYX_ERR(1, 372, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":373
 *     __Pyx_globals['TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_TOKEN'] = TD_CALLBACK_TYPE(TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_TOKEN, 'TD_RSP_QRY_CFMMC_TRADING_ACCOUNT_TOKEN')
 *     __Pyx_globals['TD_RTN_FROM_BANK_TO_FUTURE_BY_BANK'] = TD_CALLBACK_TYPE(TD_RTN_FROM_BANK_TO_FUTURE_BY_BANK, 'TD_RTN_FROM_BANK_TO_FUTURE_BY_BANK')
 *     __Pyx_globals['TD_RTN_FROM_FUTURE_TO_BANK_BY_BANK'] = TD_CALLBACK_TYPE(TD_RTN_FROM_FUTURE_TO_BANK_BY_BANK, 'TD_RTN_FROM_FUTURE_TO_BANK_BY_BANK')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_BANK'] = TD_CALLBACK_TYPE(TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_BANK, 'TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_BANK')
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_BANK'] = TD_CALLBACK_TYPE(TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_BANK, 'TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_BANK')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 373, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_114 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RTN_FROM_FUTURE_TO_BANK_BY_BANK); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 373, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_114);
    __pyx_t_2 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RTN_FROM_FUTURE_TO_BANK_BY_BA};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 373, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RTN_FROM_FUTURE_TO_BANK_BY_BA};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 373, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 373, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_114);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_117, __pyx_t_114);
      __Pyx_INCREF(__pyx_n_s_TD_RTN_FROM_FUTURE_TO_BANK_BY_BA);
      __Pyx_GIVEREF(__pyx_n_s_TD_RTN_FROM_FUTURE_TO_BANK_BY_BA);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_117, __pyx_n_s_TD_RTN_FROM_FUTURE_TO_BANK_BY_BA);
      __pyx_t_114 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 373, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 373, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RTN_FROM_FUTURE_TO_BANK_BY_BA, __pyx_t_1) < 0)) __PYX_ERR(1, 373, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":374
 *     __Pyx_globals['TD_RTN_FROM_BANK_TO_FUTURE_BY_BANK'] = TD_CALLBACK_TYPE(TD_RTN_FROM_BANK_TO_FUTURE_BY_BANK, 'TD_RTN_FROM_BANK_TO_FUTURE_BY_BANK')
 *     __Pyx_globals['TD_RTN_FROM_FUTURE_TO_BANK_BY_BANK'] = TD_CALLBACK_TYPE(TD_RTN_FROM_FUTURE_TO_BANK_BY_BANK, 'TD_RTN_FROM_FUTURE_TO_BANK_BY_BANK')
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_BANK'] = TD_CALLBACK_TYPE(TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_BANK, 'TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_BANK')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_BANK'] = TD_CALLBACK_TYPE(TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_BANK, 'TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_BANK')
 *     __Pyx_globals['TD_RTN_FROM_BANK_TO_FUTURE_BY_FUTURE'] = TD_CALLBACK_TYPE(TD_RTN_FROM_BANK_TO_FUTURE_BY_FUTURE, 'TD_RTN_FROM_BANK_TO_FUTURE_BY_FUTURE')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 374, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_3 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_BANK); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 374, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_114 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_114 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_114)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_114);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RTN_REPEAL_FROM_BANK_TO_FUTUR};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 374, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RTN_REPEAL_FROM_BANK_TO_FUTUR};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 374, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 374, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_114) {
        __Pyx_GIVEREF(__pyx_t_114); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_114); __pyx_t_114 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_117, __pyx_t_3);
      __Pyx_INCREF(__pyx_n_s_TD_RTN_REPEAL_FROM_BANK_TO_FUTUR);
      __Pyx_GIVEREF(__pyx_n_s_TD_RTN_REPEAL_FROM_BANK_TO_FUTUR);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_117, __pyx_n_s_TD_RTN_REPEAL_FROM_BANK_TO_FUTUR);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 374, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 374, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RTN_REPEAL_FROM_BANK_TO_FUTUR, __pyx_t_1) < 0)) __PYX_ERR(1, 374, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":375
 *     __Pyx_globals['TD_RTN_FROM_FUTURE_TO_BANK_BY_BANK'] = TD_CALLBACK_TYPE(TD_RTN_FROM_FUTURE_TO_BANK_BY_BANK, 'TD_RTN_FROM_FUTURE_TO_BANK_BY_BANK')
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_BANK'] = TD_CALLBACK_TYPE(TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_BANK, 'TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_BANK')
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_BANK'] = TD_CALLBACK_TYPE(TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_BANK, 'TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_BANK')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RTN_FROM_BANK_TO_FUTURE_BY_FUTURE'] = TD_CALLBACK_TYPE(TD_RTN_FROM_BANK_TO_FUTURE_BY_FUTURE, 'TD_RTN_FROM_BANK_TO_FUTURE_BY_FUTURE')
 *     __Pyx_globals['TD_RTN_FROM_FUTURE_TO_BANK_BY_FUTURE'] = TD_CALLBACK_TYPE(TD_RTN_FROM_FUTURE_TO_BANK_BY_FUTURE, 'TD_RTN_FROM_FUTURE_TO_BANK_BY_FUTURE')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 375, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_BANK); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 375, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RTN_REPEAL_FROM_FUTURE_TO_BAN};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 375, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RTN_REPEAL_FROM_FUTURE_TO_BAN};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 375, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_114 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 375, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_114);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_114, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_114, 0+__pyx_t_117, __pyx_t_2);
      __Pyx_INCREF(__pyx_n_s_TD_RTN_REPEAL_FROM_FUTURE_TO_BAN);
      __Pyx_GIVEREF(__pyx_n_s_TD_RTN_REPEAL_FROM_FUTURE_TO_BAN);
      PyTuple_SET_ITEM(__pyx_t_114, 1+__pyx_t_117, __pyx_n_s_TD_RTN_REPEAL_FROM_FUTURE_TO_BAN);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_114, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 375, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 375, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RTN_REPEAL_FROM_FUTURE_TO_BAN, __pyx_t_1) < 0)) __PYX_ERR(1, 375, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":376
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_BANK'] = TD_CALLBACK_TYPE(TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_BANK, 'TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_BANK')
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_BANK'] = TD_CALLBACK_TYPE(TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_BANK, 'TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_BANK')
 *     __Pyx_globals['TD_RTN_FROM_BANK_TO_FUTURE_BY_FUTURE'] = TD_CALLBACK_TYPE(TD_RTN_FROM_BANK_TO_FUTURE_BY_FUTURE, 'TD_RTN_FROM_BANK_TO_FUTURE_BY_FUTURE')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RTN_FROM_FUTURE_TO_BANK_BY_FUTURE'] = TD_CALLBACK_TYPE(TD_RTN_FROM_FUTURE_TO_BANK_BY_FUTURE, 'TD_RTN_FROM_FUTURE_TO_BANK_BY_FUTURE')
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE_MANUAL'] = TD_CALLBACK_TYPE(TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE_MANUAL, 'TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE_MANUAL')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 376, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_114 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RTN_FROM_BANK_TO_FUTURE_BY_FUTURE); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 376, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_114);
    __pyx_t_2 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RTN_FROM_BANK_TO_FUTURE_BY_FU};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 376, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RTN_FROM_BANK_TO_FUTURE_BY_FU};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 376, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 376, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_114);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_117, __pyx_t_114);
      __Pyx_INCREF(__pyx_n_s_TD_RTN_FROM_BANK_TO_FUTURE_BY_FU);
      __Pyx_GIVEREF(__pyx_n_s_TD_RTN_FROM_BANK_TO_FUTURE_BY_FU);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_117, __pyx_n_s_TD_RTN_FROM_BANK_TO_FUTURE_BY_FU);
      __pyx_t_114 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 376, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 376, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RTN_FROM_BANK_TO_FUTURE_BY_FU, __pyx_t_1) < 0)) __PYX_ERR(1, 376, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":377
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_BANK'] = TD_CALLBACK_TYPE(TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_BANK, 'TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_BANK')
 *     __Pyx_globals['TD_RTN_FROM_BANK_TO_FUTURE_BY_FUTURE'] = TD_CALLBACK_TYPE(TD_RTN_FROM_BANK_TO_FUTURE_BY_FUTURE, 'TD_RTN_FROM_BANK_TO_FUTURE_BY_FUTURE')
 *     __Pyx_globals['TD_RTN_FROM_FUTURE_TO_BANK_BY_FUTURE'] = TD_CALLBACK_TYPE(TD_RTN_FROM_FUTURE_TO_BANK_BY_FUTURE, 'TD_RTN_FROM_FUTURE_TO_BANK_BY_FUTURE')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE_MANUAL'] = TD_CALLBACK_TYPE(TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE_MANUAL, 'TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE_MANUAL')
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE_MANUAL'] = TD_CALLBACK_TYPE(TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE_MANUAL, 'TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE_MANUAL')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 377, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_3 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RTN_FROM_FUTURE_TO_BANK_BY_FUTURE); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 377, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_114 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_114 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_114)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_114);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RTN_FROM_FUTURE_TO_BANK_BY_FU};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 377, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RTN_FROM_FUTURE_TO_BANK_BY_FU};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 377, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 377, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_114) {
        __Pyx_GIVEREF(__pyx_t_114); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_114); __pyx_t_114 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_117, __pyx_t_3);
      __Pyx_INCREF(__pyx_n_s_TD_RTN_FROM_FUTURE_TO_BANK_BY_FU);
      __Pyx_GIVEREF(__pyx_n_s_TD_RTN_FROM_FUTURE_TO_BANK_BY_FU);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_117, __pyx_n_s_TD_RTN_FROM_FUTURE_TO_BANK_BY_FU);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 377, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 377, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RTN_FROM_FUTURE_TO_BANK_BY_FU, __pyx_t_1) < 0)) __PYX_ERR(1, 377, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":378
 *     __Pyx_globals['TD_RTN_FROM_BANK_TO_FUTURE_BY_FUTURE'] = TD_CALLBACK_TYPE(TD_RTN_FROM_BANK_TO_FUTURE_BY_FUTURE, 'TD_RTN_FROM_BANK_TO_FUTURE_BY_FUTURE')
 *     __Pyx_globals['TD_RTN_FROM_FUTURE_TO_BANK_BY_FUTURE'] = TD_CALLBACK_TYPE(TD_RTN_FROM_FUTURE_TO_BANK_BY_FUTURE, 'TD_RTN_FROM_FUTURE_TO_BANK_BY_FUTURE')
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE_MANUAL'] = TD_CALLBACK_TYPE(TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE_MANUAL, 'TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE_MANUAL')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE_MANUAL'] = TD_CALLBACK_TYPE(TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE_MANUAL, 'TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE_MANUAL')
 *     __Pyx_globals['TD_RTN_QUERY_BANK_BALANCE_BY_FUTURE'] = TD_CALLBACK_TYPE(TD_RTN_QUERY_BANK_BALANCE_BY_FUTURE, 'TD_RTN_QUERY_BANK_BALANCE_BY_FUTURE')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 378, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE_MANUAL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 378, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RTN_REPEAL_FROM_BANK_TO_FUTUR_2};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 378, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RTN_REPEAL_FROM_BANK_TO_FUTUR_2};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 378, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_114 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 378, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_114);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_114, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_114, 0+__pyx_t_117, __pyx_t_2);
      __Pyx_INCREF(__pyx_n_s_TD_RTN_REPEAL_FROM_BANK_TO_FUTUR_2);
      __Pyx_GIVEREF(__pyx_n_s_TD_RTN_REPEAL_FROM_BANK_TO_FUTUR_2);
      PyTuple_SET_ITEM(__pyx_t_114, 1+__pyx_t_117, __pyx_n_s_TD_RTN_REPEAL_FROM_BANK_TO_FUTUR_2);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_114, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 378, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 378, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RTN_REPEAL_FROM_BANK_TO_FUTUR_2, __pyx_t_1) < 0)) __PYX_ERR(1, 378, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":379
 *     __Pyx_globals['TD_RTN_FROM_FUTURE_TO_BANK_BY_FUTURE'] = TD_CALLBACK_TYPE(TD_RTN_FROM_FUTURE_TO_BANK_BY_FUTURE, 'TD_RTN_FROM_FUTURE_TO_BANK_BY_FUTURE')
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE_MANUAL'] = TD_CALLBACK_TYPE(TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE_MANUAL, 'TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE_MANUAL')
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE_MANUAL'] = TD_CALLBACK_TYPE(TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE_MANUAL, 'TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE_MANUAL')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RTN_QUERY_BANK_BALANCE_BY_FUTURE'] = TD_CALLBACK_TYPE(TD_RTN_QUERY_BANK_BALANCE_BY_FUTURE, 'TD_RTN_QUERY_BANK_BALANCE_BY_FUTURE')
 *     __Pyx_globals['TD_ERR_RTN_BANK_TO_FUTURE_BY_FUTURE'] = TD_CALLBACK_TYPE(TD_ERR_RTN_BANK_TO_FUTURE_BY_FUTURE, 'TD_ERR_RTN_BANK_TO_FUTURE_BY_FUTURE')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 379, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_114 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE_MANUAL); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 379, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_114);
    __pyx_t_2 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RTN_REPEAL_FROM_FUTURE_TO_BAN_2};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 379, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RTN_REPEAL_FROM_FUTURE_TO_BAN_2};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 379, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 379, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_114);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_117, __pyx_t_114);
      __Pyx_INCREF(__pyx_n_s_TD_RTN_REPEAL_FROM_FUTURE_TO_BAN_2);
      __Pyx_GIVEREF(__pyx_n_s_TD_RTN_REPEAL_FROM_FUTURE_TO_BAN_2);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_117, __pyx_n_s_TD_RTN_REPEAL_FROM_FUTURE_TO_BAN_2);
      __pyx_t_114 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 379, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 379, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RTN_REPEAL_FROM_FUTURE_TO_BAN_2, __pyx_t_1) < 0)) __PYX_ERR(1, 379, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":380
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE_MANUAL'] = TD_CALLBACK_TYPE(TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE_MANUAL, 'TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE_MANUAL')
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE_MANUAL'] = TD_CALLBACK_TYPE(TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE_MANUAL, 'TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE_MANUAL')
 *     __Pyx_globals['TD_RTN_QUERY_BANK_BALANCE_BY_FUTURE'] = TD_CALLBACK_TYPE(TD_RTN_QUERY_BANK_BALANCE_BY_FUTURE, 'TD_RTN_QUERY_BANK_BALANCE_BY_FUTURE')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_ERR_RTN_BANK_TO_FUTURE_BY_FUTURE'] = TD_CALLBACK_TYPE(TD_ERR_RTN_BANK_TO_FUTURE_BY_FUTURE, 'TD_ERR_RTN_BANK_TO_FUTURE_BY_FUTURE')
 *     __Pyx_globals['TD_ERR_RTN_FUTURE_TO_BANK_BY_FUTURE'] = TD_CALLBACK_TYPE(TD_ERR_RTN_FUTURE_TO_BANK_BY_FUTURE, 'TD_ERR_RTN_FUTURE_TO_BANK_BY_FUTURE')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 380, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_3 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RTN_QUERY_BANK_BALANCE_BY_FUTURE); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 380, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_114 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_114 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_114)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_114);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RTN_QUERY_BANK_BALANCE_BY_FUT};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 380, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RTN_QUERY_BANK_BALANCE_BY_FUT};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 380, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 380, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_114) {
        __Pyx_GIVEREF(__pyx_t_114); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_114); __pyx_t_114 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_117, __pyx_t_3);
      __Pyx_INCREF(__pyx_n_s_TD_RTN_QUERY_BANK_BALANCE_BY_FUT);
      __Pyx_GIVEREF(__pyx_n_s_TD_RTN_QUERY_BANK_BALANCE_BY_FUT);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_117, __pyx_n_s_TD_RTN_QUERY_BANK_BALANCE_BY_FUT);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 380, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 380, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RTN_QUERY_BANK_BALANCE_BY_FUT, __pyx_t_1) < 0)) __PYX_ERR(1, 380, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":381
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE_MANUAL'] = TD_CALLBACK_TYPE(TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE_MANUAL, 'TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE_MANUAL')
 *     __Pyx_globals['TD_RTN_QUERY_BANK_BALANCE_BY_FUTURE'] = TD_CALLBACK_TYPE(TD_RTN_QUERY_BANK_BALANCE_BY_FUTURE, 'TD_RTN_QUERY_BANK_BALANCE_BY_FUTURE')
 *     __Pyx_globals['TD_ERR_RTN_BANK_TO_FUTURE_BY_FUTURE'] = TD_CALLBACK_TYPE(TD_ERR_RTN_BANK_TO_FUTURE_BY_FUTURE, 'TD_ERR_RTN_BANK_TO_FUTURE_BY_FUTURE')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_ERR_RTN_FUTURE_TO_BANK_BY_FUTURE'] = TD_CALLBACK_TYPE(TD_ERR_RTN_FUTURE_TO_BANK_BY_FUTURE, 'TD_ERR_RTN_FUTURE_TO_BANK_BY_FUTURE')
 *     __Pyx_globals['TD_ERR_RTN_REPEAL_BANK_TO_FUTURE_BY_FUTURE_MANUAL'] = TD_CALLBACK_TYPE(TD_ERR_RTN_REPEAL_BANK_TO_FUTURE_BY_FUTURE_MANUAL, 'TD_ERR_RTN_REPEAL_BANK_TO_FUTURE_BY_FUTURE_MANUAL')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 381, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_ERR_RTN_BANK_TO_FUTURE_BY_FUTURE); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 381, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_ERR_RTN_BANK_TO_FUTURE_BY_FUT};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 381, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_ERR_RTN_BANK_TO_FUTURE_BY_FUT};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 381, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_114 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 381, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_114);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_114, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_114, 0+__pyx_t_117, __pyx_t_2);
      __Pyx_INCREF(__pyx_n_s_TD_ERR_RTN_BANK_TO_FUTURE_BY_FUT);
      __Pyx_GIVEREF(__pyx_n_s_TD_ERR_RTN_BANK_TO_FUTURE_BY_FUT);
      PyTuple_SET_ITEM(__pyx_t_114, 1+__pyx_t_117, __pyx_n_s_TD_ERR_RTN_BANK_TO_FUTURE_BY_FUT);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_114, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 381, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 381, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_ERR_RTN_BANK_TO_FUTURE_BY_FUT, __pyx_t_1) < 0)) __PYX_ERR(1, 381, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":382
 *     __Pyx_globals['TD_RTN_QUERY_BANK_BALANCE_BY_FUTURE'] = TD_CALLBACK_TYPE(TD_RTN_QUERY_BANK_BALANCE_BY_FUTURE, 'TD_RTN_QUERY_BANK_BALANCE_BY_FUTURE')
 *     __Pyx_globals['TD_ERR_RTN_BANK_TO_FUTURE_BY_FUTURE'] = TD_CALLBACK_TYPE(TD_ERR_RTN_BANK_TO_FUTURE_BY_FUTURE, 'TD_ERR_RTN_BANK_TO_FUTURE_BY_FUTURE')
 *     __Pyx_globals['TD_ERR_RTN_FUTURE_TO_BANK_BY_FUTURE'] = TD_CALLBACK_TYPE(TD_ERR_RTN_FUTURE_TO_BANK_BY_FUTURE, 'TD_ERR_RTN_FUTURE_TO_BANK_BY_FUTURE')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_ERR_RTN_REPEAL_BANK_TO_FUTURE_BY_FUTURE_MANUAL'] = TD_CALLBACK_TYPE(TD_ERR_RTN_REPEAL_BANK_TO_FUTURE_BY_FUTURE_MANUAL, 'TD_ERR_RTN_REPEAL_BANK_TO_FUTURE_BY_FUTURE_MANUAL')
 *     __Pyx_globals['TD_ERR_RTN_REPEAL_FUTURE_TO_BANK_BY_FUTURE_MANUAL'] = TD_CALLBACK_TYPE(TD_ERR_RTN_REPEAL_FUTURE_TO_BANK_BY_FUTURE_MANUAL, 'TD_ERR_RTN_REPEAL_FUTURE_TO_BANK_BY_FUTURE_MANUAL')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 382, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_114 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_ERR_RTN_FUTURE_TO_BANK_BY_FUTURE); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 382, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_114);
    __pyx_t_2 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_ERR_RTN_FUTURE_TO_BANK_BY_FUT};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 382, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_ERR_RTN_FUTURE_TO_BANK_BY_FUT};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 382, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 382, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_114);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_117, __pyx_t_114);
      __Pyx_INCREF(__pyx_n_s_TD_ERR_RTN_FUTURE_TO_BANK_BY_FUT);
      __Pyx_GIVEREF(__pyx_n_s_TD_ERR_RTN_FUTURE_TO_BANK_BY_FUT);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_117, __pyx_n_s_TD_ERR_RTN_FUTURE_TO_BANK_BY_FUT);
      __pyx_t_114 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 382, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 382, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_ERR_RTN_FUTURE_TO_BANK_BY_FUT, __pyx_t_1) < 0)) __PYX_ERR(1, 382, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":383
 *     __Pyx_globals['TD_ERR_RTN_BANK_TO_FUTURE_BY_FUTURE'] = TD_CALLBACK_TYPE(TD_ERR_RTN_BANK_TO_FUTURE_BY_FUTURE, 'TD_ERR_RTN_BANK_TO_FUTURE_BY_FUTURE')
 *     __Pyx_globals['TD_ERR_RTN_FUTURE_TO_BANK_BY_FUTURE'] = TD_CALLBACK_TYPE(TD_ERR_RTN_FUTURE_TO_BANK_BY_FUTURE, 'TD_ERR_RTN_FUTURE_TO_BANK_BY_FUTURE')
 *     __Pyx_globals['TD_ERR_RTN_REPEAL_BANK_TO_FUTURE_BY_FUTURE_MANUAL'] = TD_CALLBACK_TYPE(TD_ERR_RTN_REPEAL_BANK_TO_FUTURE_BY_FUTURE_MANUAL, 'TD_ERR_RTN_REPEAL_BANK_TO_FUTURE_BY_FUTURE_MANUAL')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_ERR_RTN_REPEAL_FUTURE_TO_BANK_BY_FUTURE_MANUAL'] = TD_CALLBACK_TYPE(TD_ERR_RTN_REPEAL_FUTURE_TO_BANK_BY_FUTURE_MANUAL, 'TD_ERR_RTN_REPEAL_FUTURE_TO_BANK_BY_FUTURE_MANUAL')
 *     __Pyx_globals['TD_ERR_RTN_QRY_BANK_BALANCE_BY_FUTURE'] = TD_CALLBACK_TYPE(TD_ERR_RTN_QRY_BANK_BALANCE_BY_FUTURE, 'TD_ERR_RTN_QRY_BANK_BALANCE_BY_FUTURE')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 383, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_3 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_ERR_RTN_REPEAL_BANK_TO_FUTURE_BY_FUTURE_MANUAL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 383, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_114 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_114 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_114)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_114);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_ERR_RTN_REPEAL_BANK_TO_FUTURE};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 383, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_ERR_RTN_REPEAL_BANK_TO_FUTURE};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 383, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 383, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_114) {
        __Pyx_GIVEREF(__pyx_t_114); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_114); __pyx_t_114 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_117, __pyx_t_3);
      __Pyx_INCREF(__pyx_n_s_TD_ERR_RTN_REPEAL_BANK_TO_FUTURE);
      __Pyx_GIVEREF(__pyx_n_s_TD_ERR_RTN_REPEAL_BANK_TO_FUTURE);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_117, __pyx_n_s_TD_ERR_RTN_REPEAL_BANK_TO_FUTURE);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 383, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 383, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_ERR_RTN_REPEAL_BANK_TO_FUTURE, __pyx_t_1) < 0)) __PYX_ERR(1, 383, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":384
 *     __Pyx_globals['TD_ERR_RTN_FUTURE_TO_BANK_BY_FUTURE'] = TD_CALLBACK_TYPE(TD_ERR_RTN_FUTURE_TO_BANK_BY_FUTURE, 'TD_ERR_RTN_FUTURE_TO_BANK_BY_FUTURE')
 *     __Pyx_globals['TD_ERR_RTN_REPEAL_BANK_TO_FUTURE_BY_FUTURE_MANUAL'] = TD_CALLBACK_TYPE(TD_ERR_RTN_REPEAL_BANK_TO_FUTURE_BY_FUTURE_MANUAL, 'TD_ERR_RTN_REPEAL_BANK_TO_FUTURE_BY_FUTURE_MANUAL')
 *     __Pyx_globals['TD_ERR_RTN_REPEAL_FUTURE_TO_BANK_BY_FUTURE_MANUAL'] = TD_CALLBACK_TYPE(TD_ERR_RTN_REPEAL_FUTURE_TO_BANK_BY_FUTURE_MANUAL, 'TD_ERR_RTN_REPEAL_FUTURE_TO_BANK_BY_FUTURE_MANUAL')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_ERR_RTN_QRY_BANK_BALANCE_BY_FUTURE'] = TD_CALLBACK_TYPE(TD_ERR_RTN_QRY_BANK_BALANCE_BY_FUTURE, 'TD_ERR_RTN_QRY_BANK_BALANCE_BY_FUTURE')
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE'] = TD_CALLBACK_TYPE(TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE, 'TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 384, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_ERR_RTN_REPEAL_FUTURE_TO_BANK_BY_FUTURE_MANUAL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 384, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_ERR_RTN_REPEAL_FUTURE_TO_BANK};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 384, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_ERR_RTN_REPEAL_FUTURE_TO_BANK};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 384, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_114 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 384, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_114);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_114, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_114, 0+__pyx_t_117, __pyx_t_2);
      __Pyx_INCREF(__pyx_n_s_TD_ERR_RTN_REPEAL_FUTURE_TO_BANK);
      __Pyx_GIVEREF(__pyx_n_s_TD_ERR_RTN_REPEAL_FUTURE_TO_BANK);
      PyTuple_SET_ITEM(__pyx_t_114, 1+__pyx_t_117, __pyx_n_s_TD_ERR_RTN_REPEAL_FUTURE_TO_BANK);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_114, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 384, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 384, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_ERR_RTN_REPEAL_FUTURE_TO_BANK, __pyx_t_1) < 0)) __PYX_ERR(1, 384, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":385
 *     __Pyx_globals['TD_ERR_RTN_REPEAL_BANK_TO_FUTURE_BY_FUTURE_MANUAL'] = TD_CALLBACK_TYPE(TD_ERR_RTN_REPEAL_BANK_TO_FUTURE_BY_FUTURE_MANUAL, 'TD_ERR_RTN_REPEAL_BANK_TO_FUTURE_BY_FUTURE_MANUAL')
 *     __Pyx_globals['TD_ERR_RTN_REPEAL_FUTURE_TO_BANK_BY_FUTURE_MANUAL'] = TD_CALLBACK_TYPE(TD_ERR_RTN_REPEAL_FUTURE_TO_BANK_BY_FUTURE_MANUAL, 'TD_ERR_RTN_REPEAL_FUTURE_TO_BANK_BY_FUTURE_MANUAL')
 *     __Pyx_globals['TD_ERR_RTN_QRY_BANK_BALANCE_BY_FUTURE'] = TD_CALLBACK_TYPE(TD_ERR_RTN_QRY_BANK_BALANCE_BY_FUTURE, 'TD_ERR_RTN_QRY_BANK_BALANCE_BY_FUTURE')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE'] = TD_CALLBACK_TYPE(TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE, 'TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE')
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE'] = TD_CALLBACK_TYPE(TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE, 'TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 385, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_114 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_ERR_RTN_QRY_BANK_BALANCE_BY_FUTURE); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 385, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_114);
    __pyx_t_2 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_ERR_RTN_QRY_BANK_BALANCE_BY_F};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 385, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_ERR_RTN_QRY_BANK_BALANCE_BY_F};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 385, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 385, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_114);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_117, __pyx_t_114);
      __Pyx_INCREF(__pyx_n_s_TD_ERR_RTN_QRY_BANK_BALANCE_BY_F);
      __Pyx_GIVEREF(__pyx_n_s_TD_ERR_RTN_QRY_BANK_BALANCE_BY_F);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_117, __pyx_n_s_TD_ERR_RTN_QRY_BANK_BALANCE_BY_F);
      __pyx_t_114 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 385, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 385, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_ERR_RTN_QRY_BANK_BALANCE_BY_F, __pyx_t_1) < 0)) __PYX_ERR(1, 385, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":386
 *     __Pyx_globals['TD_ERR_RTN_REPEAL_FUTURE_TO_BANK_BY_FUTURE_MANUAL'] = TD_CALLBACK_TYPE(TD_ERR_RTN_REPEAL_FUTURE_TO_BANK_BY_FUTURE_MANUAL, 'TD_ERR_RTN_REPEAL_FUTURE_TO_BANK_BY_FUTURE_MANUAL')
 *     __Pyx_globals['TD_ERR_RTN_QRY_BANK_BALANCE_BY_FUTURE'] = TD_CALLBACK_TYPE(TD_ERR_RTN_QRY_BANK_BALANCE_BY_FUTURE, 'TD_ERR_RTN_QRY_BANK_BALANCE_BY_FUTURE')
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE'] = TD_CALLBACK_TYPE(TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE, 'TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE'] = TD_CALLBACK_TYPE(TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE, 'TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE')
 *     __Pyx_globals['TD_RSP_FROM_BANK_TO_FUTURE_BY_FUTURE'] = TD_CALLBACK_TYPE(TD_RSP_FROM_BANK_TO_FUTURE_BY_FUTURE, 'TD_RSP_FROM_BANK_TO_FUTURE_BY_FUTURE')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 386, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_3 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 386, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_114 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_114 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_114)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_114);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RTN_REPEAL_FROM_BANK_TO_FUTUR_3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 386, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RTN_REPEAL_FROM_BANK_TO_FUTUR_3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 386, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 386, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_114) {
        __Pyx_GIVEREF(__pyx_t_114); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_114); __pyx_t_114 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_117, __pyx_t_3);
      __Pyx_INCREF(__pyx_n_s_TD_RTN_REPEAL_FROM_BANK_TO_FUTUR_3);
      __Pyx_GIVEREF(__pyx_n_s_TD_RTN_REPEAL_FROM_BANK_TO_FUTUR_3);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_117, __pyx_n_s_TD_RTN_REPEAL_FROM_BANK_TO_FUTUR_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 386, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 386, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RTN_REPEAL_FROM_BANK_TO_FUTUR_3, __pyx_t_1) < 0)) __PYX_ERR(1, 386, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":387
 *     __Pyx_globals['TD_ERR_RTN_QRY_BANK_BALANCE_BY_FUTURE'] = TD_CALLBACK_TYPE(TD_ERR_RTN_QRY_BANK_BALANCE_BY_FUTURE, 'TD_ERR_RTN_QRY_BANK_BALANCE_BY_FUTURE')
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE'] = TD_CALLBACK_TYPE(TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE, 'TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE')
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE'] = TD_CALLBACK_TYPE(TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE, 'TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_FROM_BANK_TO_FUTURE_BY_FUTURE'] = TD_CALLBACK_TYPE(TD_RSP_FROM_BANK_TO_FUTURE_BY_FUTURE, 'TD_RSP_FROM_BANK_TO_FUTURE_BY_FUTURE')
 *     __Pyx_globals['TD_RSP_FROM_FUTURE_TO_BANK_BY_FUTURE'] = TD_CALLBACK_TYPE(TD_RSP_FROM_FUTURE_TO_BANK_BY_FUTURE, 'TD_RSP_FROM_FUTURE_TO_BANK_BY_FUTURE')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 387, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 387, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RTN_REPEAL_FROM_FUTURE_TO_BAN_3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 387, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RTN_REPEAL_FROM_FUTURE_TO_BAN_3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 387, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_114 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 387, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_114);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_114, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_114, 0+__pyx_t_117, __pyx_t_2);
      __Pyx_INCREF(__pyx_n_s_TD_RTN_REPEAL_FROM_FUTURE_TO_BAN_3);
      __Pyx_GIVEREF(__pyx_n_s_TD_RTN_REPEAL_FROM_FUTURE_TO_BAN_3);
      PyTuple_SET_ITEM(__pyx_t_114, 1+__pyx_t_117, __pyx_n_s_TD_RTN_REPEAL_FROM_FUTURE_TO_BAN_3);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_114, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 387, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 387, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RTN_REPEAL_FROM_FUTURE_TO_BAN_3, __pyx_t_1) < 0)) __PYX_ERR(1, 387, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":388
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE'] = TD_CALLBACK_TYPE(TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE, 'TD_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE')
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE'] = TD_CALLBACK_TYPE(TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE, 'TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE')
 *     __Pyx_globals['TD_RSP_FROM_BANK_TO_FUTURE_BY_FUTURE'] = TD_CALLBACK_TYPE(TD_RSP_FROM_BANK_TO_FUTURE_BY_FUTURE, 'TD_RSP_FROM_BANK_TO_FUTURE_BY_FUTURE')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_FROM_FUTURE_TO_BANK_BY_FUTURE'] = TD_CALLBACK_TYPE(TD_RSP_FROM_FUTURE_TO_BANK_BY_FUTURE, 'TD_RSP_FROM_FUTURE_TO_BANK_BY_FUTURE')
 *     __Pyx_globals['TD_RSP_QRY_BANK_ACCOUNT_MONEY_BY_FUTURE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_BANK_ACCOUNT_MONEY_BY_FUTURE, 'TD_RSP_QRY_BANK_ACCOUNT_MONEY_BY_FUTURE')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 388, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_114 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_FROM_BANK_TO_FUTURE_BY_FUTURE); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 388, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_114);
    __pyx_t_2 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RSP_FROM_BANK_TO_FUTURE_BY_FU};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 388, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RSP_FROM_BANK_TO_FUTURE_BY_FU};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 388, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 388, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_114);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_117, __pyx_t_114);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_FROM_BANK_TO_FUTURE_BY_FU);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_FROM_BANK_TO_FUTURE_BY_FU);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_117, __pyx_n_s_TD_RSP_FROM_BANK_TO_FUTURE_BY_FU);
      __pyx_t_114 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 388, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 388, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_FROM_BANK_TO_FUTURE_BY_FU, __pyx_t_1) < 0)) __PYX_ERR(1, 388, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":389
 *     __Pyx_globals['TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE'] = TD_CALLBACK_TYPE(TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE, 'TD_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE')
 *     __Pyx_globals['TD_RSP_FROM_BANK_TO_FUTURE_BY_FUTURE'] = TD_CALLBACK_TYPE(TD_RSP_FROM_BANK_TO_FUTURE_BY_FUTURE, 'TD_RSP_FROM_BANK_TO_FUTURE_BY_FUTURE')
 *     __Pyx_globals['TD_RSP_FROM_FUTURE_TO_BANK_BY_FUTURE'] = TD_CALLBACK_TYPE(TD_RSP_FROM_FUTURE_TO_BANK_BY_FUTURE, 'TD_RSP_FROM_FUTURE_TO_BANK_BY_FUTURE')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RSP_QRY_BANK_ACCOUNT_MONEY_BY_FUTURE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_BANK_ACCOUNT_MONEY_BY_FUTURE, 'TD_RSP_QRY_BANK_ACCOUNT_MONEY_BY_FUTURE')
 *     __Pyx_globals['TD_RTN_OPEN_ACCOUNT_BY_BANK'] = TD_CALLBACK_TYPE(TD_RTN_OPEN_ACCOUNT_BY_BANK, 'TD_RTN_OPEN_ACCOUNT_BY_BANK')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 389, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_3 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_FROM_FUTURE_TO_BANK_BY_FUTURE); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 389, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_114 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_114 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_114)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_114);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RSP_FROM_FUTURE_TO_BANK_BY_FU};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 389, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RSP_FROM_FUTURE_TO_BANK_BY_FU};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 389, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 389, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_114) {
        __Pyx_GIVEREF(__pyx_t_114); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_114); __pyx_t_114 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_117, __pyx_t_3);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_FROM_FUTURE_TO_BANK_BY_FU);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_FROM_FUTURE_TO_BANK_BY_FU);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_117, __pyx_n_s_TD_RSP_FROM_FUTURE_TO_BANK_BY_FU);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 389, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 389, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_FROM_FUTURE_TO_BANK_BY_FU, __pyx_t_1) < 0)) __PYX_ERR(1, 389, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":390
 *     __Pyx_globals['TD_RSP_FROM_BANK_TO_FUTURE_BY_FUTURE'] = TD_CALLBACK_TYPE(TD_RSP_FROM_BANK_TO_FUTURE_BY_FUTURE, 'TD_RSP_FROM_BANK_TO_FUTURE_BY_FUTURE')
 *     __Pyx_globals['TD_RSP_FROM_FUTURE_TO_BANK_BY_FUTURE'] = TD_CALLBACK_TYPE(TD_RSP_FROM_FUTURE_TO_BANK_BY_FUTURE, 'TD_RSP_FROM_FUTURE_TO_BANK_BY_FUTURE')
 *     __Pyx_globals['TD_RSP_QRY_BANK_ACCOUNT_MONEY_BY_FUTURE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_BANK_ACCOUNT_MONEY_BY_FUTURE, 'TD_RSP_QRY_BANK_ACCOUNT_MONEY_BY_FUTURE')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RTN_OPEN_ACCOUNT_BY_BANK'] = TD_CALLBACK_TYPE(TD_RTN_OPEN_ACCOUNT_BY_BANK, 'TD_RTN_OPEN_ACCOUNT_BY_BANK')
 *     __Pyx_globals['TD_RTN_CANCEL_ACCOUNT_BY_BANK'] = TD_CALLBACK_TYPE(TD_RTN_CANCEL_ACCOUNT_BY_BANK, 'TD_RTN_CANCEL_ACCOUNT_BY_BANK')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 390, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RSP_QRY_BANK_ACCOUNT_MONEY_BY_FUTURE); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 390, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RSP_QRY_BANK_ACCOUNT_MONEY_BY};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 390, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RSP_QRY_BANK_ACCOUNT_MONEY_BY};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 390, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_114 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 390, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_114);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_114, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_114, 0+__pyx_t_117, __pyx_t_2);
      __Pyx_INCREF(__pyx_n_s_TD_RSP_QRY_BANK_ACCOUNT_MONEY_BY);
      __Pyx_GIVEREF(__pyx_n_s_TD_RSP_QRY_BANK_ACCOUNT_MONEY_BY);
      PyTuple_SET_ITEM(__pyx_t_114, 1+__pyx_t_117, __pyx_n_s_TD_RSP_QRY_BANK_ACCOUNT_MONEY_BY);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_114, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 390, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 390, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RSP_QRY_BANK_ACCOUNT_MONEY_BY, __pyx_t_1) < 0)) __PYX_ERR(1, 390, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":391
 *     __Pyx_globals['TD_RSP_FROM_FUTURE_TO_BANK_BY_FUTURE'] = TD_CALLBACK_TYPE(TD_RSP_FROM_FUTURE_TO_BANK_BY_FUTURE, 'TD_RSP_FROM_FUTURE_TO_BANK_BY_FUTURE')
 *     __Pyx_globals['TD_RSP_QRY_BANK_ACCOUNT_MONEY_BY_FUTURE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_BANK_ACCOUNT_MONEY_BY_FUTURE, 'TD_RSP_QRY_BANK_ACCOUNT_MONEY_BY_FUTURE')
 *     __Pyx_globals['TD_RTN_OPEN_ACCOUNT_BY_BANK'] = TD_CALLBACK_TYPE(TD_RTN_OPEN_ACCOUNT_BY_BANK, 'TD_RTN_OPEN_ACCOUNT_BY_BANK')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RTN_CANCEL_ACCOUNT_BY_BANK'] = TD_CALLBACK_TYPE(TD_RTN_CANCEL_ACCOUNT_BY_BANK, 'TD_RTN_CANCEL_ACCOUNT_BY_BANK')
 *     __Pyx_globals['TD_RTN_CHANGE_ACCOUNT_BY_BANK'] = TD_CALLBACK_TYPE(TD_RTN_CHANGE_ACCOUNT_BY_BANK, 'TD_RTN_CHANGE_ACCOUNT_BY_BANK')
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 391, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_114 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RTN_OPEN_ACCOUNT_BY_BANK); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 391, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_114);
    __pyx_t_2 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RTN_OPEN_ACCOUNT_BY_BANK};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 391, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_114, __pyx_n_s_TD_RTN_OPEN_ACCOUNT_BY_BANK};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 391, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 391, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_114);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_117, __pyx_t_114);
      __Pyx_INCREF(__pyx_n_s_TD_RTN_OPEN_ACCOUNT_BY_BANK);
      __Pyx_GIVEREF(__pyx_n_s_TD_RTN_OPEN_ACCOUNT_BY_BANK);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_117, __pyx_n_s_TD_RTN_OPEN_ACCOUNT_BY_BANK);
      __pyx_t_114 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 391, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 391, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RTN_OPEN_ACCOUNT_BY_BANK, __pyx_t_1) < 0)) __PYX_ERR(1, 391, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":392
 *     __Pyx_globals['TD_RSP_QRY_BANK_ACCOUNT_MONEY_BY_FUTURE'] = TD_CALLBACK_TYPE(TD_RSP_QRY_BANK_ACCOUNT_MONEY_BY_FUTURE, 'TD_RSP_QRY_BANK_ACCOUNT_MONEY_BY_FUTURE')
 *     __Pyx_globals['TD_RTN_OPEN_ACCOUNT_BY_BANK'] = TD_CALLBACK_TYPE(TD_RTN_OPEN_ACCOUNT_BY_BANK, 'TD_RTN_OPEN_ACCOUNT_BY_BANK')
 *     __Pyx_globals['TD_RTN_CANCEL_ACCOUNT_BY_BANK'] = TD_CALLBACK_TYPE(TD_RTN_CANCEL_ACCOUNT_BY_BANK, 'TD_RTN_CANCEL_ACCOUNT_BY_BANK')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TD_RTN_CHANGE_ACCOUNT_BY_BANK'] = TD_CALLBACK_TYPE(TD_RTN_CHANGE_ACCOUNT_BY_BANK, 'TD_RTN_CHANGE_ACCOUNT_BY_BANK')
 * 
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 392, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_3 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RTN_CANCEL_ACCOUNT_BY_BANK); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 392, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_114 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_114 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_114)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_114);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RTN_CANCEL_ACCOUNT_BY_BANK};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 392, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_3, __pyx_n_s_TD_RTN_CANCEL_ACCOUNT_BY_BANK};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 392, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 392, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_114) {
        __Pyx_GIVEREF(__pyx_t_114); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_114); __pyx_t_114 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_117, __pyx_t_3);
      __Pyx_INCREF(__pyx_n_s_TD_RTN_CANCEL_ACCOUNT_BY_BANK);
      __Pyx_GIVEREF(__pyx_n_s_TD_RTN_CANCEL_ACCOUNT_BY_BANK);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_117, __pyx_n_s_TD_RTN_CANCEL_ACCOUNT_BY_BANK);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 392, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 392, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RTN_CANCEL_ACCOUNT_BY_BANK, __pyx_t_1) < 0)) __PYX_ERR(1, 392, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":393
 *     __Pyx_globals['TD_RTN_OPEN_ACCOUNT_BY_BANK'] = TD_CALLBACK_TYPE(TD_RTN_OPEN_ACCOUNT_BY_BANK, 'TD_RTN_OPEN_ACCOUNT_BY_BANK')
 *     __Pyx_globals['TD_RTN_CANCEL_ACCOUNT_BY_BANK'] = TD_CALLBACK_TYPE(TD_RTN_CANCEL_ACCOUNT_BY_BANK, 'TD_RTN_CANCEL_ACCOUNT_BY_BANK')
 *     __Pyx_globals['TD_RTN_CHANGE_ACCOUNT_BY_BANK'] = TD_CALLBACK_TYPE(TD_RTN_CHANGE_ACCOUNT_BY_BANK, 'TD_RTN_CHANGE_ACCOUNT_BY_BANK')             # <<<<<<<<<<<<<<
 * 
 */
    __pyx_t_116 = __Pyx_GetModuleGlobalName(__pyx_n_s_TD_CALLBACK_TYPE); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 393, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_2 = __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(TD_RTN_CHANGE_ACCOUNT_BY_BANK); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 393, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_116))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_116);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_116);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_116, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RTN_CHANGE_ACCOUNT_BY_BANK};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 393, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_116)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_TD_RTN_CHANGE_ACCOUNT_BY_BANK};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_116, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 393, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_114 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 393, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_114);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_114, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_114, 0+__pyx_t_117, __pyx_t_2);
      __Pyx_INCREF(__pyx_n_s_TD_RTN_CHANGE_ACCOUNT_BY_BANK);
      __Pyx_GIVEREF(__pyx_n_s_TD_RTN_CHANGE_ACCOUNT_BY_BANK);
      PyTuple_SET_ITEM(__pyx_t_114, 1+__pyx_t_117, __pyx_n_s_TD_RTN_CHANGE_ACCOUNT_BY_BANK);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_116, __pyx_t_114, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 393, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    }
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 393, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_TD_RTN_CHANGE_ACCOUNT_BY_BANK, __pyx_t_1) < 0)) __PYX_ERR(1, 393, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_L4:;

  /* "EnumType":50
 * 
 * 
 * cdef dict __Pyx_globals = globals()             # <<<<<<<<<<<<<<
 * if PY_VERSION_HEX >= 0x03040000:
 * 
 */
  __pyx_t_1 = __Pyx_Globals(); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(1, 50, __pyx_L1_error)
  __Pyx_XGOTREF(__Pyx_globals);
  __Pyx_DECREF_SET(__Pyx_globals, ((PyObject*)__pyx_t_1));
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "EnumType":51
 * 
 * cdef dict __Pyx_globals = globals()
 * if PY_VERSION_HEX >= 0x03040000:             # <<<<<<<<<<<<<<
 * 
 *     THOST_TE_RESUME_TYPE = __Pyx_EnumBase('THOST_TE_RESUME_TYPE', __Pyx_OrderedDict([
 */
  __pyx_t_4 = ((PY_VERSION_HEX >= 0x03040000) != 0);
  if (__pyx_t_4) {

    /* "EnumType":54
 * 
 *     THOST_TE_RESUME_TYPE = __Pyx_EnumBase('THOST_TE_RESUME_TYPE', __Pyx_OrderedDict([
 *         ('THOST_TERT_RESTART', THOST_TERT_RESTART),             # <<<<<<<<<<<<<<
 *         ('THOST_TERT_RESUME', THOST_TERT_RESUME),
 *         ('THOST_TERT_QUICK', THOST_TERT_QUICK),
 */
    __pyx_t_114 = __Pyx_PyInt_From_enum__THOST_TE_RESUME_TYPE(THOST_TERT_RESTART); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 54, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_114);
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 54, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_THOST_TERT_RESTART);
    __Pyx_GIVEREF(__pyx_n_s_THOST_TERT_RESTART);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_THOST_TERT_RESTART);
    __Pyx_GIVEREF(__pyx_t_114);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_114);
    __pyx_t_114 = 0;

    /* "EnumType":55
 *     THOST_TE_RESUME_TYPE = __Pyx_EnumBase('THOST_TE_RESUME_TYPE', __Pyx_OrderedDict([
 *         ('THOST_TERT_RESTART', THOST_TERT_RESTART),
 *         ('THOST_TERT_RESUME', THOST_TERT_RESUME),             # <<<<<<<<<<<<<<
 *         ('THOST_TERT_QUICK', THOST_TERT_QUICK),
 *     ]))
 */
    __pyx_t_114 = __Pyx_PyInt_From_enum__THOST_TE_RESUME_TYPE(THOST_TERT_RESUME); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 55, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_114);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 55, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_THOST_TERT_RESUME);
    __Pyx_GIVEREF(__pyx_n_s_THOST_TERT_RESUME);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_THOST_TERT_RESUME);
    __Pyx_GIVEREF(__pyx_t_114);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_114);
    __pyx_t_114 = 0;

    /* "EnumType":56
 *         ('THOST_TERT_RESTART', THOST_TERT_RESTART),
 *         ('THOST_TERT_RESUME', THOST_TERT_RESUME),
 *         ('THOST_TERT_QUICK', THOST_TERT_QUICK),             # <<<<<<<<<<<<<<
 *     ]))
 *     __Pyx_globals['THOST_TERT_RESTART'] = THOST_TE_RESUME_TYPE.THOST_TERT_RESTART
 */
    __pyx_t_114 = __Pyx_PyInt_From_enum__THOST_TE_RESUME_TYPE(THOST_TERT_QUICK); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 56, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_114);
    __pyx_t_115 = PyTuple_New(2); if (unlikely(!__pyx_t_115)) __PYX_ERR(1, 56, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_115);
    __Pyx_INCREF(__pyx_n_s_THOST_TERT_QUICK);
    __Pyx_GIVEREF(__pyx_n_s_THOST_TERT_QUICK);
    PyTuple_SET_ITEM(__pyx_t_115, 0, __pyx_n_s_THOST_TERT_QUICK);
    __Pyx_GIVEREF(__pyx_t_114);
    PyTuple_SET_ITEM(__pyx_t_115, 1, __pyx_t_114);
    __pyx_t_114 = 0;

    /* "EnumType":53
 * if PY_VERSION_HEX >= 0x03040000:
 * 
 *     THOST_TE_RESUME_TYPE = __Pyx_EnumBase('THOST_TE_RESUME_TYPE', __Pyx_OrderedDict([             # <<<<<<<<<<<<<<
 *         ('THOST_TERT_RESTART', THOST_TERT_RESTART),
 *         ('THOST_TERT_RESUME', THOST_TERT_RESUME),
 */
    __pyx_t_114 = PyList_New(3); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 53, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_114);
    __Pyx_GIVEREF(__pyx_t_2);
    PyList_SET_ITEM(__pyx_t_114, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyList_SET_ITEM(__pyx_t_114, 1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_115);
    PyList_SET_ITEM(__pyx_t_114, 2, __pyx_t_115);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_t_115 = 0;
    __Pyx_INCREF(__Pyx_OrderedDict);
    __pyx_t_115 = __Pyx_OrderedDict; __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_115))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_115);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_115);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_115, function);
      }
    }
    if (!__pyx_t_3) {
      __pyx_t_116 = __Pyx_PyObject_CallOneArg(__pyx_t_115, __pyx_t_114); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 53, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_116);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_115)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_114};
        __pyx_t_116 = __Pyx_PyFunction_FastCall(__pyx_t_115, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 53, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_116);
        __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_115)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_114};
        __pyx_t_116 = __Pyx_PyCFunction_FastCall(__pyx_t_115, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 53, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_116);
        __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
      } else
      #endif
      {
        __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 53, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3); __pyx_t_3 = NULL;
        __Pyx_GIVEREF(__pyx_t_114);
        PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_t_114);
        __pyx_t_114 = 0;
        __pyx_t_116 = __Pyx_PyObject_Call(__pyx_t_115, __pyx_t_2, NULL); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 53, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_116);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_115); __pyx_t_115 = 0;
    __Pyx_INCREF(__Pyx_EnumBase);
    __pyx_t_115 = __Pyx_EnumBase; __pyx_t_2 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_115))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_115);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_115);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_115, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_115)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_n_s_THOST_TE_RESUME_TYPE, __pyx_t_116};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_115, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 53, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_115)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_n_s_THOST_TE_RESUME_TYPE, __pyx_t_116};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_115, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 53, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    } else
    #endif
    {
      __pyx_t_114 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 53, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_114);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_114, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_INCREF(__pyx_n_s_THOST_TE_RESUME_TYPE);
      __Pyx_GIVEREF(__pyx_n_s_THOST_TE_RESUME_TYPE);
      PyTuple_SET_ITEM(__pyx_t_114, 0+__pyx_t_117, __pyx_n_s_THOST_TE_RESUME_TYPE);
      __Pyx_GIVEREF(__pyx_t_116);
      PyTuple_SET_ITEM(__pyx_t_114, 1+__pyx_t_117, __pyx_t_116);
      __pyx_t_116 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_115, __pyx_t_114, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 53, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    }
    __Pyx_DECREF(__pyx_t_115); __pyx_t_115 = 0;
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_THOST_TE_RESUME_TYPE, __pyx_t_1) < 0) __PYX_ERR(1, 53, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":58
 *         ('THOST_TERT_QUICK', THOST_TERT_QUICK),
 *     ]))
 *     __Pyx_globals['THOST_TERT_RESTART'] = THOST_TE_RESUME_TYPE.THOST_TERT_RESTART             # <<<<<<<<<<<<<<
 *     __Pyx_globals['THOST_TERT_RESUME'] = THOST_TE_RESUME_TYPE.THOST_TERT_RESUME
 *     __Pyx_globals['THOST_TERT_QUICK'] = THOST_TE_RESUME_TYPE.THOST_TERT_QUICK
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_THOST_TE_RESUME_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 58, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_115 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_THOST_TERT_RESTART); if (unlikely(!__pyx_t_115)) __PYX_ERR(1, 58, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_115);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 58, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_THOST_TERT_RESTART, __pyx_t_115) < 0)) __PYX_ERR(1, 58, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_115); __pyx_t_115 = 0;

    /* "EnumType":59
 *     ]))
 *     __Pyx_globals['THOST_TERT_RESTART'] = THOST_TE_RESUME_TYPE.THOST_TERT_RESTART
 *     __Pyx_globals['THOST_TERT_RESUME'] = THOST_TE_RESUME_TYPE.THOST_TERT_RESUME             # <<<<<<<<<<<<<<
 *     __Pyx_globals['THOST_TERT_QUICK'] = THOST_TE_RESUME_TYPE.THOST_TERT_QUICK
 * else:
 */
    __pyx_t_115 = __Pyx_GetModuleGlobalName(__pyx_n_s_THOST_TE_RESUME_TYPE); if (unlikely(!__pyx_t_115)) __PYX_ERR(1, 59, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_115);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_115, __pyx_n_s_THOST_TERT_RESUME); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 59, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_115); __pyx_t_115 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 59, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_THOST_TERT_RESUME, __pyx_t_1) < 0)) __PYX_ERR(1, 59, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":60
 *     __Pyx_globals['THOST_TERT_RESTART'] = THOST_TE_RESUME_TYPE.THOST_TERT_RESTART
 *     __Pyx_globals['THOST_TERT_RESUME'] = THOST_TE_RESUME_TYPE.THOST_TERT_RESUME
 *     __Pyx_globals['THOST_TERT_QUICK'] = THOST_TE_RESUME_TYPE.THOST_TERT_QUICK             # <<<<<<<<<<<<<<
 * else:
 *     class THOST_TE_RESUME_TYPE(__Pyx_EnumBase):
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_THOST_TE_RESUME_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 60, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_115 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_THOST_TERT_QUICK); if (unlikely(!__pyx_t_115)) __PYX_ERR(1, 60, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_115);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 60, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_THOST_TERT_QUICK, __pyx_t_115) < 0)) __PYX_ERR(1, 60, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_115); __pyx_t_115 = 0;

    /* "EnumType":51
 * 
 * cdef dict __Pyx_globals = globals()
 * if PY_VERSION_HEX >= 0x03040000:             # <<<<<<<<<<<<<<
 * 
 *     THOST_TE_RESUME_TYPE = __Pyx_EnumBase('THOST_TE_RESUME_TYPE', __Pyx_OrderedDict([
 */
    goto __pyx_L5;
  }

  /* "EnumType":62
 *     __Pyx_globals['THOST_TERT_QUICK'] = THOST_TE_RESUME_TYPE.THOST_TERT_QUICK
 * else:
 *     class THOST_TE_RESUME_TYPE(__Pyx_EnumBase):             # <<<<<<<<<<<<<<
 *         pass
 *     __Pyx_globals['THOST_TERT_RESTART'] = THOST_TE_RESUME_TYPE(THOST_TERT_RESTART, 'THOST_TERT_RESTART')
 */
  /*else*/ {
    __pyx_t_115 = PyTuple_New(1); if (unlikely(!__pyx_t_115)) __PYX_ERR(1, 62, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_115);
    __Pyx_INCREF(__Pyx_EnumBase);
    __Pyx_GIVEREF(__Pyx_EnumBase);
    PyTuple_SET_ITEM(__pyx_t_115, 0, __Pyx_EnumBase);
    __pyx_t_1 = __Pyx_CalculateMetaclass(NULL, __pyx_t_115); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 62, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_114 = __Pyx_Py3MetaclassPrepare(__pyx_t_1, __pyx_t_115, __pyx_n_s_THOST_TE_RESUME_TYPE, __pyx_n_s_THOST_TE_RESUME_TYPE, (PyObject *) NULL, __pyx_n_s_EnumType, (PyObject *) NULL); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 62, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_114);
    __pyx_t_116 = __Pyx_Py3ClassCreate(__pyx_t_1, __pyx_n_s_THOST_TE_RESUME_TYPE, __pyx_t_115, __pyx_t_114, NULL, 0, 1); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 62, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_THOST_TE_RESUME_TYPE, __pyx_t_116) < 0) __PYX_ERR(1, 62, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_115); __pyx_t_115 = 0;

    /* "EnumType":64
 *     class THOST_TE_RESUME_TYPE(__Pyx_EnumBase):
 *         pass
 *     __Pyx_globals['THOST_TERT_RESTART'] = THOST_TE_RESUME_TYPE(THOST_TERT_RESTART, 'THOST_TERT_RESTART')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['THOST_TERT_RESUME'] = THOST_TE_RESUME_TYPE(THOST_TERT_RESUME, 'THOST_TERT_RESUME')
 *     __Pyx_globals['THOST_TERT_QUICK'] = THOST_TE_RESUME_TYPE(THOST_TERT_QUICK, 'THOST_TERT_QUICK')
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_THOST_TE_RESUME_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 64, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_114 = __Pyx_PyInt_From_enum__THOST_TE_RESUME_TYPE(THOST_TERT_RESTART); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 64, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_114);
    __pyx_t_116 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_116 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_116)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_116);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_116, __pyx_t_114, __pyx_n_s_THOST_TERT_RESTART};
      __pyx_t_115 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_115)) __PYX_ERR(1, 64, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_116); __pyx_t_116 = 0;
      __Pyx_GOTREF(__pyx_t_115);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_116, __pyx_t_114, __pyx_n_s_THOST_TERT_RESTART};
      __pyx_t_115 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_115)) __PYX_ERR(1, 64, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_116); __pyx_t_116 = 0;
      __Pyx_GOTREF(__pyx_t_115);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 64, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_116) {
        __Pyx_GIVEREF(__pyx_t_116); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_116); __pyx_t_116 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_114);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_117, __pyx_t_114);
      __Pyx_INCREF(__pyx_n_s_THOST_TERT_RESTART);
      __Pyx_GIVEREF(__pyx_n_s_THOST_TERT_RESTART);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_117, __pyx_n_s_THOST_TERT_RESTART);
      __pyx_t_114 = 0;
      __pyx_t_115 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_115)) __PYX_ERR(1, 64, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_115);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 64, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_THOST_TERT_RESTART, __pyx_t_115) < 0)) __PYX_ERR(1, 64, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_115); __pyx_t_115 = 0;

    /* "EnumType":65
 *         pass
 *     __Pyx_globals['THOST_TERT_RESTART'] = THOST_TE_RESUME_TYPE(THOST_TERT_RESTART, 'THOST_TERT_RESTART')
 *     __Pyx_globals['THOST_TERT_RESUME'] = THOST_TE_RESUME_TYPE(THOST_TERT_RESUME, 'THOST_TERT_RESUME')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['THOST_TERT_QUICK'] = THOST_TE_RESUME_TYPE(THOST_TERT_QUICK, 'THOST_TERT_QUICK')
 * 
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_THOST_TE_RESUME_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 65, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyInt_From_enum__THOST_TE_RESUME_TYPE(THOST_TERT_RESUME); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 65, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_114 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_114 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_114)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_114);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_2, __pyx_n_s_THOST_TERT_RESUME};
      __pyx_t_115 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_115)) __PYX_ERR(1, 65, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_115);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_114, __pyx_t_2, __pyx_n_s_THOST_TERT_RESUME};
      __pyx_t_115 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_115)) __PYX_ERR(1, 65, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_114); __pyx_t_114 = 0;
      __Pyx_GOTREF(__pyx_t_115);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_116 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 65, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_116);
      if (__pyx_t_114) {
        __Pyx_GIVEREF(__pyx_t_114); PyTuple_SET_ITEM(__pyx_t_116, 0, __pyx_t_114); __pyx_t_114 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_116, 0+__pyx_t_117, __pyx_t_2);
      __Pyx_INCREF(__pyx_n_s_THOST_TERT_RESUME);
      __Pyx_GIVEREF(__pyx_n_s_THOST_TERT_RESUME);
      PyTuple_SET_ITEM(__pyx_t_116, 1+__pyx_t_117, __pyx_n_s_THOST_TERT_RESUME);
      __pyx_t_2 = 0;
      __pyx_t_115 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_116, NULL); if (unlikely(!__pyx_t_115)) __PYX_ERR(1, 65, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_115);
      __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 65, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_THOST_TERT_RESUME, __pyx_t_115) < 0)) __PYX_ERR(1, 65, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_115); __pyx_t_115 = 0;

    /* "EnumType":66
 *     __Pyx_globals['THOST_TERT_RESTART'] = THOST_TE_RESUME_TYPE(THOST_TERT_RESTART, 'THOST_TERT_RESTART')
 *     __Pyx_globals['THOST_TERT_RESUME'] = THOST_TE_RESUME_TYPE(THOST_TERT_RESUME, 'THOST_TERT_RESUME')
 *     __Pyx_globals['THOST_TERT_QUICK'] = THOST_TE_RESUME_TYPE(THOST_TERT_QUICK, 'THOST_TERT_QUICK')             # <<<<<<<<<<<<<<
 * 
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_THOST_TE_RESUME_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 66, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_116 = __Pyx_PyInt_From_enum__THOST_TE_RESUME_TYPE(THOST_TERT_QUICK); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 66, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_116);
    __pyx_t_2 = NULL;
    __pyx_t_117 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_117 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_116, __pyx_n_s_THOST_TERT_QUICK};
      __pyx_t_115 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_115)) __PYX_ERR(1, 66, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_115);
      __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_116, __pyx_n_s_THOST_TERT_QUICK};
      __pyx_t_115 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_117, 2+__pyx_t_117); if (unlikely(!__pyx_t_115)) __PYX_ERR(1, 66, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_115);
      __Pyx_DECREF(__pyx_t_116); __pyx_t_116 = 0;
    } else
    #endif
    {
      __pyx_t_114 = PyTuple_New(2+__pyx_t_117); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 66, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_114);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_114, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_116);
      PyTuple_SET_ITEM(__pyx_t_114, 0+__pyx_t_117, __pyx_t_116);
      __Pyx_INCREF(__pyx_n_s_THOST_TERT_QUICK);
      __Pyx_GIVEREF(__pyx_n_s_THOST_TERT_QUICK);
      PyTuple_SET_ITEM(__pyx_t_114, 1+__pyx_t_117, __pyx_n_s_THOST_TERT_QUICK);
      __pyx_t_116 = 0;
      __pyx_t_115 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_114, NULL); if (unlikely(!__pyx_t_115)) __PYX_ERR(1, 66, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_115);
      __Pyx_DECREF(__pyx_t_114); __pyx_t_114 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 66, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_THOST_TERT_QUICK, __pyx_t_115) < 0)) __PYX_ERR(1, 66, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_115); __pyx_t_115 = 0;
  }
  __pyx_L5:;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_XDECREF(__pyx_t_22);
  __Pyx_XDECREF(__pyx_t_23);
  __Pyx_XDECREF(__pyx_t_24);
  __Pyx_XDECREF(__pyx_t_25);
  __Pyx_XDECREF(__pyx_t_26);
  __Pyx_XDECREF(__pyx_t_27);
  __Pyx_XDECREF(__pyx_t_28);
  __Pyx_XDECREF(__pyx_t_29);
  __Pyx_XDECREF(__pyx_t_30);
  __Pyx_XDECREF(__pyx_t_31);
  __Pyx_XDECREF(__pyx_t_32);
  __Pyx_XDECREF(__pyx_t_33);
  __Pyx_XDECREF(__pyx_t_34);
  __Pyx_XDECREF(__pyx_t_35);
  __Pyx_XDECREF(__pyx_t_36);
  __Pyx_XDECREF(__pyx_t_37);
  __Pyx_XDECREF(__pyx_t_38);
  __Pyx_XDECREF(__pyx_t_39);
  __Pyx_XDECREF(__pyx_t_40);
  __Pyx_XDECREF(__pyx_t_41);
  __Pyx_XDECREF(__pyx_t_42);
  __Pyx_XDECREF(__pyx_t_43);
  __Pyx_XDECREF(__pyx_t_44);
  __Pyx_XDECREF(__pyx_t_45);
  __Pyx_XDECREF(__pyx_t_46);
  __Pyx_XDECREF(__pyx_t_47);
  __Pyx_XDECREF(__pyx_t_48);
  __Pyx_XDECREF(__pyx_t_49);
  __Pyx_XDECREF(__pyx_t_50);
  __Pyx_XDECREF(__pyx_t_51);
  __Pyx_XDECREF(__pyx_t_52);
  __Pyx_XDECREF(__pyx_t_53);
  __Pyx_XDECREF(__pyx_t_54);
  __Pyx_XDECREF(__pyx_t_55);
  __Pyx_XDECREF(__pyx_t_56);
  __Pyx_XDECREF(__pyx_t_57);
  __Pyx_XDECREF(__pyx_t_58);
  __Pyx_XDECREF(__pyx_t_59);
  __Pyx_XDECREF(__pyx_t_60);
  __Pyx_XDECREF(__pyx_t_61);
  __Pyx_XDECREF(__pyx_t_62);
  __Pyx_XDECREF(__pyx_t_63);
  __Pyx_XDECREF(__pyx_t_64);
  __Pyx_XDECREF(__pyx_t_65);
  __Pyx_XDECREF(__pyx_t_66);
  __Pyx_XDECREF(__pyx_t_67);
  __Pyx_XDECREF(__pyx_t_68);
  __Pyx_XDECREF(__pyx_t_69);
  __Pyx_XDECREF(__pyx_t_70);
  __Pyx_XDECREF(__pyx_t_71);
  __Pyx_XDECREF(__pyx_t_72);
  __Pyx_XDECREF(__pyx_t_73);
  __Pyx_XDECREF(__pyx_t_74);
  __Pyx_XDECREF(__pyx_t_75);
  __Pyx_XDECREF(__pyx_t_76);
  __Pyx_XDECREF(__pyx_t_77);
  __Pyx_XDECREF(__pyx_t_78);
  __Pyx_XDECREF(__pyx_t_79);
  __Pyx_XDECREF(__pyx_t_80);
  __Pyx_XDECREF(__pyx_t_81);
  __Pyx_XDECREF(__pyx_t_82);
  __Pyx_XDECREF(__pyx_t_83);
  __Pyx_XDECREF(__pyx_t_84);
  __Pyx_XDECREF(__pyx_t_85);
  __Pyx_XDECREF(__pyx_t_86);
  __Pyx_XDECREF(__pyx_t_87);
  __Pyx_XDECREF(__pyx_t_88);
  __Pyx_XDECREF(__pyx_t_89);
  __Pyx_XDECREF(__pyx_t_90);
  __Pyx_XDECREF(__pyx_t_91);
  __Pyx_XDECREF(__pyx_t_92);
  __Pyx_XDECREF(__pyx_t_93);
  __Pyx_XDECREF(__pyx_t_94);
  __Pyx_XDECREF(__pyx_t_95);
  __Pyx_XDECREF(__pyx_t_96);
  __Pyx_XDECREF(__pyx_t_97);
  __Pyx_XDECREF(__pyx_t_98);
  __Pyx_XDECREF(__pyx_t_99);
  __Pyx_XDECREF(__pyx_t_100);
  __Pyx_XDECREF(__pyx_t_101);
  __Pyx_XDECREF(__pyx_t_102);
  __Pyx_XDECREF(__pyx_t_103);
  __Pyx_XDECREF(__pyx_t_104);
  __Pyx_XDECREF(__pyx_t_105);
  __Pyx_XDECREF(__pyx_t_106);
  __Pyx_XDECREF(__pyx_t_107);
  __Pyx_XDECREF(__pyx_t_108);
  __Pyx_XDECREF(__pyx_t_109);
  __Pyx_XDECREF(__pyx_t_110);
  __Pyx_XDECREF(__pyx_t_111);
  __Pyx_XDECREF(__pyx_t_112);
  __Pyx_XDECREF(__pyx_t_113);
  __Pyx_XDECREF(__pyx_t_114);
  __Pyx_XDECREF(__pyx_t_115);
  __Pyx_XDECREF(__pyx_t_116);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init src.ctp_trader", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init src.ctp_trader");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* GetModuleGlobalName */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

/* PyObjectCall */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyCFunctionFastCall */
  #if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    PyObject *result;
    int flags;
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs, NULL);
}
#endif  // CYTHON_FAST_PYCCALL

/* PyFunctionFastCall */
  #if CYTHON_FAST_PYCALL
#include "frameobject.h"
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = PyThreadState_GET();
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = f->f_localsplus;
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif  // CPython < 3.6
#endif  // CYTHON_FAST_PYCALL

/* PyObjectCallMethO */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
  #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyObjectCallNoArg */
    #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyErrFetchRestore */
      #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* WriteUnraisableException */
      static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* RaiseArgTupleInvalid */
      static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
      static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
      static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseException */
      #if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* GetItemInt */
        static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* KeywordStringCheck */
        static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* PyIntBinop */
        #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* PyObjectCallMethod1 */
        static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto done;
#if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *args;
            PyObject *function = PyMethod_GET_FUNCTION(method);
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyCFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            args = PyTuple_New(2);
            if (unlikely(!args)) goto done;
            Py_INCREF(self);
            PyTuple_SET_ITEM(args, 0, self);
            Py_INCREF(arg);
            PyTuple_SET_ITEM(args, 1, arg);
            Py_INCREF(function);
            Py_DECREF(method); method = NULL;
            result = __Pyx_PyObject_Call(function, args, NULL);
            Py_DECREF(args);
            Py_DECREF(function);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallOneArg(method, arg);
done:
    Py_XDECREF(method);
    return result;
}

/* append */
        static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

/* Import */
        static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
        static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* StringJoin */
        #if !CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values) {
    return PyObject_CallMethodObjArgs(sep, __pyx_n_s_join, values, NULL);
}
#endif

/* BytesEquals */
        static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
        static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* GetNameInClass */
        static PyObject *__Pyx_GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    result = __Pyx_PyObject_GetAttrStr(nmspace, name);
    if (!result)
        result = __Pyx_GetModuleGlobalName(name);
    return result;
}

/* CalculateMetaclass */
        static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* FetchCommonType */
        static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunction */
        static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(__pyx_CyFunctionObject, func.m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_New(PyTypeObject *type, PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    __pyx_CyFunctionObject *op = PyObject_GC_New(__pyx_CyFunctionObject, type);
    if (op == NULL)
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    PyObject_GC_Track(op);
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0 = PySequence_ITEM(arg, 0);
                if (unlikely(!arg0)) return NULL;
                result = (*meth)(self, arg0);
                Py_DECREF(arg0);
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (__pyx_CyFunctionType == NULL) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (!m->defaults)
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* Py3ClassCreate */
            static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

/* GetAttr */
            static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_COMPILING_IN_CPYTHON
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* Globals */
            static PyObject* __Pyx_Globals(void) {
    Py_ssize_t i;
    PyObject *names;
    PyObject *globals = __pyx_d;
    Py_INCREF(globals);
    names = PyObject_Dir(__pyx_m);
    if (!names)
        goto bad;
    for (i = PyList_GET_SIZE(names)-1; i >= 0; i--) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject* name = PySequence_ITEM(names, i);
        if (!name)
            goto bad;
#else
        PyObject* name = PyList_GET_ITEM(names, i);
#endif
        if (!PyDict_Contains(globals, name)) {
            PyObject* value = __Pyx_GetAttr(__pyx_m, name);
            if (!value) {
#if CYTHON_COMPILING_IN_PYPY
                Py_DECREF(name);
#endif
                goto bad;
            }
            if (PyDict_SetItem(globals, name, value) < 0) {
#if CYTHON_COMPILING_IN_PYPY
                Py_DECREF(name);
#endif
                Py_DECREF(value);
                goto bad;
            }
        }
#if CYTHON_COMPILING_IN_PYPY
        Py_DECREF(name);
#endif
    }
    Py_DECREF(names);
    return globals;
bad:
    Py_XDECREF(names);
    Py_XDECREF(globals);
    return NULL;
}

/* CodeObjectCache */
            static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
            #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntToPy */
            static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__THOST_TE_RESUME_TYPE(enum THOST_TE_RESUME_TYPE value) {
    const enum THOST_TE_RESUME_TYPE neg_one = (enum THOST_TE_RESUME_TYPE) -1, const_zero = (enum THOST_TE_RESUME_TYPE) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum THOST_TE_RESUME_TYPE) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum THOST_TE_RESUME_TYPE) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum THOST_TE_RESUME_TYPE) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum THOST_TE_RESUME_TYPE) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum THOST_TE_RESUME_TYPE) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum THOST_TE_RESUME_TYPE),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
            static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__TD_CALLBACK_TYPE(enum TD_CALLBACK_TYPE value) {
    const enum TD_CALLBACK_TYPE neg_one = (enum TD_CALLBACK_TYPE) -1, const_zero = (enum TD_CALLBACK_TYPE) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum TD_CALLBACK_TYPE) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum TD_CALLBACK_TYPE) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum TD_CALLBACK_TYPE) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum TD_CALLBACK_TYPE) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum TD_CALLBACK_TYPE) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum TD_CALLBACK_TYPE),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
            static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* Print */
            #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0) {
                switch (s[len-1]) {
                    case ' ': break;
                    case '\f': case '\r': case '\n': case '\t': case '\v':
                        PyFile_SoftSpace(f, 0);
                        break;
                    default:  break;
                }
            }
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItem(kwargs, __pyx_n_s_file, stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItem(kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItem(__pyx_print_kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

/* CIntFromPyVerify */
            #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* PrintOne */
            #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            goto error;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        goto error;
    if (PyFile_WriteString("\n", f) < 0)
        goto error;
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
    /* the line below is just to avoid C compiler
     * warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}
#else
static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_Pack(1, o);
    if (unlikely(!arg_tuple))
        return -1;
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}
#endif

/* CIntFromPy */
            static CYTHON_INLINE enum THOST_TE_RESUME_TYPE __Pyx_PyInt_As_enum__THOST_TE_RESUME_TYPE(PyObject *x) {
    const enum THOST_TE_RESUME_TYPE neg_one = (enum THOST_TE_RESUME_TYPE) -1, const_zero = (enum THOST_TE_RESUME_TYPE) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(enum THOST_TE_RESUME_TYPE) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(enum THOST_TE_RESUME_TYPE, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (enum THOST_TE_RESUME_TYPE) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum THOST_TE_RESUME_TYPE) 0;
                case  1: __PYX_VERIFY_RETURN_INT(enum THOST_TE_RESUME_TYPE, digit, digits[0])
                case 2:
                    if (8 * sizeof(enum THOST_TE_RESUME_TYPE) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum THOST_TE_RESUME_TYPE, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum THOST_TE_RESUME_TYPE) >= 2 * PyLong_SHIFT) {
                            return (enum THOST_TE_RESUME_TYPE) (((((enum THOST_TE_RESUME_TYPE)digits[1]) << PyLong_SHIFT) | (enum THOST_TE_RESUME_TYPE)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum THOST_TE_RESUME_TYPE) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum THOST_TE_RESUME_TYPE, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum THOST_TE_RESUME_TYPE) >= 3 * PyLong_SHIFT) {
                            return (enum THOST_TE_RESUME_TYPE) (((((((enum THOST_TE_RESUME_TYPE)digits[2]) << PyLong_SHIFT) | (enum THOST_TE_RESUME_TYPE)digits[1]) << PyLong_SHIFT) | (enum THOST_TE_RESUME_TYPE)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum THOST_TE_RESUME_TYPE) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum THOST_TE_RESUME_TYPE, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum THOST_TE_RESUME_TYPE) >= 4 * PyLong_SHIFT) {
                            return (enum THOST_TE_RESUME_TYPE) (((((((((enum THOST_TE_RESUME_TYPE)digits[3]) << PyLong_SHIFT) | (enum THOST_TE_RESUME_TYPE)digits[2]) << PyLong_SHIFT) | (enum THOST_TE_RESUME_TYPE)digits[1]) << PyLong_SHIFT) | (enum THOST_TE_RESUME_TYPE)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (enum THOST_TE_RESUME_TYPE) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(enum THOST_TE_RESUME_TYPE) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum THOST_TE_RESUME_TYPE, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum THOST_TE_RESUME_TYPE) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum THOST_TE_RESUME_TYPE, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum THOST_TE_RESUME_TYPE) 0;
                case -1: __PYX_VERIFY_RETURN_INT(enum THOST_TE_RESUME_TYPE, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(enum THOST_TE_RESUME_TYPE,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(enum THOST_TE_RESUME_TYPE) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum THOST_TE_RESUME_TYPE, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum THOST_TE_RESUME_TYPE) - 1 > 2 * PyLong_SHIFT) {
                            return (enum THOST_TE_RESUME_TYPE) (((enum THOST_TE_RESUME_TYPE)-1)*(((((enum THOST_TE_RESUME_TYPE)digits[1]) << PyLong_SHIFT) | (enum THOST_TE_RESUME_TYPE)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(enum THOST_TE_RESUME_TYPE) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum THOST_TE_RESUME_TYPE, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum THOST_TE_RESUME_TYPE) - 1 > 2 * PyLong_SHIFT) {
                            return (enum THOST_TE_RESUME_TYPE) ((((((enum THOST_TE_RESUME_TYPE)digits[1]) << PyLong_SHIFT) | (enum THOST_TE_RESUME_TYPE)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(enum THOST_TE_RESUME_TYPE) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum THOST_TE_RESUME_TYPE, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum THOST_TE_RESUME_TYPE) - 1 > 3 * PyLong_SHIFT) {
                            return (enum THOST_TE_RESUME_TYPE) (((enum THOST_TE_RESUME_TYPE)-1)*(((((((enum THOST_TE_RESUME_TYPE)digits[2]) << PyLong_SHIFT) | (enum THOST_TE_RESUME_TYPE)digits[1]) << PyLong_SHIFT) | (enum THOST_TE_RESUME_TYPE)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum THOST_TE_RESUME_TYPE) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum THOST_TE_RESUME_TYPE, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum THOST_TE_RESUME_TYPE) - 1 > 3 * PyLong_SHIFT) {
                            return (enum THOST_TE_RESUME_TYPE) ((((((((enum THOST_TE_RESUME_TYPE)digits[2]) << PyLong_SHIFT) | (enum THOST_TE_RESUME_TYPE)digits[1]) << PyLong_SHIFT) | (enum THOST_TE_RESUME_TYPE)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(enum THOST_TE_RESUME_TYPE) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum THOST_TE_RESUME_TYPE, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum THOST_TE_RESUME_TYPE) - 1 > 4 * PyLong_SHIFT) {
                            return (enum THOST_TE_RESUME_TYPE) (((enum THOST_TE_RESUME_TYPE)-1)*(((((((((enum THOST_TE_RESUME_TYPE)digits[3]) << PyLong_SHIFT) | (enum THOST_TE_RESUME_TYPE)digits[2]) << PyLong_SHIFT) | (enum THOST_TE_RESUME_TYPE)digits[1]) << PyLong_SHIFT) | (enum THOST_TE_RESUME_TYPE)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum THOST_TE_RESUME_TYPE) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum THOST_TE_RESUME_TYPE, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum THOST_TE_RESUME_TYPE) - 1 > 4 * PyLong_SHIFT) {
                            return (enum THOST_TE_RESUME_TYPE) ((((((((((enum THOST_TE_RESUME_TYPE)digits[3]) << PyLong_SHIFT) | (enum THOST_TE_RESUME_TYPE)digits[2]) << PyLong_SHIFT) | (enum THOST_TE_RESUME_TYPE)digits[1]) << PyLong_SHIFT) | (enum THOST_TE_RESUME_TYPE)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(enum THOST_TE_RESUME_TYPE) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum THOST_TE_RESUME_TYPE, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum THOST_TE_RESUME_TYPE) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum THOST_TE_RESUME_TYPE, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            enum THOST_TE_RESUME_TYPE val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (enum THOST_TE_RESUME_TYPE) -1;
        }
    } else {
        enum THOST_TE_RESUME_TYPE val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (enum THOST_TE_RESUME_TYPE) -1;
        val = __Pyx_PyInt_As_enum__THOST_TE_RESUME_TYPE(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to enum THOST_TE_RESUME_TYPE");
    return (enum THOST_TE_RESUME_TYPE) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to enum THOST_TE_RESUME_TYPE");
    return (enum THOST_TE_RESUME_TYPE) -1;
}

/* CIntFromPy */
            static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
            static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *x) {
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int, digit, digits[0])
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 2 * PyLong_SHIFT) {
                            return (unsigned int) (((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 3 * PyLong_SHIFT) {
                            return (unsigned int) (((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 4 * PyLong_SHIFT) {
                            return (unsigned int) (((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(unsigned int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(unsigned int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) ((((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned int) -1;
        }
    } else {
        unsigned int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned int) -1;
        val = __Pyx_PyInt_As_unsigned_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned int");
    return (unsigned int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned int");
    return (unsigned int) -1;
}

/* CIntToPy */
            static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
            static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CheckBinaryVersion */
            static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* ModuleImport */
            #ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

/* TypeImport */
            #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

/* InitStrings */
            static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
  #else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
  #endif
#else
  res = PyNumber_Int(x);
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
